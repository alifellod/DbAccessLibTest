<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CYQ.Data</name>
    </assembly>
    <members>
        <member name="T:CYQ.Data.Table.MDataTable">
            <summary>
            表格
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(System.Data.Common.DbDataReader)~CYQ.Data.Table.MDataTable">
            <summary>
            从DataReader隐式转换成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.op_Implicit(System.Data.DataTable)~CYQ.Data.Table.MDataTable">
            <summary>
            从DataTable隐式转换成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.NewRow">
            <summary>
            新建一行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Object)">
            <summary>
            使用本查询，原表的数据会发生化，如果查询后仍需要原始表数据，可先Clone()一份再查询,或者使用FindAll方法
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Int32,System.Object)">
            <summary>
            使用本查询，原表的数据会发生化，如果查询后仍需要原始表数据，可先Clone()一份再查询,或者使用FindAll方法
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Int32,System.Int32,System.Object)">
            <summary>
            使用本查询，原表的数据会发生化，如果查询后仍需要原始表数据，可先Clone()一份再查询,或者使用FindAll方法
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Select(System.Int32,System.Int32,System.Object,System.Int32@,System.Object[])">
            <summary>
            使用本查询，原表的数据会发生化，如果查询后仍需要原始表数据，可先Clone()一份再查询,或者使用FindAll方法
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.FindRow(System.Object)">
            <summary>
            使用本查询，原表的数据不会发生变化，但查出来的单行数据和原始表仍是同一个引用。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.FindAll(System.Object)">
            <summary>
            使用本查询，原表的数据不会发生变化，但查出来的多行数据和原始表仍是同一个引用。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.GetCount(System.Object)">
            <summary>
            统计满足条件的行数
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.LoadRow(CYQ.Data.Table.MDataRow)">
            <summary>
            加载行(包括行架构)[提示，仅当表为空架构时有效]
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToDataTable">
            <summary>
            转换成DataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.LoadFromList``1(System.Collections.Generic.List{``0})">
            <summary>
            从List列表里加载成MDataTable
            </summary>
            <param name="entityList">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.LoadFromJson(System.String)">
            <summary>
            从Json文件路径或字符串反加载成MDataTable（不支持多级嵌套）
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.LoadFromXml(System.String)">
            <summary>
            从Xml文件路径或字符串反加载成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.CreateSchema(System.String,System.Boolean,System.String[],System.Data.SqlDbType[])">
            <summary>
            快速创建表架构（无ID列名时，系统自动创建自增型的ID列到首列。）
            </summary>
            <param name="fileName">带完整路径的文件名</param>
            <param name="overwrite">指定的文件存在时，是否允许复盖</param>
            <param name="columnNames">创建的列名</param>
            <param name="sqlDbTypes">列名对应的数据类型（不指定则默认为nvarchar）</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToXml">
            <summary>
            输出Xml文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.WriteXml(System.String)">
            <summary>
            保存Xml
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToJson">
            <summary>
            输出Json[可指定保存路径]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToJson(System.Boolean,System.Boolean)">
            <param name="addHead">输出头部信息[带count、Success、ErrorMsg]</param>
            <param name="addSchema">首行输出表架构信息,反接收时可还原架构</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.WriteJson(System.Boolean,System.Boolean,System.String)">
            <summary>
            输出Json[可指定保存路径]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Bind(System.Object)">
            <summary>
            将数据表绑定到列表控件
            </summary>
            <param name="control">列表控件[包括Repeater/DataList/GridView/DataGrid等]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Merge(CYQ.Data.Table.MDataTable)">
            <summary>
            将新表的行放到原表的下面。
            </summary>
            <param name="newTable"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.ToList``1(System.Boolean[])">
            <summary>
            转实体列表
            </summary>
            <param name="useEmit">是否使用Emit方式转换[数据越多[大于500条]性能越高],不写默认自适应判断</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp)">
            <summary>
            批量插入或更新 [提示：操作和当前表名有关，如当前表名不是要提交入库的表名,请给TableName属性重新赋值]
            </summary>
            <param name="op">操作选项[插入|更新]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp,System.String)">
            <summary>
             批量插入或更新
            </summary>
            <param name="newConn">指定新的数据库链接</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.AcceptChanges(CYQ.Data.Table.AcceptOp,System.String,System.Boolean)">
            <param name="newConn">指定新的数据库链接</param>
            <param name="outProcess">调试界输出面中输出进度</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Clone">
            <summary>
            复制表
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Close">
            <summary>
            清除所有行
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.NextResult">
            <summary>
            是否还有下一条数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataTable.Read">
            <summary>
            索引移到下一条，准备进行读取。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Rows">
            <summary>
            表格行
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Columns">
            <summary>
            表格的架构列
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Conn">
            <summary>
            该表归属的数据库链接。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.Depth">
            <summary>
            获取数据行总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.IsClosed">
            <summary>
            是否已读取完所所有数据，并清空了记录。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.RecordsAffected">
            <summary>
            返回（查询时）记录总数。
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTable.FieldCount">
            <summary>
            获取列的总数
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataProperty">
            <summary>
            实现Winform的表格控件绑定功能。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.MutilLanguage">
            <summary>
            多语言操作类
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.FilePath">
            <summary>
            加载的Xml语言文件的完整（路径）名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.LanKey">
            <summary>
            当前语言类型（如果有设置语言Cookie，则初始化时从Cookie恢复）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.MutilLanguage.DefaultLanKey">
            <summary>
            系统默认的语言（取值顺序：AppConfig.XHtml.SysLangKey - > 浏览器语言 -》 默认中文）
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.LanguageKey">
            <summary>
            语言种类
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.None">
            <summary>
            未设置状态
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Chinese">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.English">
            <summary>
            英文
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.French">
            <summary>
            法语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.German">
            <summary>
            德语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Korean">
            <summary>
            韩语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Japanese">
            <summary>
            日语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Hindi">
            <summary>
            印地语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Russian">
            <summary>
             俄语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Italian">
            <summary>
            意大利语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Custom">
            <summary>
            自定义语言
            </summary>
        </member>
        <member name="T:CYQ.Data.DAL.DbBase">
            <summary>
            数据库操作基类
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.DbBase._IsAllowInterWriteLog">
            <summary>
            是否允许进入写日志中模块
            </summary>
        </member>
        <member name="M:CYQ.Data.DAL.DbBase.CheckIsConcurrent">
            <summary>
            并发操作检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.DAL.DbBase.WriteTime">
            <summary>
            记录执行时间
            </summary>
        </member>
        <member name="P:CYQ.Data.DAL.DbBase.DataBase">
            <summary>
            获得链接的数据库名称
            </summary>
        </member>
        <member name="P:CYQ.Data.DAL.DbBase.AllowRecordSql">
            <summary>
            是否允许记录SQL语句
            </summary>
        </member>
        <member name="P:CYQ.Data.DAL.DbBase.ReturnValue">
            <summary>
            存储过程返回值。
            </summary>
        </member>
        <member name="P:CYQ.Data.DAL.DbBase.OutPutValue">
            <summary>
            存储过程OutPut输出参数值。
            </summary>
        </member>
        <member name="T:CYQ.Data.Orm.OrmBase">
            <summary>
            ORM扩展基类
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetInit(System.Object,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetInit(System.Object,System.String,System.String)">
            <summary>
            初始化状态[继承此基类的实体在构造函数中需调用此方法]
            </summary>
            <param name="entityInstance">实体对象,一般写:this</param>
            <param name="tableName">表名,如:Users</param>
            <param name="conn">数据链接,单数据库时可写Null,或写默认链接配置项:"Conn",或直接数据库链接字符串</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Set(System.Object,System.Object)">
            <summary>
            设置值,例如:[action.Set(TableName.ID,10);]
            </summary>
            <param name="key">字段名称,可用枚举如:[TableName.ID]</param>
            <param name="value">要设置给字段的值</param>
            <example><code>
            set示例：action.Set(Users.UserName,"路过秋天");
            get示例：int id=action.Get&lt;int&gt;(Users.ID);
            </code></example>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert">
            <summary>
            插入数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(CYQ.Data.InsertOp)">
            <summary>
             插入数据
            </summary>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(System.Boolean)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Insert(System.Boolean,CYQ.Data.InsertOp)">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
            <param name="option">插入选项</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update">
            <summary>
             更新数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update(System.Object)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Update(System.Object,System.Boolean)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Delete">
            <summary>
             删除数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Delete(System.Object)">
            <summary>
             删除数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Fill(System.Object)">
            <summary>
            查询1条数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select">
            <summary>
            列表查询
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.String)">
            <summary>
            列表查询
            </summary>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.Int32,System.String)">
            <summary>
            列表查询
            </summary>
            <param name="topN">查询几条</param>
            <param name="where">查询条件[可附带 order by 语句]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Select(System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            带分布功能的选择[多条件查询,选择所有时只需把PageIndex/PageSize设置为0]
            </summary>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每页数量[为0时默认选择所有]</param>
            <param name="where"> 查询条件[可附带 order by 语句]</param>
            <param name="count">返回的记录总数</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.GetCount(System.String)">
            <summary>
            获取记录总数
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.Exists(System.String)">
            <summary>
            查询是否存在指定的条件的数据
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.GetFrom(System.Object)">
            <summary>
            将控件的值设置到实体中[默认从控件中自动获取值]
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.GetFromJson(System.String)">
            <summary>
            从Json字符串或包括json内容的文件中自动赋值,json如:{"Name":"cyqdata","Url":"www.cyqdata.com"}
            </summary>
            <param name="jsonOrFileName">json字符串或存json的文件</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetAutoParentControl(System.Object,System.Object[])">
            <summary>
            自动获取值父控件设置,可传多个父控件[至少1个]（winform有效，web请调用SetAutoPrefix）
            </summary>
            <param name="parent">第一个父控件名称[必须]</param>
            <param name="otherParent">后面N个[可选]</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetAutoPrefix(System.String,System.String[])">
            <summary>
            自动获取值前缀设置,可传多个前缀[至少1个]（web有效，winform请调用SetAutoParentControl）
            </summary>
            <param name="autoPrefix">第一个前缀[必须]</param>
            <param name="otherPrefix">后面N个前缀[可选]</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetSelectColumns(System.Object[])">
            <summary>
            本方法可以在单表使用时查询指定的列[设置后可使用Fill与Select方法]
            提示：分页查询时，排序条件的列必须指定选择。
            </summary>
            <param name="columnNames">可设置多个列名[调用Fill或Select后,本参数将被清除]</param>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetTo(System.Object)">
            <summary>
            将值设置到控件中
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetTo(System.Object,System.Object,System.Boolean)">
            <summary>
            将值设置到控件中
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetTo(System.Object,System.Object)">
            <summary>
            将值设置到控件中
            </summary>
        </member>
        <member name="M:CYQ.Data.Orm.OrmBase.SetToAll(System.Object[])">
            <summary>
            为页面中的所有控件自动赋值，示例：先 SetAutoPrefix("txt","ddl")，再 SetToAll(this)。
            </summary>
            <param name="parentControls">父控件列表（系统自动遍历父控件下的子控件进行赋值）</param>
            <example><code>
            action.SetAutoPrefix("txt","ddl");//设置控件的前缀
            action.SetToAll(this);
            </code></example>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.TableName">
            <summary>
            获取或设置表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.Columns">
            <summary>
            获取表的结构。
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.DebugInfo">
            <summary>
            执行的调试语句输出
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.DalType">
            <summary>
            当前的数据库类型
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.RawData">
            <summary>
            原始行数据。
            </summary>
        </member>
        <member name="P:CYQ.Data.Orm.OrmBase.AllowWriteLog">
            <summary>
            标识是否允许写日志。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XHtmlAction">
            <summary>
            Xml/Html操作类
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XHtmlBase">
            <summary>
            操作Xml及XHtml的基类
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase._XmlDocument">
            <summary>
            xml对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.xnm">
            <summary>
            命名空间对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.theCache">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.htmlNameSpace">
            <summary>
            Html名称空间
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlBase.xmlCacheKey">
            <summary>
            xml缓存的key
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.GenerateKey(System.String)">
            <summary>
            从绝对路径中获得文件名做为Key值
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadXml(System.String)">
            <summary>
            从xml字符串加载
            </summary>
            <param name="xml">xml字符串</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String)">
            <summary>
            从文件中加载Xml
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String,CYQ.Data.Xml.XmlCacheLevel)">
            <summary>
            加载XML
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Load(System.String,CYQ.Data.Xml.XmlCacheLevel,System.Boolean)">
            <summary>
            加载Xml文件
            </summary>
            <param name="fileName">文件名</param>
            <param name="level">文件缓存级别</param>
            <param name="clearCommentNode">加载后是否清除注释节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadFromCache(System.String)">
            <summary>
            从缓存中加载html
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.RemoveCommentNode">
            <summary>
            移除所有注释节点
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.LoadFromFile(System.String,System.Boolean)">
            <summary>
            从文件加载XML
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.SaveToCache(System.String,System.Boolean)">
            <summary>
            将文档缓存到全局Cache中
            </summary>
            <param name="key">缓存的Key名称</param>
            <param name="readOnly">ture:全局共享一份;false:每次Clone一份</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Save">
            <summary>
            文件保存
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Save(System.String)">
            <param name="fileName">指定保存路径</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.SetCDATA(System.String)">
            <summary>
            给指定的字符加上CDATA
            </summary>
            <param name="text">对象字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.ClearCDATA(System.String)">
            <summary>
            清除CDATA
            </summary>
            <param name="text">对象字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.ClearMMS(System.String)">
            <summary>
            替换掉MMS前缀
            </summary>
            <param name="text">对象字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Filter(System.String)">
            <summary>
            过滤XML(十六进制值 0x1D)无效的字符
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.XmlDoc">
            <summary>
            内部XmlDocument对象
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.FileName">
            <summary>
            加载的Xml文件的完整（路径）名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.NoClone">
            <summary>
            是否只读，只读时缓存[存取]不再Clone
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.DocIsCache">
            <summary>
            文档是否取自缓存
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.CacheIsChanged">
            <summary>
            Cache发生变化[用户更改缓存并设置更改标识]
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.XHtmlIsChanged">
            <summary>
            目标XHtml文件是否被修改
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlBase.CacheMinutes">
            <summary>
            缓存分钟数
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor">
            <summary>
            默认构造函数[操作无名称空间的Xml]
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="forHtml">true时，将自动载入html的名称空间(http://www.w3.org/1999/xhtml)</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="forHtml">true时，将自动载入html的名称空间(http://www.w3.org/1999/xhtml)</param>
            <param name="noClone">true时文档应为只读，所获取是同一份文档引用；false时文档可写，每次获取会克隆一份文档返回。</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nameSpaceUrl">当Xml的名称空间[若有]</param>
        </member>
        <member name="F:CYQ.Data.Xml.XHtmlAction.IsOpenUserLang">
            <summary>
            是否开始自定义语言分隔(分隔符号为：[#langsplit])
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.SetFor(System.String,CYQ.Data.Xml.SetType,System.String[])">
            <summary>
            为节点设置值，通常在LoadData后使用。
            </summary>
            <param name="values">setType为Custom时，可自定义值，如“"href","http://www.cyqdata.com","target","_blank"”</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Set(System.Xml.XmlNode,CYQ.Data.Xml.SetType,System.String[])">
            <summary>
            为节点赋值[通常值是在values中赋值]
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.AppendNode(System.Xml.XmlNode,System.Xml.XmlNode,System.Int32)">
            <summary>
            添加节点
            </summary>
            <param name="position">parentNode的第N个子节点之后</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.Clear(System.Xml.XmlNode)">
            <summary>
            保留节点,但清除节点所内容/属性
            </summary>
            <param name="OldNode"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveChild(System.String,System.Int32)">
            <summary>
            移除子节点
            </summary>
            <param name="id">节点的ID</param>
            <param name="start">从第几个子节点开始删除[索引从0开始]</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveChild(System.Xml.XmlNode,System.Int32)">
            <summary>
            移除子节点
            </summary>
            <param name="node">节点</param>
            <param name="start">从第几个子节点开始删除[索引从0开始]</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveAttrList(System.String[])">
            <summary>
            移除多个属性
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveAttrList(System.String,CYQ.Data.Xml.SetType)">
            <summary>
            属性移除
            </summary>
            <param name="attrName">属性名称</param>
            <param name="excludeSetType">排除的节点类型</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveCommentNode(System.Xml.XmlNode)">
            <summary>
            移除注释节点
            </summary>
            <param name="node">移除此节点的注释文本</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.RemoveCommentNode">
            <summary>
            移除注释节点
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InterChange(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            两个节点交换位置
            </summary>
            <param name="XNodeFirst">第一个节点</param>
            <param name="XNodeLast">第二个节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.ReplaceNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点替换[支持两个的文档间替换]
            </summary>
            <param name="NewXNode"></param>
            <param name="OldXNode"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点之后插入[支持两文档之间的插入]
            </summary>
            <param name="NewNode">要被插入的新节点</param>
            <param name="RefNode">在此节点后插入NewNode节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XHtmlAction.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点之前插入[支持两文档之间的插入]
            </summary>
            <param name="NewNode">要被插入的新节点</param>
            <param name="RefNode">在此节点前插入NewNode节点</param>
        </member>
        <member name="P:CYQ.Data.Xml.XHtmlAction.IsUserLang">
            <summary>
            当前请求是否用户的语言
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.JsonHelper">
            <summary>
            json 帮助类，功能强大
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.#ctor(System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="addHead">是否带输出头</param>
            <param name="addSchema">是否首行带表结构[只对表格起作用]</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.AddBr">
            <summary>
            添加完一行数据后调用此方法换行
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Add(System.String,System.String)">
            <summary>
            添加一个字段的值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.ToString">
            <summary>
            输出Json字符串
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataTable)">
            <summary>
            从数据表中取数据填充,最终可输出json字符串
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataRow)">
            <summary>
            从数据行中填充，最终可输出json字符串。
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Fill(CYQ.Data.Table.MDataColumn,System.Boolean)">
            <summary>
            从数据结构填充，最终可输出json字符串。
            </summary>
            <param name="column">数据结构</param>
            <param name="isFullSchema">false：输出单行的[列名：数据类型]；true：输出多行的完整的数据结构</param>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Load(System.String)">
            <summary>
            从Json字符串中反加载成数据表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.Split(System.String)">
            <summary>
            将Json分隔成键值对。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.JsonHelper.GetJosnValue(System.String,System.String)">
            <summary>
            获取Json字符串的值
            </summary>
            <param name="json">Json字符串</param>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.RowOp">
            <summary>
             Json输出行数据的过滤选项
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.Success">
            <summary>
            是否成功   
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.ErrorMsg">
            <summary>
            错误提示信息   
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.RowCount">
            <summary>
            当前数据记录总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Tool.JsonHelper.Count">
            <summary>
            所有记录的总数（多数用于分页的记录总数）。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataRow">
            <summary>
            一行记录
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MDataRow.Conn">
            <summary>
            所依属的数据库配置项名称[当MAction从带有架构的行加载时,此链接若存在,优先成为默认的数据库链接]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetItemValue(System.Int32)">
            <summary>
            此方法被Emit所调用
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetItemValues">
            <summary>
            返回数组值
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Get``1(System.Object)">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Set(System.Object,System.Object)">
            <summary>
            为行设置值
            </summary>
            <param name="key">字段名</param>
            <param name="value">值</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetFromJson(System.String)">
            <summary>
            从json里加载值,或从指定路径中加载json
            </summary>
            <param name="jsonOrFileName"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToTable">
            <summary>
            转成MDataTable
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToJson">
            <summary>
            输出行的数据Json
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToJson(CYQ.Data.RowOp)">
            <summary>
            输出Json
            </summary>
            <param name="op">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.WriteJson(System.String,CYQ.Data.RowOp)">
            <summary>
            将json保存到指定文件中
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.ToEntity``1">
            <summary>
            转成实体
            </summary>
            <typeparam name="T">实体名称</typeparam>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetFromEntity(System.Object)">
            <summary>
            将实体转成数据行。
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Clear">
            <summary>
            将行的数据行的值全重置为Null
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.SetState(System.Int32)">
            <summary>
            将行的数据行的状态全部重置
            </summary>
            <param name="state">状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.GetState">
            <summary>
            获取行的当前状态[0:未更改；1:已赋值,值相同[可插入]；2:已赋值,值不同[可更新]]
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadValue(CYQ.Data.Table.MDataRow)">
            <summary>
            从别的行加载值[不改变自身结构及引用]
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.LoadValue(CYQ.Data.Table.MDataRow,CYQ.Data.RowOp,System.Boolean)">
            <summary>
            从别的行加载值[不改变自身结构及引用]
            </summary>
            <param name="row">要加载数据的行</param>
            <param name="rowOp">行选项[从其它行加载的条件]</param>
            <param name="isAllowAppendColumn">如果row带有新列，是否加列</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Clone">
            <summary>
            复制一行
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.TableName">
            <summary>
            原始表名[未经过多数据库兼容处理]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Item(System.Object)">
            <summary>
            输入枚举型数据
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.SetType">
            <summary>
            设置操作的节点属性类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.SetType.A">
            <summary>
            A链接标识，最多可赋4个值为:InnerXml,href,title,target
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.SetType.Custom">
            <summary>
            自定义，以“属性,值,属性,值”这样的对应设置，无个数限制。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.ValueReplace">
            <summary>
            CYQ.Data.Xml.XHtmlAction 使用时的值替换
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.Source">
            <summary>
            Set 方法中 原节点的值 ：[#source]
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.New">
            <summary>
            LoadData加载数据后，数据的值 ：[#new]
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.ValueReplace.LangSplit">
            <summary>
            CYQ.Data.Xml.MutilLanguage 类 Get方法取到值后，按[#langsplit]分隔并按当前语言返回分隔符前面或后面值
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTableBatchAction">
            <summary>
            批量操作。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableBatchAction.FixTable(CYQ.Data.Table.MDataColumn)">
            <summary>
            进行列修正
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.AcceptOp">
            <summary>
            MDataTable的AcceptChanges方法的选项
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Insert">
            <summary>
            插入（由系统产生自增加ID）
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.InsertWithID">
            <summary>
            插入（由用户指定ID插入）
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.AcceptOp.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlPager">
            <summary>
            分页存储过程语句类
            </summary>
            <summary>
            Sql分页语句类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlPager.GetSelectBaseForSql2005">
            <summary>
            获取sql2005分页存储过程[输出带"br换行标签"]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlPager.GetSelectBaseForSql2000">
            <summary>
            获取sql2000分页存储过程[输出带"br换行标签"]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlPager.GetWhereFixOrderBy(System.String)">
            <summary>
            格式化where，需要有order by
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlPager.GetOrderBy(System.String,System.Boolean)">
            <summary>
            获取order by 语句
            </summary>
            <param name="reverse">排序是否反转</param>
        </member>
        <member name="M:CYQ.Data.SQL.SqlPager.IsOrderByDesc(System.String)">
            <summary>
            是否降序
            </summary>
        </member>
        <member name="M:CYQ.Data.MActionUI.AutoSetColumnValue(System.Boolean)">
            <summary>
            自动设置列的值(true为插入,false为更新)
            </summary>
        </member>
        <member name="M:CYQ.Data.MActionUI.SetAutoPrefix(System.String,System.String[])">
            <summary>
            设置自动前缀（Web使用）
            </summary>
        </member>
        <member name="M:CYQ.Data.MActionUI.SetAutoParentControl(System.Object,System.Object[])">
            <summary>
            设置自动父控件（Win使用）
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.DataType">
            <summary>
            数据类型转换类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDataType(System.Data.SqlDbType,CYQ.Data.DAL.DalType,System.Int32)">
            <summary>
            导数据，创建表所用
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetType(System.Data.SqlDbType)">
            <summary>
            获得数据类型对应的Type
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetSqlType(System.Type)">
            <summary>
            将DbType类型对应映射到SqlDbType类型
            </summary>
            <param name="type">DbType类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetSqlType(System.String)">
            <summary>
            将DbType类型字符串表达方式对应映射到SqlDbType类型
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.String)">
            <summary>
            将DbType类型字符串表达形式对应映射到DbType类型
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.Type)">
            <summary>
            将SqlDbType类型对应映射到DbType类型
            </summary>
            <param name="type">SqlDbType类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetGroupID(System.Data.SqlDbType)">
            <summary>
            字母型返回0；数字型返回1；日期型返回2；bool返回3；guid返回4；其它返回999
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.Cache.CacheManage">
            <summary>
            全局缓存类
            </summary>
            <example><code>
            使用示例：
            实例化： CacheManage cache=CacheManage.Instance;
            添加：   cache.Add("路过秋天",new MDataTable);
            判断：   if(cache.Contains("路过秋天"))
                     {
            获取：       MDataTable table=cache.Get("路过秋天") as MDataTable;
                     }
            </code></example>
        </member>
        <member name="F:CYQ.Data.Cache.CacheManage.cacheState">
            <summary>
            非线程安全。
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Get(System.String)">
            <summary>
            获得一个Cache对象
            </summary>
            <param name="key">标识</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Contains(System.String)">
            <summary>
            是否存在缓存
            </summary>
            <param name="key">标识</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Add(System.String,System.Object)">
            <summary>
            添加一个Cache对象
            </summary>
            <param name="key">标识</param>
            <param name="value">对象值</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Add(System.String,System.Object,System.String)">
            <param name="fileName">关联的文件</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Add(System.String,System.Object,System.String,System.Double)">
            <param name="cacheTimeMinutes">缓存时间(单位分钟)</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Add(System.String,System.Object,System.String,System.Double,System.Web.Caching.CacheItemPriority)">
            <param name="level">缓存级别[高于Normal的将不受定时缓存清理的限制]</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Set(System.String,System.Object)">
            <summary>
            缓存设置：有则更新，无则添加
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Update(System.String,System.Object)">
            <summary>
            更新缓存，缓存存在则更更新，不存在则跳过
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Insert(System.String,System.Object,System.String,System.Double,System.Web.Caching.CacheItemPriority)">
            <summary>
            相对底层Cache添加方法,添加一个Cache请用Add方法
            </summary>
            <param name="key">标识</param>
            <param name="value">对象值</param>
            <param name="fileName">依赖文件</param>
            <param name="cacheTimeMinutes">缓存分钟数</param>
            <param name="level" >缓存级别</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Remove(System.String)">
            <summary>
            删除一个Cache对象
            </summary>
            <param name="key">标识</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Clear">
            <summary>
            清除所有缓存
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetFileDependencyHasChanged(System.String)">
            <summary>
            获取目标的文件依赖是否发生更改
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.SetChange(System.String,System.Boolean)">
            <summary>
            手动对缓存象标识为已更改
            </summary>
            <param name="key"></param>
            <param name="change"></param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetHasChanged(System.String)">
            <summary>
            获取缓存对象是否被手工标识为已更改
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.CacheInfo">
            <summary>
            获取当前缓存信息对象列表
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.CacheTable">
            <summary>
            获取缓存信息对象列表（以表信息返回，默认5分钟更新一次，特殊情况会快速更新（如：Key被添加移除时））
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.WorkInfo">
            <summary>
            内存工作信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.Count">
            <summary>
            获和缓存总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.Instance">
            <summary>
            返回唯一实例
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.RemainMemoryPercentage">
            <summary>
            还可用的缓存百分比
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.RemainMemoryBytes">
            <summary>
            还可用的缓存字节数
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheDependencyInfo">
            <summary>
            缓存依赖信息
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheDependencyInfo.CallCount">
            <summary>
            被调用的次数。
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheDependencyInfo.CreaeTime">
            <summary>
            缓存产生的时间
            </summary>
        </member>
        <member name="F:CYQ.Data.Cache.CacheDependencyInfo.CacheMinutes">
            <summary>
            缓存多少分钟
            </summary>
        </member>
        <member name="M:CYQ.Data.Cache.CacheDependencyInfo.UserSetChange(System.Boolean)">
            <summary>
            标识缓存对象的更改状态
            </summary>
            <param name="change"></param>
        </member>
        <member name="P:CYQ.Data.Cache.CacheDependencyInfo.IsChanged">
            <summary>
            系统文件依赖是否发生改变
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.XmlCacheLevel">
            <summary>
            Xml|XHtml 加载后缓存级别
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.NoCache">
            <summary>
            无缓存
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Lowwer">
            <summary>
            低缓存,5分钟
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Default">
            <summary>
            默认30分钟:或web.config系统配置项CacheTime取时间,
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Minute">
            <summary>
            1分钟
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Hour">
            <summary>
            1小时
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Day">
            <summary>
            1天时间
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.XmlCacheLevel.Week">
            <summary>
            一周时间
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.DBTool">
            <summary>
            数据库工具类[都是静态方法]
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.ExistsTable(System.String,System.String)">
            <summary>
            是否存在指定的表
            </summary>
            <param name="tableName">表名[或文件名]</param>
            <param name="conn">数据库链接</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.ExistsTable(System.String,System.String,CYQ.Data.DAL.DalType@)">
            <summary>
            检测表是否存在
            </summary>
            <param name="tableName">表名</param>
            <param name="conn">数据库链接</param>
            <param name="dalType">数据库类型</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetDalType(System.String)">
            <summary>
            获取数据库链接的数据库类型
            </summary>
            <param name="conn">链接配置Key或数据库链接语句</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.TestConn(System.String)">
            <summary>
            测试数据库链接语句
            </summary>
            <param name="conn">链接配置Key或数据库链接语句</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetSchema(System.String,System.String,System.String[])">
            <summary>
            获取表架构
            </summary>
            <param name="conn">数据库链接</param>
            <param name="connectionName">指定要返回架构的名称</param>
            <param name="restrictionValues">为指定的架构返回一组限制值</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetColumns(System.String,System.String)">
            <summary>
            获取表列架构
            </summary>
            <param name="tableName">表名</param>
            <param name="conn">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetTables(System.String)">
            <summary>
            获取数据库表
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetTables(System.String,System.String@)">
            <summary>
            获取所有表（表名+表说明）
            </summary>
            <param name="conn">数据库链接</param>
            <param name="dbName">返回指定链接的数据库名称</param>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.FormatDefaultValue(CYQ.Data.DAL.DalType,System.Object,System.Int32,System.Data.SqlDbType)">
            <summary>
            将各数据库默认值格式化成标准值，将标准值还原成各数据库默认值
            </summary>
            <param name="flag">[0:转成标准值],[1:转成各数据库值]</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetDataType(System.Data.SqlDbType,CYQ.Data.DAL.DalType,System.Int32)">
            <summary>
            获取指定数据库的数据类型
            </summary>
            <param name="sqlType">Sql数据类型</param>
            <param name="dalType">指定的数据库类型</param>
            <param name="maxSize">字段长度</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.CreateTable(System.String,CYQ.Data.Table.MDataColumn,System.String)">
            <summary>
            为指定的表架构生成SQL(Create Table)语句
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.DBTool.GetCreateTableSql(System.String,CYQ.Data.Table.MDataColumn,CYQ.Data.DAL.DalType)">
            <summary>
            获取指定的表架构生成的SQL(Create Table)语句
            </summary>
        </member>
        <member name="T:CYQ.Data.Log">
            <summary>
            日志类
            </summary>
        </member>
        <member name="M:CYQ.Data.Log.WriteLog(System.String)">
            <summary>
            内部写日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToTxt(System.String)">
            <summary>
            将日志写到外部txt[web.config中配置路径，配置项为Logpath,默认路径为 "Log/" ]
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:CYQ.Data.Log.WriteLogToTxt(System.Exception)">
            <summary>
            将异常写入文件
            </summary>
            <param name="err"></param>
        </member>
        <member name="P:CYQ.Data.Log.LogConn">
            <summary>
            CYQ.Data.Log 类记录数据库异常日志 - 数据库链接配置
            </summary>
        </member>
        <member name="P:CYQ.Data.Log.LogPath">
            <summary>
            文本日志的配置相对路径（默认为：Logs\\"）
            </summary>
        </member>
        <member name="P:CYQ.Data.Log.IsWriteLog">
            <summary>
            是否写数据库异常日志:开启时：有异常不抛出，转写入数据库；不开启：有异常会抛出
            </summary>
        </member>
        <member name="T:CYQ.Data.AppDebug">
            <summary>
            应用程序调试类,能截到应用程序所有执行的SQL
            </summary>
        </member>
        <member name="M:CYQ.Data.AppDebug.Start">
            <summary>
            开始记录调试信息
            </summary>
        </member>
        <member name="M:CYQ.Data.AppDebug.Stop">
            <summary>
            停止并清除记录的调试信息
            </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.IsRecording">
            <summary>
            正在记录中
            </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.Info">
            <summary>
            获取调试信息
            </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.SqlFilter">
             <summary>
            毫秒数（将所有长时间(ms)的SQL语句写入日志，对应配置项LogPath的路径）
             </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.InfoFilter">
            <summary>
            毫秒数（可通过此项设置条件过滤出时间(ms)较长的SQL语句）
            </summary>
        </member>
        <member name="P:CYQ.Data.AppDebug.OpenDebugInfo">
            <summary>
            开启信息调试记录：开启后MAction.DebugInfo可输出执行日志。
            同时AppDebug若要使用，也需要开启此项。
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataColumn">
            <summary>
            头列表集合
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.op_Implicit(System.Data.DataColumnCollection)~CYQ.Data.Table.MDataColumn">
            <summary>
            隐式转换列头
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String)">
            <summary>
            添加列
            </summary>
            <param name="columnName">列名</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType)">
            <param name="SqlType">列的数据类型</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType,System.Boolean)">
            <param name="isAutoIncrement">是否自增ID列</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.Add(System.String,System.Data.SqlDbType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Object)">
            <param name="defaultValue">默认值[日期类型请传入SqlValue.GetDate]</param>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.GetIndex(System.String)">
            <summary>
            获取列所在的索引位置
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.ToJson(System.Boolean)">
            <summary>
            输出Json格式的表构架
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.WriteSchema(System.String)">
            <summary>
            保存表架构到外部文件中(json格式）
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataColumn.LoadSchema(System.String)">
            <summary>
            加载表架构
            </summary>
        </member>
        <member name="T:CYQ.Data.DAL.DalCreate">
            <summary>
            数据库类型操作类
            </summary>
        </member>
        <member name="F:CYQ.Data.License._FullName">
            <summary>
            框架程序集名称
            </summary>
        </member>
        <member name="M:CYQ.Data.License.CheckOnApplicationStart">
            <summary>
            启动时，加载授权文件。
            </summary>
        </member>
        <member name="M:CYQ.Data.License.Check(System.String)">
            <summary>
            检测模块的授权。
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:CYQ.Data.License.FilePath">
            <summary>
            框架的运行路径
            </summary>
        </member>
        <member name="P:CYQ.Data.License.CyqDataKeyFileName">
            <summary>
            CYQ.Data 授权文件名称
            </summary>
        </member>
        <member name="T:CYQ.Data.Extension.IUIValue">
            <summary>
            对于自定义控件，只要继承此接口，即可以使用GetFrom与SetTo方法
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlValue">
            <summary>
            用于多数据库兼容的替换关键字/函数
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Desc">
            <summary>
            对于Bit类型[是/否] 类型的排序：[#DESC]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Asc">
            <summary>
            对于Bit类型[是/否] 类型的排序：[#ASC]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.True">
            <summary>
            对于Bit类型[是/否] 的条件值：[#TRUE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.False">
            <summary>
            对于Bit类型[是/否] 的条件值：[#FALSE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Len">
            <summary>
            数据库函数 Len 取长度：[#LEN](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.GetDate">
            <summary>
            数据库函数 GetDate 获取当前时间：[#GETDATE]
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Year">
            <summary>
            数据库函数 Year 获取时间的年：[#YEAR](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Month">
            <summary>
             数据库函数 Month 获取时间的月：[#MONTH](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Day">
            <summary>
            数据库函数 Day 获取时间的日：[#DAY](字段)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Substring">
            <summary>
            数据库函数 Substring 截取字符串：[#SUBSTRING](字段,起始索引int,长度int)
            <example>
            <code>
            示例： [#Substring](Title,0,2)
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.CharIndex">
            <summary>
            数据库函数 CharIndex 查询字符所在的位置：[#CHARINDEX]('要查询的字符',字段)
            <example>
            <code>
            示例： [#CHARINDEX]('findtitle',Title)>0
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.DateDiff">
            <summary>
            数据库函数 DateDiff 比较日期的差异天数：[#DATEDIFF](参数,开始时间,结束时间)
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.Case">
            <summary>
            数据库函数 Case 分支语句，其它Case 一起的关键字也需要包含。
            <example>
            <code>
            示例： [#CASE] [#WHEN] languageID={1} [#THEN] {2} [#ELSE] 0 [#END]
            </code>
            </example>
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlValue.CaseWhen">
            <summary>
            数据库函数 Case When 分支语句，其它Case 一起的关键字也需要包含。
            <example>
            <code>
            示例： [#CASE#WHEN] languageID={0} [#THEN] 1000000 [#ELSE] 0 [#END]
            </code>
            </example>
            </summary>
        </member>
        <member name="T:CYQ.Data.DAL.DalType">
            <summary>
            操作的数据库类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.DalType.None">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.DalType.MsSql">
            <summary>
            MSSQL[2000/2005/2008/2012/...]
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.DalType.Txt">
            <summary>
            Txt文本数据库
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.DalType.Xml">
            <summary>
            Xml数据库
            </summary>
        </member>
        <member name="T:CYQ.Data.DAL.ParaType">
            <summary>
            特殊参数类型[MProc操作Oracle时用到]
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.ParaType.Cursor">
            <summary>
            Oracle 游标类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.ParaType.OutPut">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.ParaType.ReturnValue">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.ParaType.CLOB">
            <summary>
            Oracle CLOB类型
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.IAop">
            <summary>
            Aop接口，需要实现时继承
            </summary>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.Begin(CYQ.Data.Aop.AopEnum,CYQ.Data.Aop.AopInfo)">
            <summary>
            方法调用之前被调用
            </summary>
            <param name="action">方法名称</param>
            <param name="objName">表名/存储过程名/视图名/sql语句</param>
            <param name="result">方法中可能返回的参数</param>
            <param name="aopInfo">附带分支参数</param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.End(CYQ.Data.Aop.AopEnum,CYQ.Data.Aop.AopInfo)">
            <summary>
            方法调用之后被调用
            </summary>
            <param name="action">方法名称</param>
            <param name="success">调用是否成功</param>
            <param name="result">一般调用后的id[或MDataRow/MDataTable]</param>
            <param name="aopInfo">附带分支参数</param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.OnError(System.String)">
            <summary>
            数据库操作产生异常时,引发此方法
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.GetFromConfig">
            <summary>
            内部获取配置Aop，外部使用返回null即可。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.Clone">
            <summary>
            克隆返回一个新的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.OnLoad">
            <summary>
            Aop 首次加载时被触发的事件
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig">
            <summary>
            常用配置文件项[Web(App).Config]的[appSettings|connectionStrings]项和属性名一致。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetApp(System.String)">
            <summary>
            获取Web.config或App.config的值。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetApp(System.String,System.String)">
            <summary>
            获取Web.config或App.config的值（允许值不存在或为空时输出默认值）。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetAppInt(System.String,System.Int32)">
            <summary>
            获取Web.config或App.config的数字值（允许值不存在或为空时输出默认值）。
            </summary>
        </member>
        <member name="M:CYQ.Data.AppConfig.GetConn(System.String)">
            <summary>
            获取Web.config或App.config的connectionStrings节点的值。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Aop">
            <summary>
            CYQ.Data.Aop 插件配置项 示例配置：[ 完整类名,程序集(dll)名称]&lt;add key="Aop" value="Web.Aop.AopAction,Aop"/>
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.ThreadBreakPath">
            <summary>
            CYQ.Data.Tool.ThreadBreak 使用时，外置的文件配置相对路径（默认在环境变量Temp对应文件中）
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.XHtml">
            <summary>
            XHtml 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.CDataLeft">
            <summary>
            CYQ.Data.Xml.XHtmlHelper 中使用的 "&lt;![CDATA[" 项
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.CDataRight">
            <summary>
            CYQ.Data.Xml.XHtmlHelper 中使用的 "]]&gt;" 项
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.DtdUri">
            <summary>
            CYQ.Data.Xml.XHtmlHelper 中操作Html需要配置的DTD解析文档相对路径
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.Domain">
            <summary>
            CYQ.Data.Xml.MutilLanguage 语言切换设置时Cookie所需要的网站主域名[不带www]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.UseFileLoadXml">
            <summary>
            CYQ.Data.Xml.XHtmlHelper 操作Html时，配置此项使用File加载Xml[便可在IIS7以上非信任主机机制下使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.XHtml.SysLangKey">
            <summary>
            CYQ.Data.Xml.MutilLanguage 类的默认语言Key，默认值：Chinese
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.DB">
            <summary>
            DataBase 相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.LockOnDbExe">
            <summary>
            配置此项时，会对：插入/更新/删除的操作进行Lock[请适当使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.FilterSqlInjection">
            <summary>
            MAction所有操作中的where条件，默认有超强的过滤单词，来过滤Sql注入关键字。
            如果需要自定义关键字，可配置此项，如：“delete;from,truncate，其它单词”，分号表词组，需要同时包含两个词； 多个过滤词组以","逗号分隔
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.AutoID">
            <summary>
            CYQ.Data.MAction 操作 Oracle 时自增加int类型ID所需要配置的序列ID，Guid为ID则不用。
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.DB.SchemaMapPath">
            <summary>
            CYQ.Data.MAction 可将表架构映射到外部指定相对路径[外部存储,可避开数据库读取]
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConfig.Cache">
            <summary>
            缓存相关的配置
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.GCCollectTime">
            <summary>
            CYQ.Data.Cache.CacheManage 调用GC.Collect()方法的间隔时间[(默认180)分钟]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.DefaultCacheTime">
            <summary>
            CYQ.Data.Cache.CacheManage 默认缓存项的时间[分钟(默认30)]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.CacheClearWorkTime">
            <summary>
             CYQ.Data.Cache.CacheManage 内置线程-缓存的同步时间[(默认5)分钟同步一次]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.CacheClearCallCount">
            <summary>
             CYQ.Data.Cache.CacheManage 内置线程-调用次数：[N(默认4)分钟内调用次数少于指定值(默认2)，缓存即被清除]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Cache.CacheClearTime">
            <summary>
            CYQ.Data.Cache.CacheManage 内置线程-时间设置：[N(默认4)分钟内调用次数少于指定值(默认2)，缓存即被清除]
            </summary>
        </member>
        <member name="T:CYQ.Data.MProc">
            <summary>
            存储过程或SQL语句操作类
            </summary>
            <example><code>
            使用示例：
            实例化：  MProc proc = new MProc(ProcNames.GetList);
            添加参数：proc.Set(GetList.ID, 10);
            获取列表：MDataTable table = proc.ExeMDataTable();
            关闭链接：proc.Close();
            绑定控件：GridView1.DataSource = table;GridView1.DataBind();
            </code></example>
        </member>
        <member name="F:CYQ.Data.MProc._Conn">
            <summary>
            原始传进进来的链接。
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="procNameOrSql">存储过程名称,可通过枚举传入</param>
            <example><code>
                MProc action=new MProc(ProcNames.SelectAll);
            或  MProc action=new MProc("SelectAll");
            或多数据库方式：
            MAction action=new MAction(P_DataBaseNameEnum.SelectAll);
            说明：自动截取数据库链接[P_及Enum为前后缀],取到的数据库配置项为DataBaseNameConn
            U_为表 V_为视图 P_为存储过程
            </code></example>
        </member>
        <member name="M:CYQ.Data.MProc.#ctor(System.Object,System.String,System.Boolean[])">
            <summary>
            构造函数2
            </summary>
            <param name="procNameOrSql">存储过程名称,可通过枚举传入</param>
            <param name="conn">web.config下的connectionStrings的name配置项名称,或完整的链接字符串</param>
            <example><code>
                MProc action=new MProc(ProcNames.SelectAll,"CYQ");
            或  MProc action=new MProc(ProcNames.SelectAll,"server=.;database=CYQ;uid=sa;pwd=123456");
            </code></example>
        </member>
        <member name="M:CYQ.Data.MProc.ResetProc(System.Object,System.Boolean[])">
            <summary>
             表切存储过程,在操作完A存储过程后，如果需要操作B存储过程,不需要重新new一个MProc,可直接换用本函数切换
            用法参考MAction的ResetTable
            </summary>
            <param name="procNameOrSql">存储过程名或Sql语句</param>
            <param name="isClearParaAndisFixProc">允许多两个bool参数：1：是否清除参数；2：是否为存储过程</param>
        </member>
        <member name="M:CYQ.Data.MProc.ResetProc(System.Object)">
            <summary>
             表切存储过程,在操作完A存储过程后，如果需要操作B存储过程,不需要重新new一个MProc,可直接换用本函数切换
            用法参考MAction的ResetTable
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.ExeMDataTable(System.Object[])">
            <summary>
            返回MDataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MProc.ExeNonQuery(System.Object[])">
            <summary>
            返回受影响的行数[用于更新或删除]
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MProc.ExeScalar``1(System.Object[])">
            <summary>
            返回首行首列的单个值
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.Close">
            <summary>
            释放资源,等同于调用Dispose
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.Set(System.Object,System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="paraName">参数名称如["ID"或Users.ID]</param>
            <param name="value">参数值如"11"</param>
        </member>
        <member name="M:CYQ.Data.MProc.Set(System.Object,System.Object,System.Data.DbType)">
            <summary>
            设置存储过程参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetCustom(System.Object,CYQ.Data.DAL.ParaType)">
            <summary>
            设置特殊自定义参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetCustom(System.Object,CYQ.Data.DAL.ParaType,System.Object)">
            <summary>
            设置特殊自定义参数
            </summary>
            <param name="paraName">参数名称</param>
            <param name="paraType">参数类型</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:CYQ.Data.MProc.Clear">
            <summary>
            清除存储过程参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetNoAop">
            <summary>
            取消AOP
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.SetAop(CYQ.Data.Aop.IAop)">
            <summary>
            设置Aop对象。
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.BeginTransation">
            <summary>
            开启事务
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.EndTransation">
            <summary>
            提交结束事务[默认开启事务,直到调用Close/Disponse时才提交事务]
            如果需要提前结束事务,可调用此方法
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DebugInfo">
            <summary>
            调试信息[如需要查看所有执行的SQL语句,请设置配置文件OpenDebugInfo项为ture]
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.DalType">
            <summary>
            当前操作的数据库类型[Access/Mssql/Oracle/SQLite/MySql等]
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.TimeOut">
            <summary>
            命令超时设置[单位秒]
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.ReturnValue">
            <summary>
            存储过程的返回值
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.OutPutValue">
            <summary>
            存储过程的OutPut值
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCompatible">
            <summary>
            Sql语句多数据库兼容
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCompatible.Format(System.String,CYQ.Data.DAL.DalType)">
            <summary>
            同语句多数据库兼容处理
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopInfo">
            <summary>
            Aop参数信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.AopPara">
            <summary>
            AOP的自定义参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Row">
            <summary>
            数据行
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.Where">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.AutoSetValue">
            <summary>
            自动从Form表单提取值[插入或更新时使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.InsertOp">
            <summary>
            数据插入选项
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.PageIndex">
            <summary>
            分页起始页
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.PageSize">
            <summary>
            分页每页条数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.UpdateExpression">
            <summary>
            更新操作的附加表达式。
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.SelectColumns">
            <summary>
            指定的查询列
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.IsSuccess">
            <summary>
            Begin方法是否调用成功[在End中使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.RowCount">
            <summary>
            查询时返回的记录总数或ExeNonQuery的返回值
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.CustomDbPara">
            <summary>
            用户调用SetPara新增加的自定义参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.ProcName">
            <summary>
            存储过程名或SQL语句
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.IsProc">
            <summary>
            是否存储过程
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.DBParameters">
            <summary>
            命令参数
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopInfo.ExeResult">
            <summary>
            执行后返回的结果
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopCustomDbPara">
            <summary>
            设置自定义参数[使用MAction时，对Where条件进行的参数化传参使用]
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.ParaName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:CYQ.Data.Aop.AopCustomDbPara.ParaDbType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MCellValue">
            <summary>
            单元结构的值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellValue.State">
            <summary>
            状态改变:0;未改,1;进行赋值操作[但值相同],2:赋值,值不同改变了
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MCellStruct">
            <summary>
            单元结构属性
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.IsPrimaryKey">
            <summary>
            是否关键字
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.Description">
            <summary>
            字段描述
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.IsCanNull">
            <summary>
            是否允许为Null
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.IsAutoIncrement">
            <summary>
            是否自增加
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.SqlType">
            <summary>
            SqlDbType类型
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.MaxSize">
            <summary>
            最大字节
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.MCellStruct.ValueType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataCell">
            <summary>
            单元格
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.SetDefaultValueToValue">
            <summary>
            设置默认值。
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataCell.ToString">
            <summary>
            已被重载，默认返回Value值。
            </summary>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.IsNull">
            <summary>
            值是否为Null值[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.IsNullOrEmpty">
            <summary>
            值是否为Null或为空[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.ColumnName">
            <summary>
            列名[只读属性]
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataCell.Struct">
            <summary>
            单元格的结构
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.Rss">
            <summary>
            Rss操作类
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.Set(System.String,System.String,System.String)">
            <summary>
            设置网站标题
            </summary>
            <param name="title">网站名称</param>
            <param name="link">网址</param>
            <param name="description">网站描述</param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.SetImg(System.String,System.String,System.String)">
            <summary>
            设置图片（网站Logo）
            </summary>
            <param name="url">Logo网址</param>
            <param name="title">Logo标题</param>
            <param name="link">Logo点击时跳转链接</param>
        </member>
        <member name="M:CYQ.Data.Xml.Rss.AddItem(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            添加RSS项（文章）
            </summary>
            <param name="title">标题</param>
            <param name="link">链接</param>
            <param name="author">作者</param>
            <param name="pubDate">发布日期</param>
            <param name="description">内容或摘要</param>
        </member>
        <member name="P:CYQ.Data.Xml.Rss.Channel">
            <summary>
            RSS 频道（默认）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.Rss.OutXml">
            <summary>
            获取输出的RSS内容。
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssChannel">
            <summary>
            RSS 频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Title">
            <summary>
            定义频道的标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Link">
            <summary>
            定义指向频道的超链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Category">
            <summary>
            为 feed 定义所属的一个或多个种类
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Cloud">
            <summary>
            注册进程，以获得 feed 更新的立即通知
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Copyright">
            <summary>
            告知版权资料
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Docs">
            <summary>
            规定指向当前 RSS 文件所用格式说明的 URL
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Generator">
            <summary>
            规定指向当前 RSS 文件所用格式说明的 URL
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Language">
            <summary>
            规定编写 feed 所用的语言
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.LastBuildDate">
            <summary>
            定义 feed 内容的最后修改日期
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.ManagingEditor">
            <summary>
            定义 feed 内容编辑的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.PubDate">
            <summary>
            为 feed 的内容定义最后发布日期
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Rating">
            <summary>
            feed 的 PICS 级别
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.SkipDays">
            <summary>
            规定忽略 feed 更新的天
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.SkipHours">
            <summary>
            规定忽略 feed 更新的小时
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.TextInput">
            <summary>
            规定应当与 feed 一同显示的文本输入域
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Ttl">
            <summary>
            指定从 feed 源更新此 feed 之前，feed 可被缓存的分钟数
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.WebMaster">
            <summary>
            定义此 feed 的 web 管理员的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.RssImage">
            <summary>
            定义此 feed 的 图片Logo
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssChannel.Items">
            <summary>
            频道项
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssImage">
            <summary>
            图片项
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Url">
            <summary>
            图片地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Title">
            <summary>
            图片标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Link">
            <summary>
            提供图片的站点链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssImage.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssItem">
            <summary>
            RSS项
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Title">
            <summary>
            定义频道的标题
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Link">
            <summary>
            定义指向频道的超链接
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Description">
            <summary>
            描述频道
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Category">
            <summary>
            为 feed 定义所属的一个或多个种类
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Author">
            <summary>
            规定项目作者的电子邮件地址
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Comments">
            <summary>
            允许项目连接到有关此项目的注释（文件）
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Enclosure">
            <summary>
            允许将一个媒体文件导入一个项中
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Guid">
            <summary>
            为 项目定义一个唯一的标识符
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.PubDate">
             <summary>
            定义此项目的最后发布日期
             </summary>
        </member>
        <member name="P:CYQ.Data.Xml.RssItem.Source">
            <summary>
            为此项目指定一个第三方来源
            </summary>
        </member>
        <member name="T:CYQ.Data.Xml.RssItemName">
            <summary>
            RSS 项枚举
            </summary>
        </member>
        <member name="T:CYQ.Data.InsertOp">
            <summary>
            MAction的Insert方法的返回值选项
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.None">
            <summary>
            使用此项：插入数据后[MSSQL会返回ID,其它数据库则不会返回ID]
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.ID">
            <summary>
            使用此项：插入数据后会返回ID。
            </summary>
        </member>
        <member name="F:CYQ.Data.InsertOp.Fill">
            <summary>
            使用此项：插入数据后,会根据返回ID进行查询后填充数据行,[默认选项]
            </summary>
        </member>
        <member name="T:CYQ.Data.RowOp">
            <summary>
            MDataRow 与 JsonHelper 行数据的过滤选项
            </summary>
        </member>
        <member name="F:CYQ.Data.RowOp.None">
            <summary>
            未设置，输出所有，包括Null值的列
            </summary>
        </member>
        <member name="F:CYQ.Data.RowOp.All">
            <summary>
            输出所有，但不包括Null值的列
            </summary>
        </member>
        <member name="F:CYQ.Data.RowOp.Insert">
            <summary>
            输出具有插入状态的值
            </summary>
        </member>
        <member name="F:CYQ.Data.RowOp.Update">
            <summary>
            输出具有更新状态的值
            </summary>
        </member>
        <member name="T:CYQ.Data.AppConst">
            <summary>
            内部常量类
            </summary>
        </member>
        <member name="F:CYQ.Data.AppConst.InvalidFileNameChars">
            <summary>
            无效的文件路径字符
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlCreate">
            <summary>
            数据操作语句类
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreate._UpdateExpression">
            <summary>
            更新操作的附加表达式。
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.SqlCreate._SelectColumns">
            <summary>
            指定查询的列。
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetInsertSql">
            <summary>
            返回插入的字符串
            </summary>
            <returns>结果如:insert into tableName(ID,Name,Value) values(@ID,@Name,@Value)</returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlCreate.GetUpdateSql(System.Object)">
            <summary>
            返回不包括Where条件的字符串
            </summary>
            <returns>结果如:Update tableName set Name=@Name,Value=@Value</returns>
        </member>
        <member name="P:CYQ.Data.SQL.SqlCreate.AutoID">
            <summary>
            oracle序列名称
            </summary>
        </member>
        <member name="T:CYQ.Data.Extension.IField">
            <summary>
            实现此接口，来扩展自定义IField语法
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.Sql">
            <summary>
            内部的SQL语句
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.ColID">
            <summary>
            列序号[列的顺序]
            </summary>
        </member>
        <member name="P:CYQ.Data.Extension.IField.Name">
            <summary>
            列名或表名
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.ThreadBreak">
            <summary>
            在ASP.NET中使用多线程时，为了避开升级dll时产生多个线程互相影响，使用此类可以通过外置文件进行跳出。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.#ctor(System.String,System.Object)">
            <summary>
            提示：AppConfig中需要配置ThreadBreakPath项的路径
            </summary>
            <param name="threadName"></param>
            <param name="threadID"></param>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.NeedToBreak">
            <summary>
            是否需要退出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.ClearThreadBreak(System.String)">
            <summary>
            清除线程threadbreak文件。
            </summary>
            <param name="threadName">线程名称</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.ClearSchema">
            <summary>
            清除所有的表架构。
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.ThreadBreak.AddGlobalThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            添加全局线程[通常该线程是个死循环，定时处理事情]
            </summary>
            <param name="start"></param>
        </member>
        <member name="T:CYQ.Data.SQL.SchemaCreate">
            <summary>
            表结构类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SchemaCreate.FormatDefaultValue(CYQ.Data.DAL.DalType,System.Object,System.Int32,System.Data.SqlDbType)">
            <summary>
            将各数据库默认值格式化成标准值，将标准值还原成各数据库默认值
            </summary>
            <param name="flag">[0:转成标准值],[1:转成各数据库值],[2:转成各数据库值并补充字符串前后缀]</param>
            <param name="sqlDbType">该列的值</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SchemaCreate.GetSchemaKey(System.String,CYQ.Data.DAL.DbBase@)">
            <summary>
            缓存表架构Key
            </summary>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.ResetStaticVar">
            <summary>
            重置静态变量（每次批量更新后调用）
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._NeedToSaveState">
            <summary>
             是否需要更新：0未更新；1仅插入[往后面插数据]；2更新删除或插入[重新保存]
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction.lastWriteTimeUtc">
            <summary>
            最后的写入时间
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._FileFullName">
            <summary>
            包含路径的完整文件名称
            </summary>
        </member>
        <member name="F:CYQ.Data.NoSqlAction._FileName">
            <summary>
            不包含路径的文件名称(带扩展名)
            </summary>
        </member>
        <member name="M:CYQ.Data.NoSqlAction.CheckFileChanged(System.Boolean)">
            <summary>
            检测文件是否已被修改过
            </summary>
            <param name="isNeedToReloadTable"></param>
        </member>
        <member name="P:CYQ.Data.NoSqlAction.NextID">
            <summary>
            下一个自增加ID
            </summary>
        </member>
        <member name="T:CYQ.Data.Tool.FastToT`1">
            <summary>
            快速转换类[数据量越大[500条起],性能越高]
            </summary>
        </member>
        <member name="M:CYQ.Data.Tool.FastToT`1.Create(CYQ.Data.Table.MDataTable)">
            <summary>
            构建一个ORM实体转换器
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <param name="schema">表数据架构</param>
        </member>
        <member name="T:CYQ.Data.Table.MDataRowCollection">
            <summary>
            行集合
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRowCollection.Add(CYQ.Data.Table.MDataRow,System.Boolean)">
            <summary>
            添加行
            </summary>
            <param name="item">行</param>
            <param name="resetState">重置状态,[默认true]，重置后的行数据不参与MDataTable的批量更新操作,状态在重新赋值时改变。</param>
        </member>
        <member name="P:CYQ.Data.DAL.OracleDal.IsUseOdpNet">
            <summary>
            是否使用Oracle的ODP.NET组件。
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SqlFormat">
            <summary>
            Sql 语句格式化类 (类似助手工具)
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.Keyword(System.String,CYQ.Data.DAL.DalType)">
            <summary>
            Sql关键字处理
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.NotKeyword(System.String)">
            <summary>
            去除关键字符号
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.Compatible(System.Object,CYQ.Data.DAL.DalType,System.Boolean)">
            <summary>
            Sql数据库兼容和Sql注入处理
            </summary>
            <param name="filter">过滤入侵型SQL特殊字符</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.SqlFormat.GetIFieldSql(System.Object)">
            <summary>
            静态的对IField接口处理
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopEnum">
            <summary>
            框架内部数据库操作方法枚举
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Select">
            <summary>
            查询多条记录方法 [参数为顺序为：Aop.AopEnum.Fill, out result, _TableName, aop_where, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Insert">
            <summary>
            插入方法 [参数为顺序为：Aop.AopEnum.Insert, out result, _TableName, aop_Row, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Update">
            <summary>
            更新方法  [参数为顺序为：Aop.AopEnum.Update, out result, _TableName, aop_Row, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Delete">
            <summary>
            删除方法  [参数为顺序为：Aop.AopEnum.Fill, out result, _TableName,aop_Row,aop_where, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Fill">
            <summary>
            查询一条记录方法 [参数为顺序为：Aop.AopEnum.Fill, out result, _TableName, aop_where, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.GetCount">
            <summary>
            取记录总数 [参数为顺序为：Aop.AopEnum.GetCount, out result, _TableName, aop_where, aop_otherInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.ExeMDataTable">
            <summary>
            MProc查询返回MDataTable方法 [参数为顺序为：AopEnum.ExeMDataTable, out result, procName, isProc, DbParameterCollection, aopInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.ExeNonQuery">
            <summary>
            MProc执行返回受影响行数方法 [参数为顺序为：AopEnum.ExeNonQuery, out result, procName, isProc, DbParameterCollection, aopInfo]
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.ExeScalar">
            <summary>
            MProc执行返回首行首列方法 [参数为顺序为：AopEnum.ExeScalar, out result, procName, isProc, DbParameterCollection, aopInfo]
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopResult">
            <summary>
            Aop函数的处理结果
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Default">
            <summary>
            本结果将执行原有事件，但跳过Aop.End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Continue">
            <summary>
            本结果将继续执行原有事件和Aop.End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Break">
            <summary>
            本结果将跳过原有事件,但会执行Aop End事件
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopResult.Return">
            <summary>
            本结果将直接跳出原有函数的执行
            </summary>
        </member>
        <member name="T:CYQ.Data.MAction">
            <summary>
            数据操作类[可操作单表/视图]
            </summary>
        </member>
        <member name="F:CYQ.Data.MAction._SourceTableName">
            <summary>
            原始传进来的表名/视图名，未经过[多数据库转换处理]格式化。
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetIdentityInsertOn">
            <summary>
            MSSQL插入标识ID时开启此选项[事务开启时有效]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetIdentityInsertOff">
            <summary>
            MSSQL插入标识ID后关闭此选项[事务开启时有效]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tableNamesEnum">表名/视图名称</param>
            <example><code>
                MAction action=new MAction(TableNames.Users);
            或  MAction action=new MAction("Users");
            或  MAction action=new MAction("(select m.*,u.UserName from Users u left join Message m on u.ID=m.UserID) v");
            或  MAction action=new MAction(ViewNames.Users);//传视图
            或多数据库方式：
            MAction action=new MAction(U_DataBaseNameEnum.Users);
            说明：自动截取数据库链接[U_及Enum为前后缀],取到的数据库配置项为DataBaseNameConn
            U_为表 V_为视图 P_为存储过程
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.#ctor(System.Object,System.String)">
            <summary>
            构造函数2
            </summary>
            <param name="tableNamesEnum">表名/视图名称</param>
            <param name="conn">web.config下的connectionStrings的name配置项名称,或完整的链接字符串</param>
            <example><code>
                MAction action=new MAction(TableNames.Users,"Conn");
            或  MAction action=new MAction(TableNames.Users,"server=.;database=CYQ;uid=sa;pwd=123456");
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object)">
            <summary>
            表切换,在A表时，如果需要操作B,不需要重新new一个MAaction,可直接换用本函数切换
            </summary>
            <param name="tableObj">要切换的表/视图名</param>
            <example><code>
                using(MAction action = new MAction(TableNames.Users))
                {
                    if (action.Fill("UserName='路过秋天'"))
                    {
                        int id = action.Get&lt;int&gt;(Users.ID);
                        if (action.ResetTable(TableNames.Message))
                        {
                             //other logic...
                        }
                    }
                }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object,System.Boolean)">
            <summary>
            表切换
            </summary>
            <param name="tableObj">要切换的表/视图名</param>
            <param name="resetState">是否重置原有的数据状态（默认true)</param>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object,System.String)">
            <summary>
            表切换
            </summary>
            <param name="tableObj">要切换的表/视图名</param>
            <param name="newConn">新的数据库链接</param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert">
            <summary>
             插入数据
            </summary>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.Set(Users.UserName,"路过秋天");
                action.Insert();
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(CYQ.Data.InsertOp,System.Object[])">
            <summary>
            插入数据
            </summary>
            <param name="option">插入选项</param>
            <param name="aopPara">可选aop参数，若无，忽略此参数</param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(System.Boolean,System.Object[])">
            <summary>
             插入数据
            </summary>
            <param name="autoSetValue">自动从控制获取值</param>
            <param name="aopPara">可选aop参数，若无，忽略此参数</param>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(System.Boolean,CYQ.Data.InsertOp,System.Object[])">
            <summary>
            插入数据
            </summary>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix方法设置控件前缀]</param>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.SetAutoPrefix("txt","ddl");
                action.Insert(true);
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Object,System.Boolean,System.Object[])">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.SetAutoPrefix("txt","ddl");
                action.Update("name='路过秋天'",true);
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Boolean,System.Object[])">
            <summary>
             更新数据
            </summary>
            <param name="autoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix或SetAutoParentControl方法设置控件前缀]</param>
        </member>
        <member name="M:CYQ.Data.MAction.Update">
            <summary>
             更新数据[默认ID必须有值]
            </summary>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.Set(Users.UserName,"路过秋天");
                action.Set(Users.ID,1);
                action.Update();
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Object)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                action.Set(Users.UserName,"路过秋天");
                action.Update("id=1");
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Delete">
            <summary>
             删除数据[默认ID必须有值]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Delete(System.Object,System.Object[])">
            <summary>
             删除数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.MAction.Select">
            <summary>
            选择所有数据
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Object)">
            <summary>
            根据条件查询所有数据
            </summary>
            <param name="where">where条件如:id>1</param>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Int32,System.Int32,System.Object,System.Int32@,System.Object[])">
            <summary>
            带分布功能的选择[多条件查询,选择所有时只需把PageIndex/PageSize设置为0]
            </summary>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每页数量[为0时默认选择所有]</param>
            <param name="where"> 查询条件[可附带 order by 语句]</param>
            <param name="rowCount">返回的记录总数</param>
            <param name="aopPara">aop参数</param>
        </member>
        <member name="M:CYQ.Data.MAction.Fill(System.Object,System.Object[])">
            <summary>
            填充自身[即单行选择]
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <example><code>
            using(MAction action=new MAction(TableNames.Users))
            {
                if(action.Fill("name='路过秋天'")) //或者action.Fill(888) 或者 action.Fill(id=888)
                {
                    action.SetTo(labUserName);
                }
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.GetCount(System.Object,System.Object[])">
            <summary>
            返回记录总数
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="aopPara">可选的Aop参数</param>
        </member>
        <member name="M:CYQ.Data.MAction.Exists(System.Object,System.Object[])">
            <summary>
            是否存在指定条件的数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="aopPara">可选的Aop参数</param>
        </member>
        <member name="M:CYQ.Data.MAction.Close">
            <summary>
            释放资源,等同于调用Disponse
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetToAll(System.Object[])">
            <summary>
            为页面中的所有控件自动赋值，示例：先 SetAutoPrefix("txt","ddl")，再 SetToAll(this)。
            </summary>
            <param name="parentControls">父控件列表（系统自动遍历父控件下的子控件进行赋值）</param>
            <example><code>
            action.SetAutoPrefix("txt","ddl");//设置控件的前缀
            action.SetToAll(this);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.SetTo(System.Object,System.Object,System.Boolean)">
            <summary>
            将值设置到控件中
            </summary>
            <param name="control">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <param name="value">自定义值,若此值存在，则不从控件中获取值</param>
            <param name="isControlEnabled">控件是否可用</param>
            <example><code>
            示例1：action.SetTo(txtUserName,"路过秋天",true);//等同于：txtUserName.Text="路过秋天";txtUserName.IsEnabled=true;
            示例2：action.SetTo(txtUserName,null,false);//同于：txtUserName.Text=action.Get&lt;string&gt;(Users.UserName);txtUserName.IsEnabled=false;
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.SetTo(System.Object,System.Object)">
            <summary>
            将值设置到控件中
            </summary>
            <param name="control">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <param name="value">自定义值,若此值存在，则不从控件中获取值</param>
            <example><code>
            示例1：action.SetTo(txtUserName,"路过秋天",true);//等同于：txtUserName.Text="路过秋天";
            示例2：action.SetTo(txtUserName,null);//同于：txtUserName.Text=action.Get&lt;string&gt;(Users.UserName);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.SetTo(System.Object)">
            <summary>
            将值设置到控件中
            </summary>
            <param name="control">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <example><code>
            示例：action.SetTo(txtUserName);//同于：txtUserName.Text=action.Get&lt;string&gt;(Users.UserName);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.GetFrom(System.Object,System.Object)">
            <summary>
            将控件的值设置到实体中[默认从控件中自动获取值]
            </summary>
            <param name="control">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <param name="value">自定义值,若此值存在，则不从控件中获取值</param>
            <example><code>
            示例1：action.GetFrom(txtUserName,"路过秋天");//将自定义值“路过秋天”赋给属性UserName
            示例2：action.GetFrom(txtUserName,null);//将txtUserName.Text的值赋给属性UserName
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.GetFrom(System.Object)">
            <summary>
            将控件的值设置到实体中[默认从控件中自动获取值]
            </summary>
            <param name="control">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <example><code>
            示例：action.GetFrom(txtUserName);//将txtUserName.Text的值赋给属性UserName
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.GetFromJson(System.String)">
            <summary>
            从Json字符串或包括json内容的文件中自动赋值,json如:{"Name":"cyqdata","Url":"www.cyqdata.com"}
            </summary>
            <param name="jsonOrFileName">json字符串或存json的文件</param>
        </member>
        <member name="M:CYQ.Data.MAction.Bind(System.Object)">
            <summary>
            绑定DrowDownList等列表控件（默认首列名称必须为“ID”）
            </summary>
            <param name="control">（下拉）列表控件</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MAction.Bind(System.Object,System.String)">
            <summary>
            绑定DrowDownList等列表控件（默认首列名称必须为“ID”）
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Bind(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            绑定下拉等列表,控件需要继承自：ListControl。
            </summary>
            <param name="control">DropDown/CheckBoxList/RadioButtonList等</param>
            <param name="where">对表的数据进行过滤如:"ID>15 and Url='cyqdata.com'"</param>
            <param name="text">绑定时显示的字段名[默认字段名取自控件的ID(去掉前三个字母前缀)]</param>
            <param name="value">绑定时显示字段对应的值[默认值的字段名为:ID]</param>
        </member>
        <member name="M:CYQ.Data.MAction.Get``1(System.Object)">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Get``1(System.Object,``0)">
            <summary>
            取值
            </summary>
            <param name="key">字段名</param>
            <param name="defaultValue">值为Null时的默认替换值</param>
        </member>
        <member name="M:CYQ.Data.MAction.Set(System.Object,System.Object)">
            <summary>
            设置值,例如:[action.Set(TableName.ID,10);]
            </summary>
            <param name="key">字段名称,可用枚举如:[TableName.ID]</param>
            <param name="value">要设置给字段的值</param>
            <example><code>
            set示例：action.Set(Users.UserName,"路过秋天");
            get示例：int id=action.Get&lt;int&gt;(Users.ID);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.SetExpression(System.String)">
            <summary>
            更新操作的自定义表达式设置。
            </summary>
            <param name="updateExpression">例如a字段值自加1："a=a+1"</param>
        </member>
        <member name="M:CYQ.Data.MAction.SetPara(System.Object,System.Object,System.Data.DbType)">
            <summary>
            参数化传参[当Where条件为参数化(如：name=@name)语句时使用]
            </summary>
            <param name="paraName">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
        </member>
        <member name="M:CYQ.Data.MAction.SetPara(System.Collections.Generic.List{CYQ.Data.Aop.AopCustomDbPara})">
            <summary>
            参数化传参[传进多个参数列表]
            </summary>
            <param name="customParas">Aop场景使用，传进多个参数。</param>
        </member>
        <member name="M:CYQ.Data.MAction.ClearPara">
            <summary>
            清除(SetPara设置的)自定义参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.ClearParameters">
            <summary>
            清除系统参数[保留自定义参数]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAutoPrefix(System.String,System.String[])">
            <summary>
            自动获取值前缀设置,可传多个前缀[至少1个]（web有效，winform请调用SetAutoParentControl）
            </summary>
            <param name="autoPrefix">第一个前缀[必须]</param>
            <param name="otherPrefix">后面N个前缀[可选]</param>
        </member>
        <member name="M:CYQ.Data.MAction.SetAutoParentControl(System.Object,System.Object[])">
            <summary>
            自动获取值父控件设置,可传多个父控件[至少1个]（winform有效，web请调用SetAutoPrefix）
            </summary>
            <param name="parent">第一个父控件名称[必须]</param>
            <param name="otherParent">后面N个[可选]</param>
        </member>
        <member name="M:CYQ.Data.MAction.SetSelectColumns(System.Object[])">
            <summary>
            本方法可以在单表使用时查询指定的列[设置后可使用Fill与Select方法]
            提示：分页查询时，排序条件的列必须指定选择。
            </summary>
            <param name="columnNames">可设置多个列名[调用Fill或Select后,本参数将被清除]</param>
        </member>
        <member name="M:CYQ.Data.MAction.SetTransLevel(System.Data.IsolationLevel)">
            <summary>
            设置事务级别
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:CYQ.Data.MAction.ReOpenTransation">
            <summary>
            重新开启事务[在调用EndTransation结束后可重新开启]
            提示：本方法已过时，请使用:BeginTransation方法
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.BeginTransation">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.EndTransation">
            <summary>
            提交结束事务[默认开启事务,直到调用Close/Disponse时才提交事务]
            如果需要提前结束事务,可调用此方法
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.RollBack">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="F:CYQ.Data.MAction._aopBak">
            <summary>
            临时备份Aop，用于切换后的还原。
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetNoAop">
            <summary>
            取消Aop，在Aop独立模块使用MAction时必须调用
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAop">
            <summary>
            恢复默认配置的Aop。
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAop(CYQ.Data.Aop.IAop)">
            <summary>
            主动设置注入新的Aop，一般情况下不需要用到。
            </summary>
            <param name="aop"></param>
        </member>
        <member name="M:CYQ.Data.MAction.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.Data">
            <summary>
            Fill完之后返回的行数据
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.TableName">
            <summary>
            当前操作的表名
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.ConnectionString">
            <summary>
            当前数据库链接字符串
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DebugInfo">
            <summary>
            调试信息[如需要查看所有执行的SQL语句,请设置配置文件OpenDebugInfo项为ture]
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DalType">
            <summary>
            当前操作的数据库类型[Access/Mssql/Oracle/SQLite/MySql/Txt/Xml等]
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.TimeOut">
            <summary>
            命令超时设置[单位秒]
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.AllowInsertID">
            <summary>
            对于Int型的，是否允许插入ID
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.Op">
            <summary>
            操作符号
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.None">
            <summary>
            没有操作
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Big">
            <summary>
            操作符号:">"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.BigEqual">
            <summary>
            操作符号:">="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Equal">
            <summary>
            操作符号:"="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.NotEqual">
            <summary>
            操作符号:"&lt;>"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Small">
            <summary>
            操作符号:"&lt;"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.SmallEqual">
            <summary>
            操作符号:"&lt;="
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.Like">
            <summary>
            操作符号:"like"
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.IsNull">
            <summary>
            是否Null值
            </summary>
        </member>
        <member name="F:CYQ.Data.Table.Op.IsNotNull">
            <summary>
            非Null值
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.Ao">
            <summary>
            查询的基本连接条件
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.TFilter">
            <summary>
            条件过滤参数
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTableFilter">
            <summary>
            MDataTable查询过滤器
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetTFilter(System.Object,CYQ.Data.Table.MDataColumn)">
            <summary>
            多个条件
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetSingleTFilter(System.String,CYQ.Data.Table.MDataColumn)">
            <summary>
            单个条件
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.GetTFilterOk(System.String,System.Int32,System.String,CYQ.Data.Table.Op,CYQ.Data.Table.MDataColumn,CYQ.Data.Table.TFilter@)">
            <summary>
            条件比较
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.CompareMore(CYQ.Data.Table.MDataRow,CYQ.Data.Table.TFilter[])">
            <summary>
            值比较
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.SplitWhereOrderby(System.String@,System.String@)">
            <summary>
            分隔where条件中order by 出来
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:CYQ.Data.Table.MDataTableFilter.FilterColumns(CYQ.Data.Table.MDataTable@,System.Object[])">
            <summary>
            只保留查询的列
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataTableFilter.Ops">
            <summary>
            SQL操作符号
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.Aop">
            <summary>
            内部预先实现空的Aop
            </summary>
        </member>
    </members>
</doc>
