<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClownFish</name>
    </assembly>
    <members>
        <member name="T:ClownFish.ParameterCache">
            <summary>
            用于缓存存储过程参数的工具类
            </summary>
        </member>
        <member name="M:ClownFish.ParameterCache.DiscoverSpParameters(System.Data.Common.DbConnection,System.String)">
            <summary>
            用指定的连接信息，获取一个存储过程的参数数组。
            </summary>
            <param name="dbConn">DbConnection对象</param>
            <param name="spName">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.ParameterCache.GetSpParameters(ClownFish.DbContext)">
            <summary>
            根据一个DbContext的连接信息，获取“当前命令”的存储过程参数数组
            </summary>
            <param name="dbContext">DbContext对象</param>
            <returns>获取“当前命令”的存储过程参数数组</returns>
        </member>
        <member name="M:ClownFish.ParameterCache.GetSpParameters(System.Data.Common.DbConnection,System.String)">
            <summary>
            根据一个数据库的连接，获取存储过程的参数数组
            </summary>
            <param name="dbConn">DbConnection对象</param>
            <param name="spName">存储过程名称</param>
            <returns>存储过程的参数数组</returns>
        </member>
        <member name="M:ClownFish.ParameterCache.GetCommandParameters(ClownFish.XmlCommand,System.Data.Common.DbCommand)">
            <summary>
            将XmlCommand对象中参数数组转换成与指定DbCommand兼容的命令参数数组。
            </summary>
            <param name="xmlCommand">XmlCommand对象</param>
            <param name="dbCommand">DbCommand对象</param>
            <returns>返回与指定DbCommand兼容的命令参数数组</returns>
        </member>
        <member name="T:ClownFish.DataRowAdapter">
            <summary>
            <para>对DataRow和DbDataReader的统一包装类。</para>
            <para>因为这二个类虽然都提供了“索引器”，但它们没有共同的基类或实现接口，所以通常只能写“二套代码”。</para>
            <para>使用这个DataRowAdapter，可以提供一致的“索引器”。</para>
            </summary>
        </member>
        <member name="M:ClownFish.DataRowAdapter.#ctor(System.Data.DataRow)">
            <summary>
            构造方法
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:ClownFish.DataRowAdapter.#ctor(System.Data.Common.DbDataReader)">
            <summary>
            构造方法
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:ClownFish.DataRowAdapter.SetCurrentRow(System.Object)">
            <summary>
            <para>设置当前数据行。</para>
            <para>对于DataTable执行foreach操作时，没有必要为每个DataRow创建一个DataRowAdapter对象，可以调用这个方法设置“当前行”</para>
            <para>如果是对于同一个DbDataReader，执行这个调用就没有意义了（可以不调用）。</para>
            </summary>
            <param name="row">参数的类型只能是：DataRow 或 DbDataReader，否则会抛出异常</param>
        </member>
        <member name="M:ClownFish.DataRowAdapter.GetColumnNames">
            <summary>
            获取当前数据行所属表的列名称
            </summary>
            <returns>数据行所属表的所有列名称</returns>
        </member>
        <member name="F:ClownFish.DataRowAdapter.UserData">
            <summary>
            用于保存额外的用户上下文数据
            </summary>
        </member>
        <member name="P:ClownFish.DataRowAdapter.Item(System.String)">
            <summary>
            用于从DataRow或DataReader中，根据字段名获取相应字段的值
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.DataRowAdapter.Item(System.Int32)">
            <summary>
            用于从DataRow或DataReader中，根据序号位置获取相应字段的值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.DataConverter">
            <summary>
            用于数据转换的工具类
            </summary>
        </member>
        <member name="M:ClownFish.DataConverter.ExcelToTable(System.String)">
            <summary>
            将Excel文件的第一个工作区导出成DataTable
            </summary>
            <param name="excelFilePath">Excel文件的全路径</param>
            <returns>结果数据表</returns>
        </member>
        <member name="M:ClownFish.DataConverter.ExcelToTable(System.String,System.Int32)">
            <summary>
            导出Excel文件中的数据
            </summary>
            <param name="excelFilePath">Excel文件的全路径</param>
            <param name="sheetIndex">要导出数据的工作区(sheet)索引，索引值从0开始，如果参数值为负数，则返回sheet定义结构</param>
            <returns>结果数据表</returns>
        </member>
        <member name="M:ClownFish.DataConverter.ExcelToTable(System.String,System.String)">
            <summary>
            导出Excel文件中的数据
            </summary>
            <param name="excelFilePath">Excel文件的全路径</param>
            <param name="sheetName">要导出数据的工作区名称，例如："Sheet1$"， "Sheet2$"</param>
            <returns>结果数据表</returns>
        </member>
        <member name="T:ClownFish.IGetValue">
            <summary>
            定义读属性操作的接口
            </summary>
        </member>
        <member name="T:ClownFish.ISetValue">
            <summary>
            定义写属性操作的接口
            </summary>
        </member>
        <member name="T:ClownFish.GetterSetterFactory">
            <summary>
            创建IGetValue或者ISetValue实例的工厂方法类
            </summary>
        </member>
        <member name="M:ClownFish.GetterSetterFactory.CreatePropertyGetterWrapper(System.Reflection.PropertyInfo)">
            <summary>
            根据指定的PropertyInfo对象，返回对应的IGetValue实例
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.GetterSetterFactory.CreatePropertySetterWrapper(System.Reflection.PropertyInfo)">
            <summary>
            根据指定的PropertyInfo对象，返回对应的ISetValue实例
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.PropertyExtensions">
            <summary>
            一些扩展方法，用于访问属性，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:ClownFish.PropertyExtensions.FastGetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            快速调用PropertyInfo的GetValue方法
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.PropertyExtensions.FastSetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            快速调用PropertyInfo的SetValue方法
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:ClownFish.XmlCommandManager">
            <summary>
            用于维护配置文件中数据库访问命令的管理类
            </summary>
        </member>
        <member name="M:ClownFish.XmlCommandManager.LoadCommnads(System.String)">
            <summary>
            <para>从指定的目录中加载全部的用于数据访问命令。</para>
            <para>说明：1. 这个方法只需要在程序初始化调用一次就够了。</para>
            <para>       2. 如果是一个ASP.NET程序，CommandManager还会负责监视此目录，如果文件有更新，会自动重新加载。</para>
            </summary>
            <param name="directoryPath">包含数据访问命令的目录。不加载子目录，仅加载扩展名为 .config 的文件。</param>
        </member>
        <member name="M:ClownFish.XmlCommandManager.GetCommand(System.String)">
            <summary>
            根据配置文件中的命令名获取对应的命令对象。
            </summary>
            <param name="name">命令名称，它应该能对应一个XmlCommand</param>
            <returns>如果找到符合名称的XmlCommand，则返回它，否则返回null</returns>
        </member>
        <member name="T:ClownFish.XmlCommand">
            <summary>
            表示一个XmlCommand对象。
            </summary>
        </member>
        <member name="F:ClownFish.XmlCommand.CommandName">
            <summary>
            命令的名字，这个名字将在CreateCommand时被使用。
            </summary>
        </member>
        <member name="F:ClownFish.XmlCommand.Database">
            <summary>
            指示CommandText中的语句相对于哪个数据库。【可以为空】，
            如果指定这个设置，将在执行语句前切换数据库。
            </summary>
        </member>
        <member name="F:ClownFish.XmlCommand.Parameters">
            <summary>
            命令所引用的所有参数集合
            </summary>
        </member>
        <member name="F:ClownFish.XmlCommand.CommandText">
            <summary>
            命令的文本。是一段可运行的SQL脚本。
            </summary>
        </member>
        <member name="F:ClownFish.XmlCommand.CommandType">
            <summary>
            CommandType
            </summary>
        </member>
        <member name="F:ClownFish.XmlCommand.Timeout">
            <summary>
            获取或设置在终止执行命令的尝试并生成错误之前的等待时间。 
            </summary>
        </member>
        <member name="T:ClownFish.XmlCmdParameter">
            <summary>
            XmlCommand的命令参数。
            </summary>
        </member>
        <member name="F:ClownFish.XmlCmdParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="F:ClownFish.XmlCmdParameter.Type">
            <summary>
            参数的数据类型
            </summary>
        </member>
        <member name="F:ClownFish.XmlCmdParameter.Size">
            <summary>
            参数值的长度。
            </summary>
        </member>
        <member name="F:ClownFish.XmlCmdParameter.Direction">
            <summary>
            参数的输入输出方向
            </summary>
        </member>
        <member name="T:ClownFish.CompileException">
            <summary>
            编译数据实体加载器代码时引发的异常类型
            </summary>
        </member>
        <member name="M:ClownFish.CompileException.GetDetailMessages">
            <summary>
            将Errors和Types的信息收集在一起，得到详细的错误消息。
            </summary>
            <returns>得到详细的错误消息</returns>
        </member>
        <member name="P:ClownFish.CompileException.Errors">
            <summary>
            编译器给出的错误消息集合
            </summary>
        </member>
        <member name="P:ClownFish.CompileException.Types">
            <summary>
            当前正在编译的类型
            </summary>
        </member>
        <member name="T:ClownFish.IDbContextHolder">
            <summary>
            一个包含DbContext成员的容器接口。
            </summary>
        </member>
        <member name="P:ClownFish.IDbContextHolder.DbContext">
            <summary>
            DbContext对象
            </summary>
        </member>
        <member name="T:ClownFish.DbContextHolderBase">
            <summary>
            一个实现IDbContextHolder接口的类型，可用于在数据访问层之上共享DbContext的数据库连接。
            </summary>
        </member>
        <member name="M:ClownFish.DbContextHolderBase.Dispose">
            <summary>
            Dispose方法
            </summary>
        </member>
        <member name="M:ClownFish.DbContextHolderBase.CreateDbContext(System.Boolean)">
            <summary>
            使用默认的连接字符串创建DbContext实例。
            </summary>
            <param name="supportTranscation"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.DbContextHolderBase.CreateHolder``1">
            <summary>
            创建一个IDbContextHolder实例，并设置它的DbContext为“当前实例的DbContext属性”
            </summary>
            <typeparam name="T">资源库类的类型</typeparam>
            <returns>IDbContextHolder实例</returns>
        </member>
        <member name="P:ClownFish.DbContextHolderBase.DbContext">
            <summary>
            DbContext对象
            </summary>
        </member>
        <member name="T:ClownFish.MyExtensions">
            <summary>
            一些常用的扩展方法
            </summary>
        </member>
        <member name="M:ClownFish.MyExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            从MemberInfo获取指定类型的Attribute
            </summary>
            <typeparam name="T">Attribute的派生类型</typeparam>
            <param name="m">要查找的MemberInfo对象</param>
            <returns>如果找到则返回，否则返回null</returns>
        </member>
        <member name="M:ClownFish.MyExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            从MemberInfo获取指定类型的Attribute数组
            </summary>
            <typeparam name="T">Attribute的派生类型</typeparam>
            <param name="m">要查找的MemberInfo对象</param>
            <returns>如果找到则返回，否则返回空数组。</returns>
        </member>
        <member name="M:ClownFish.MyExtensions.FindIndex(System.String[],System.String)">
            <summary>
            在一个字符串数组中查找指定的字符串所在的序号。
            </summary>
            <param name="array">一个字符串数组</param>
            <param name="value">要搜索的字符串</param>
            <returns>如果找到，则返回从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="M:ClownFish.MyExtensions.FindIndex(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            在一个字符串列表中查找指定的字符串所在的序号。
            </summary>
            <param name="list">一个字符串列表</param>
            <param name="value">要搜索的字符串</param>
            <returns>如果找到，则返回从零开始的索引；否则为 -1。</returns>
        </member>
        <member name="T:ClownFish.BuildExceptionHandler">
            <summary>
            编译数据实体加载器代码发生异常的事件委托
            </summary>
            <param name="ex">异常对象</param>
        </member>
        <member name="T:ClownFish.BuildManager">
            <summary>
            用于管理如何编译数据实体加载器的工具类
            </summary>
        </member>
        <member name="M:ClownFish.BuildManager.StartAutoCompile(System.Func{System.Boolean})">
            <summary>
            开始自动编译模式。在此模式下，ClownFish会统计没有编译的类型，并在符合条件下自动生成并编译它们。
            </summary>
            <param name="func">判断是否开始执行的委托。此委托会以5秒的频率被调用，如果返回true，则开始处理等待编译的类型。</param>
        </member>
        <member name="M:ClownFish.BuildManager.StartAutoCompile(System.Func{System.Boolean},System.Int32)">
            <summary>
            开始自动编译模式。在此模式下，ClownFish会统计没有编译的类型，并在符合条件下自动生成并编译它们。
            </summary>
            <param name="func">判断是否开始执行的委托。此委托会以指定的频率被调用，如果返回true，则开始处理等待编译的类型。</param>
            <param name="timerPeriod">定时器的执行频率，必须大于 3000 。单位：毫秒。</param>
        </member>
        <member name="M:ClownFish.BuildManager.CompileModelTypesSync(System.Type[],System.Boolean)">
            <summary>
            以同步的方式，为指定的数据实体类型生成并编译加载器代码。
            </summary>
            <param name="types">要处理的数据实体类型数组</param>
            <param name="throwOnFailure">当出现异常时，是否抛出。如果是false，会触发OnBuildException事件</param>
        </member>
        <member name="M:ClownFish.BuildManager.CompileModelTypesAsync(System.Type[])">
            <summary>
            以异步的方式，为指定的数据实体类型生成并编译加载器代码。
            </summary>
            <param name="types">要处理的数据实体类型数组</param>
        </member>
        <member name="M:ClownFish.BuildManager.FindModelTypesFromCurrentApplication(System.Func{System.Type,System.Boolean})">
            <summary>
            从当前程序已加载的程序集中查找数据实体类型。
            </summary>
            <param name="predicate">判断某个类型是否是数据实体的委托函数</param>
            <returns>符合判断委托的数据实体类型</returns>
        </member>
        <member name="M:ClownFish.BuildManager.FindModelTypes(System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])">
            <summary>
            从指定的程序集数组中查找数据实体类型。
            </summary>
            <param name="predicate">判断某个类型是否是数据实体的委托函数</param>
            <param name="assemblies">要查找的程序集数组</param>
            <returns>符合判断委托的数据实体类型</returns>
        </member>
        <member name="E:ClownFish.BuildManager.OnBuildException">
            <summary>
            在编译一批实体加载器的代码发生异常时的事件。
            </summary>
        </member>
        <member name="P:ClownFish.BuildManager.RequestCount">
            <summary>
            有多少次编译请求被提交
            </summary>
        </member>
        <member name="P:ClownFish.BuildManager.WaitTypesCount">
            <summary>
            等待编译的类型数量
            </summary>
        </member>
        <member name="T:ClownFish.XmlHelper">
            <summary>
            <para>支持XML序列化，反序列化的工具类。</para>
            <para>此处代码来源于博客【在.net中读写config文件的各种方法】的示例代码</para>
            <para>http://www.cnblogs.com/fish-li/archive/2011/12/18/2292037.html</para>
            </summary>
        </member>
        <member name="M:ClownFish.XmlHelper.XmlSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="encoding">编码方式</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <member name="M:ClownFish.XmlHelper.XmlSerializeToFile(System.Object,System.String,System.Text.Encoding)">
            <summary>
            将一个对象按XML序列化的方式写入到一个文件
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="path">保存文件路径</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:ClownFish.XmlHelper.XmlDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="s">包含对象的XML字符串</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ClownFish.XmlHelper.XmlDeserializeFromFile``1(System.String,System.Text.Encoding)">
            <summary>
            读入一个文件，并按XML的方式反序列化对象。
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="path">文件路径</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ClownFish.XmlHelper.XmlSerializerObject(System.Object)">
            <summary>
            将一个对象序列化为XML字符串。这个方法将不生成XML文档声明头。
            </summary>
            <param name="o">要序列化的对象</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <member name="F:ClownFish.RunTimeEnvironment.IsAspnetEnvironment">
            <summary>
            当前运行环境是否为测试环境（非ASP.NET环境）
            </summary>
        </member>
        <member name="M:ClownFish.ItemHelper.LoadItemFromRow(ClownFish.DataRowAdapter,System.Object)">
            <summary>
            尝试从一个DataRowAdapter中加载实休对象的成员（一次加载一行信息）
            </summary>
            <param name="row">DataRowAdapter对象</param>
            <param name="item">实休对象的实例</param>
        </member>
        <member name="T:ClownFish.Profiler">
            <summary>
            用于配合ClownFishProfilerLib使用的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Profiler.TryStartClownFishProfiler">
            <summary>
            <para>检查程序运行目录是否包含ClownFishProfilerLib.dll，</para>
            <para>如果存在，则调用ClownFishProfilerLib.dll中的SubscribeNotify()方法，</para>
            <para>如果不存在，则忽略。</para>
            <para>说明：这个方法是“安全”的，即使调用有异常，也不会抛出。</para>
            </summary>
            <returns>是否已成功调用。</returns>
        </member>
        <member name="P:ClownFish.Profiler.ApplicationName">
            <summary>
            当前应用程序名称，它将显示在ClownFishProfiler中，用于区别不同的程序产生的消息，默认值："MyWebSite"
            </summary>
        </member>
        <member name="T:ClownFish.StringExtensions">
            <summary>
            一些常用的字符串方法的扩展
            </summary>
        </member>
        <member name="M:ClownFish.StringExtensions.IgnoreCaseStartsWith(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用StartsWith
            </summary>
            <param name="str">源字符串</param>
            <param name="test">要测试的字符串</param>
            <returns>StartsWith的返回结果</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.IgnoreCaseEndsWith(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用EndsWith
            </summary>
            <param name="str">源字符串</param>
            <param name="test">要测试的字符串</param>
            <returns>EndsWith的返回结果</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.IgnoreCaseCompare(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用Compare
            </summary>
            <param name="str">源字符串</param>
            <param name="test">另一要比较的字符串</param>
            <returns>Compare的返回结果</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.IgnoreCaseIndexOf(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用IndexOf
            </summary>
            <param name="str">源字符串</param>
            <param name="test">另一要比较的字符串</param>
            <returns>IndexOf的返回结果</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.TryToInt(System.String,System.Int32)">
            <summary>
            尝试将一个字符串转换成一个整形数字
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defaultVal">默认值</param>
            <returns>转换后的数字</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.TryToInt(System.String)">
            <summary>
            尝试将一个字符串转换成一个整形数字
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>转换后的数字</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.TryToDecimal(System.String,System.Decimal)">
            <summary>
            尝试将一个字符串转换成一个金额数字
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defaultVal">默认值</param>
            <returns>转换后的数字</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.TryToDecimal(System.String)">
            <summary>
            尝试将一个字符串转换成一个金额数字
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>转换后的数字</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.TryToDateTime(System.String,System.DateTime)">
            <summary>
            尝试将一个字符串转换成一个DateTime
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defaultVal">默认值</param>
            <returns>转换后的DateTime</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.TryToDateTime(System.String)">
            <summary>
            尝试将一个字符串转换成一个DateTime
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>转换后的DateTime</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.GetMd5String(System.String,System.Text.Encoding)">
            <summary>
            计算一个字符串的MD5值。
            </summary>
            <param name="input">要计算的字符串</param>
            <param name="encoding">编码方式</param>
            <returns>MD5值</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.GetSha1String(System.String,System.Text.Encoding)">
            <summary>
            计算一个字符串的SHA1值。
            </summary>
            <param name="input">要计算的字符串</param>
            <param name="encoding">编码方式</param>
            <returns>SHA1值</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.IsGuid(System.String)">
            <summary>
            判断一个字符串是不是一个GUID的字符串
            </summary>
            <param name="str">要判断的字符串</param>
            <returns>是不是一个GUID的字符串</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.TryChangeType``1(System.String)">
            <summary>
            安全地调用ChangeType方法（Try ChangeType）
            </summary>
            <typeparam name="T">要转换后的类型</typeparam>
            <param name="str">将要转换的字符串</param>
            <returns>转换后的结果</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.ConvertString(System.String,System.Type)">
            <summary>
            （尝试）将一个字符串的内容转换成任意数据类型的值，如果无法转换失败，抛出异常
            </summary>
            <param name="str">一个字符串</param>
            <param name="conversionType">将要转换到的新类型</param>
            <returns>转换后的结果</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.HexToBin(System.String)">
            <summary>
            将一个十六进制的字符串转成byte[]
            </summary>
            <param name="hex">十六进制的字符串</param>
            <returns>转换后的byte[]</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.SplitString(System.String,System.Char,System.Char)">
            <summary>
            <para>拆分一个字符串行。如：a=1;b=2;c=3;d=4;</para>
            <para>此时可以调用: SplitString("a=1;b=2;c=3;d=4;", ';', '=');</para>
            <para>说明：对于空字符串，方法也会返回一个空的列表。</para>
            </summary>
            <param name="line">包含所有项目组成的字符串行</param>
            <param name="separator1">每个项目之间的分隔符</param>
            <param name="separator2">每个项目内的分隔符</param>
            <returns>拆分后的结果列表</returns>
        </member>
        <member name="M:ClownFish.StringExtensions.StringToIntList(System.String,System.Char)">
            <summary>
            <para>将一个字符串拆分成一个整数的列表。要求：字符串中每个整数由指定的分隔符区分开。</para>
            <para>若包含非数字内容或空白项，将会忽略。此方法始终会返回一个列表。</para>
            </summary>
            <param name="str">要拆分的字符串</param>
            <param name="flag">数字之间的分隔符</param>
            <returns>整数列表</returns>
        </member>
        <member name="T:ClownFish.DbColumnAttribute">
            <summary>
            用于标识实体的每个数据成员的一些加载信息
            </summary>
        </member>
        <member name="F:ClownFish.DbColumnAttribute.IsSubItem">
            <summary>
            指示是否是一个子实体对象
            </summary>
        </member>
        <member name="P:ClownFish.DbColumnAttribute.IgnoreLoad">
            <summary>
            <para>在加载数据时，不加载这个成员。</para>
            <para>注意：如果数据结果中不包含匹配的字段，对应的数据成员也不会被加载。</para>
            </summary>
        </member>
        <member name="P:ClownFish.DbColumnAttribute.Alias">
            <summary>
            数据库中对应的字段名，如不指定，则与成员的名称相同。
            </summary>
        </member>
        <member name="P:ClownFish.DbColumnAttribute.SubItemPrefix">
            <summary>
            <para>指示加载嵌套类型时，所有子类型的成员必须以什么字符串做为前缀。</para>
            <para>string.Empty or null 表示没有前缀。</para>
            <para>【*】 表示以【成员名字.】做为前缀</para>
            </summary>
        </member>
        <member name="T:ClownFish.CommandKind">
            <summary>
            表示要执行什么类型的命令
            </summary>
        </member>
        <member name="F:ClownFish.CommandKind.SpOrXml">
            <summary>
            表示要执行一个存储过程或者是一个XmlCommand
            </summary>
        </member>
        <member name="F:ClownFish.CommandKind.StoreProcedure">
            <summary>
            表示要执行一个存储过程
            </summary>
        </member>
        <member name="F:ClownFish.CommandKind.XmlCommand">
            <summary>
            表示要执行一个XmlCommand
            </summary>
        </member>
        <member name="F:ClownFish.CommandKind.SqlTextNoParams">
            <summary>
            表示要执行一条没有参数的SQL语句
            </summary>
        </member>
        <member name="F:ClownFish.CommandKind.SqlTextWithParams">
            <summary>
            表示要执行一条包含参数的SQL语句
            </summary>
        </member>
        <member name="T:ClownFish.DbHelper">
            <summary>
            用于简化DbContext调用的工具类
            </summary>
        </member>
        <member name="M:ClownFish.DbHelper.SetCommandParameters(ClownFish.DbContext,System.Object)">
            <summary>
            根据一个数据实体实例，自动设置DbContext的“当前命令”的参数
            </summary>
            <param name="dbContext">DbContext实例</param>
            <param name="inputParams">包含所有命令参数的数据对象</param>
        </member>
        <member name="M:ClownFish.DbHelper.RetrieveCommandOutputValues(ClownFish.DbContext)">
            <summary>
            获取所有存储过程返回值。
            </summary>
            <param name="dbContext">DbContext对象</param>
        </member>
        <member name="M:ClownFish.DbHelper.AddAndSetCommandParameters(ClownFish.DbContext,System.Object)">
            <summary>
            根据一个数据实体实例，添加并设置DbContext的“当前命令”的参数
            </summary>
            <param name="dbContext">DbContext实例</param>
            <param name="inputParams">包含所有命令参数的数据对象</param>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteNonQuery(System.String,System.Object)">
            <summary>
            执行一个ExecuteNonQuery()调用
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <returns>返回“受影响的记录数”。</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteNonQuery(System.String,System.Object,ClownFish.DbContext)">
            <summary>
            执行一个ExecuteNonQuery()调用
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>返回“受影响的记录数”。</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteNonQuery(System.String,System.Object,ClownFish.CommandKind)">
            <summary>
            执行一个ExecuteNonQuery()调用
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>返回“受影响的记录数”。</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteNonQuery(System.String,System.Object,ClownFish.DbContext,ClownFish.CommandKind)">
            <summary>
            执行一个ExecuteNonQuery()调用
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>返回“受影响的记录数”。</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteNonQuery(ClownFish.CPQuery)">
            <summary>
            执行一个ExecuteNonQuery()调用
            </summary>
            <param name="query">CPQuery实例</param>
            <returns>返回“受影响的记录数”。</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteNonQuery(ClownFish.CPQuery,ClownFish.DbContext)">
            <summary>
            执行一个ExecuteNonQuery()调用
            </summary>
            <param name="query">CPQuery实例</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>返回“受影响的记录数”。</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar(System.String,System.Object)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar(System.String,System.Object,ClownFish.DbContext)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar(System.String,System.Object,ClownFish.CommandKind)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar(System.String,System.Object,ClownFish.DbContext,ClownFish.CommandKind)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar(ClownFish.CPQuery)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <param name="query">CPQuery实例</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar(ClownFish.CPQuery,ClownFish.DbContext)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <param name="query">CPQuery实例</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ConvertScalarResult``1(System.Object)">
            <summary>
            转换ExecuteScalar结果到指定的数据类型
            </summary>
            <typeparam name="T">结果数据类型</typeparam>
            <param name="result">要转换的数据，它可以是null或者DBNull</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar``1(System.String,System.Object)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <typeparam name="T">结果数据类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar``1(System.String,System.Object,ClownFish.DbContext)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <typeparam name="T">结果数据类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar``1(System.String,System.Object,ClownFish.CommandKind)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <typeparam name="T">结果数据类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar``1(System.String,System.Object,ClownFish.DbContext,ClownFish.CommandKind)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <typeparam name="T">结果数据类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar``1(ClownFish.CPQuery)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <typeparam name="T">结果数据类型</typeparam>
            <param name="query">CPQuery实例</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.ExecuteScalar``1(ClownFish.CPQuery,ClownFish.DbContext)">
            <summary>
            执行一个ExecuteScalar()调用
            </summary>
            <typeparam name="T">结果数据类型</typeparam>
            <param name="query">CPQuery实例</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>数据库返回的结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.GetDataItem``1(System.String,System.Object)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <returns>将查询语句的结果转成指定的结果实体对象</returns>
        </member>
        <member name="M:ClownFish.DbHelper.GetDataItem``1(System.String,System.Object,ClownFish.DbContext)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>将查询语句的结果转成指定的结果实体对象</returns>
        </member>
        <member name="M:ClownFish.DbHelper.GetDataItem``1(System.String,System.Object,ClownFish.CommandKind)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>将查询语句的结果转成指定的结果实体对象</returns>
        </member>
        <member name="M:ClownFish.DbHelper.GetDataItem``1(System.String,System.Object,ClownFish.DbContext,ClownFish.CommandKind)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>将查询语句的结果转成指定的结果实体对象</returns>
        </member>
        <member name="M:ClownFish.DbHelper.GetDataItem``1(ClownFish.CPQuery)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="query">CPQuery实例</param>
            <returns>将查询语句的结果转成指定的结果实体对象</returns>
        </member>
        <member name="M:ClownFish.DbHelper.GetDataItem``1(ClownFish.CPQuery,ClownFish.DbContext)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="query">CPQuery实例</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>将查询语句的结果转成指定的结果实体对象</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillList``1(System.String,System.Object)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象列表
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillList``1(System.String,System.Object,ClownFish.DbContext)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象列表
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillList``1(System.String,System.Object,ClownFish.CommandKind)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象列表
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillList``1(System.String,System.Object,ClownFish.DbContext,ClownFish.CommandKind)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象列表
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillList``1(ClownFish.CPQuery)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象列表
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="query">CPQuery实例</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillList``1(ClownFish.CPQuery,ClownFish.DbContext)">
            <summary>
            执行一个查询，并将结果转换成一个业务实体对象列表
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="query">CPQuery实例</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillListPaged``1(System.String,ClownFish.PagingInfo)">
            <summary>
            <para> 执行一个查询，并将结果转换成一个业务实体对象的分页列表。</para>
            <para> 说明：最后的三个参数一定要是用于分页的参数，</para>
            <para> 且参数名为(前缀部分请自行添加)：in PageIndex int, in PageSize int, out TotalRecords int</para>
            <para> 注意：pageIndex从零开始计数。</para>
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillListPaged``1(System.String,ClownFish.PagingInfo,ClownFish.DbContext)">
            <summary>
            <para> 执行一个查询，并将结果转换成一个业务实体对象的分页列表。</para>
            <para> 说明：最后的三个参数一定要是用于分页的参数，</para>
            <para> 且参数名为(前缀部分请自行添加)：in PageIndex int, in PageSize int, out TotalRecords int</para>
            <para> 注意：pageIndex从零开始计数。</para>
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillListPaged``1(System.String,ClownFish.PagingInfo,ClownFish.CommandKind)">
            <summary>
            <para> 执行一个查询，并将结果转换成一个业务实体对象的分页列表。</para>
            <para> 说明：最后的三个参数一定要是用于分页的参数，</para>
            <para> 且参数名为(前缀部分请自行添加)：in PageIndex int, in PageSize int, out TotalRecords int</para>
            <para> 注意：pageIndex从零开始计数。</para>
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillListPaged``1(System.String,ClownFish.PagingInfo,ClownFish.DbContext,ClownFish.CommandKind)">
            <summary>
            <para> 执行一个查询，并将结果转换成一个业务实体对象的分页列表。</para>
            <para> 说明：最后的三个参数一定要是用于分页的参数，</para>
            <para> 且参数名为(前缀部分请自行添加)：in PageIndex int, in PageSize int, out TotalRecords int</para>
            <para> 注意：pageIndex从零开始计数。</para>
            </summary>
            <typeparam name="T">结果实体类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>将查询语句的结果转成指定的结果实体对象列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillScalarList``1(System.String,System.Object)">
            <summary>
            执行一个查询，并将结果转换成一个数值列表（只读取第一列）
            </summary>
            <typeparam name="T">数据值的类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <returns>将查询语句的结果转成指定的数值列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillScalarList``1(System.String,System.Object,ClownFish.DbContext)">
            <summary>
            执行一个查询，并将结果转换成一个数值列表（只读取第一列）
            </summary>
            <typeparam name="T">数据值的类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>将查询语句的结果转成指定的数值列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillScalarList``1(System.String,System.Object,ClownFish.CommandKind)">
            <summary>
            执行一个查询，并将结果转换成一个数值列表（只读取第一列）
            </summary>
            <typeparam name="T">数据值的类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>将查询语句的结果转成指定的数值列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillScalarList``1(System.String,System.Object,ClownFish.DbContext,ClownFish.CommandKind)">
            <summary>
            执行一个查询，并将结果转换成一个数值列表（只读取第一列）
            </summary>
            <typeparam name="T">数据值的类型</typeparam>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>将查询语句的结果转成指定的数值列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillScalarList``1(ClownFish.CPQuery)">
            <summary>
            执行一个查询，并将结果转换成一个数值列表（只读取第一列）
            </summary>
            <typeparam name="T">数据值的类型</typeparam>
            <param name="query">CPQuery实例</param>
            <returns>将查询语句的结果转成指定的数值列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillScalarList``1(ClownFish.CPQuery,ClownFish.DbContext)">
            <summary>
            执行一个查询，并将结果转换成一个数值列表（只读取第一列）
            </summary>
            <typeparam name="T">数据值的类型</typeparam>
            <param name="query">CPQuery实例</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>将查询语句的结果转成指定的数值列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.NewSequentialGuid">
            <summary>
            生成一个新的【有序GUID】。此方法的代码来源于网络。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.DbHelper.GetColumnNames(System.Data.Common.DbDataReader)">
            <summary>
            返回一个DbDataReader对象获取到的结果集的全部列名
            </summary>
            <param name="reader">DbDataReader实例</param>
            <returns>结果集的全部列名</returns>
        </member>
        <member name="M:ClownFish.DbHelper.GetColumnNames(System.Data.DataTable)">
            <summary>
            返回一个DataTable包含的全部列名
            </summary>
            <param name="table">DataTable实例</param>
            <returns>数据表的全部列名</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillListFromXmlFile``1(System.String)">
            <summary>
            从一个XML文件中加载实体列表。如果XML包含多个数据表，只加载第一个数据表的记录。
            </summary>
            <typeparam name="T">实体的类型</typeparam>
            <param name="xmlPath">要加载的xml文件路径</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillListFromTable``1(System.Data.DataTable)">
            <summary>
            从一个数据表中加载实体列表。
            </summary>
            <typeparam name="T">实体的类型</typeparam>
            <param name="table">要加载的数据表</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillDataTable(System.String,System.Object)">
            <summary>
            执行查询并将结果以DataTable的形式返回
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillDataTable(System.String,System.Object,ClownFish.DbContext)">
            <summary>
            执行查询并将结果以DataTable的形式返回
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillDataTable(System.String,System.Object,ClownFish.CommandKind)">
            <summary>
            执行查询并将结果以DataTable的形式返回
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillDataTable(System.String,System.Object,ClownFish.DbContext,ClownFish.CommandKind)">
            <summary>
            执行查询并将结果以DataTable的形式返回
            </summary>
            <param name="nameOrSql">存储过程名称或者XmlCommand名称，或者是一条SQL语句。</param>
            <param name="inputParams">包含所有命令参数对应的输入对象。如果没有参数，可为null</param>
            <param name="dbContext">DbContext实例。</param>
            <param name="cmdKind">指示nameOrSql参数所反映的命令种类</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillDataTable(ClownFish.CPQuery)">
            <summary>
            执行查询并将结果以DataTable的形式返回
            </summary>
            <param name="query">CPQuery实例</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbHelper.FillDataTable(ClownFish.CPQuery,ClownFish.DbContext)">
            <summary>
            执行查询并将结果以DataTable的形式返回
            </summary>
            <param name="query">CPQuery实例</param>
            <param name="dbContext">DbContext实例。</param>
            <returns>查询结果</returns>
        </member>
        <member name="P:ClownFish.DbHelper.CreateDefaultDbContext">
            <summary>
            <para>创建默认DbContext实例的方法。</para>
            <para>用于在调用DbHelper的某些重载方法时没有传入DbContext对象。</para>
            <para>默认实现方式是：根据第一个注册连接信息创建一个不使用事务的DbContext实例。</para>
            <para>此委托类型的输入参数是在即将要执行的SQL语句、XmlCommand名称或者存储过程名称</para>
            </summary>
        </member>
        <member name="P:ClownFish.DbHelper.DefaultCommandKind">
            <summary>
            用于在调用DbHelper的某些重载方法时没有传入CommandKind参数而给出的默认值。
            </summary>
        </member>
        <member name="T:ClownFish.MyCDATA">
            <summary>
            支持CDATA序列化的包装类
            </summary>
        </member>
        <member name="M:ClownFish.MyCDATA.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ClownFish.MyCDATA.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">初始值</param>
        </member>
        <member name="M:ClownFish.MyCDATA.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.MyCDATA.op_Implicit(System.String)~ClownFish.MyCDATA">
            <summary>
            重载操作符，支持隐式类型转换。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.MyCDATA.op_Implicit(ClownFish.MyCDATA)~System.String">
            <summary>
            重载操作符，支持隐式类型转换。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.MyCDATA.Value">
            <summary>
            原始值。
            </summary>
        </member>
        <member name="T:ClownFish.SqlServerHelper">
            <summary>
            SQL SERVER操作的专用工具类。
            </summary>
        </member>
        <member name="M:ClownFish.SqlServerHelper.ExecuteTsqlScript(System.Data.SqlClient.SqlConnection,System.String,System.Action{System.String})">
            <summary>
            运行一段 SQL Server T-SQL脚本（不使用ADO.NET的事务）
            </summary>
            <param name="connection">SqlConnection对象</param>
            <param name="SqlText">SQL Server T-SQL脚本</param>
            <param name="execNotify">在运行每个语句前的回调通知委托。</param>
        </member>
        <member name="M:ClownFish.PrivateExtensions.IsDataItemType(System.Type)">
            <summary>
            检查一个类型是否是一个“普通”的实体类
            【警告】这个方法不检查参数是否为 null 。
            </summary>
            <param name="itemType">要检查的类型</param>
            <returns>yes or no</returns>
        </member>
        <member name="M:ClownFish.PrivateExtensions.EnsureIsDataItemType(System.Type)">
            <summary>
            确认类型是一个数据实体类型，否则会抛出异常。
            </summary>
            <param name="itemType">要检查的类型</param>
        </member>
        <member name="M:ClownFish.PrivateExtensions.GetRealType(System.Type)">
            <summary>
            返回一个类型的真实的类型，用于获取【可空类型】的参数类型。
            </summary>
            <param name="testType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.PrivateExtensions.IsEnumerableType(System.Type)">
            <summary>
            测试一个类型是不是可枚举类型，但不包括 string, byte[] 类型
            </summary>
            <param name="testType"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.DbContext">
            <summary>
            对 Connection, Transaction, Command 的包装类，支持多种数据库类型，如：MySql, MsSql, Access等等。
            </summary>
        </member>
        <member name="F:ClownFish.DbContext.STR_PageIndex">
            <summary>
            字符串: "PageIndex"
            </summary>
        </member>
        <member name="F:ClownFish.DbContext.STR_PageSize">
            <summary>
            字符串: "PageSize"
            </summary>
        </member>
        <member name="F:ClownFish.DbContext.STR_TotalRecords">
            <summary>
            字符串: "TotalRecords"
            </summary>
        </member>
        <member name="F:ClownFish.DbContext.s_firstConfigName">
            <summary>
            第一个连接配置项的名称（做为默认值）
            </summary>
        </member>
        <member name="F:ClownFish.DbContext._occurExecption">
            <summary>
            是否发生了异常
            </summary>
        </member>
        <member name="M:ClownFish.DbContext.RegisterDbConnectionInfo(System.String,System.String,System.String,System.String)">
            <summary>
            <para>注册数据库的连接信息。</para>
            <para>如果程序要访问二种不同类型的数据库，如：SQLSERVER和MySql，那么至少需要调用本方法二次。</para>
            <para>每种类型的数据库如果有多个“数据库的连接”，可以在构造方法中指定。这里的连接字符串只是做为默认的连接字符串</para>
            </summary>
            <param name="configName">配置名称：不同种类的数据库的配置名称，如：MSSQL, MySql。这个参数用于后续调用时传入构造方法中</param>
            <param name="providerName">数据提供者名称</param>
            <param name="cmdParamNamePrefix">命名参数的名称前缀。</param>
            <param name="defaultConnString">默认的连接字符串</param>
        </member>
        <member name="M:ClownFish.DbContext.RegisterDbConnectionInfo(System.String,System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            <para>注册数据库的连接信息。</para>
            <para>如果程序要访问二种不同类型的数据库，如：SQLSERVER和MySql，那么至少需要调用本方法二次。</para>
            <para>每种类型的数据库如果有多个“数据库的连接”，可以在构造方法中指定。这里的连接字符串只是做为默认的连接字符串</para>
            </summary>
            <param name="configName">配置名称：不同种类的数据库的配置名称，如：MSSQL, MySql。这个参数用于后续调用时传入构造方法中</param>
            <param name="providerName">数据提供者名称</param>
            <param name="cmdParamNamePrefix">命名参数的名称前缀。</param>
            <param name="obtainFunc">获取连接字符串的委托，仅当在不指定连接字符串时使用</param>
        </member>
        <member name="M:ClownFish.DbContext.#ctor(System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="useTransaction">是否使用事务</param>
        </member>
        <member name="M:ClownFish.DbContext.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="configName">调用RegisterDataBaseConnectionInfo()时指定的配置名称</param>
        </member>
        <member name="M:ClownFish.DbContext.#ctor(System.String,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="configName">调用RegisterDataBaseConnectionInfo()时指定的配置名称</param>
            <param name="useTransaction">是否使用事务</param>
        </member>
        <member name="M:ClownFish.DbContext.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            构造方法，可以指定连接哪种数据库，以及连接字符串和是否使用事务。
            </summary>
            <param name="configName">调用RegisterDataBaseConnectionInfo()时指定的配置名称</param>
            <param name="connectionString">连接字符串，如果为空，则使用默认的连接字符串</param>
            <param name="useTransaction">是否使用事务</param>
        </member>
        <member name="M:ClownFish.DbContext.CreateCommand(System.String,System.Data.CommandType)">
            <summary>
            根据【存储过程名称或SQL语句】，在当前连接上下文中创建命令对象
            </summary>
            <param name="sqlOrName">存储过程名称或者SQL语句</param>
            <param name="commandType">命令类型</param>
            <returns>创建的命令对象</returns>
        </member>
        <member name="M:ClownFish.DbContext.CreateXmlCommand(System.String)">
            <summary>
            根据配置文件中【命令名】，在当前连接上下文中创建命令对象
            </summary>
            <param name="commandName">XmlCommand的名字</param>
            <returns>创建的命令对象</returns>
        </member>
        <member name="M:ClownFish.DbContext.CreateCommand(ClownFish.CPQuery)">
            <summary>
            根据CPQuery对象为当前实例创建DbCommand对象
            </summary>
            <param name="query">query对象</param>
            <returns>已创建的DbCommand对象</returns>
        </member>
        <member name="M:ClownFish.DbContext.CommitTransaction">
            <summary>
            提交当前事务。如果没有事务，将会引发异常。
            </summary>
        </member>
        <member name="M:ClownFish.DbContext.CloseConnection">
            <summary>
            关闭并释放连接（将不能再访问连接）
            </summary>
        </member>
        <member name="M:ClownFish.DbContext.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:ClownFish.DbContext.Dispose">
            <summary>
            清除对象，关闭并释放连接
            </summary>
        </member>
        <member name="M:ClownFish.DbContext.EnsureConnectionNotNull">
            <summary>
            确认连接对象存在。
            </summary>
        </member>
        <member name="M:ClownFish.DbContext.EnsureCommandNotNull">
            <summary>
            确认命令对象不为空。
            </summary>
        </member>
        <member name="M:ClownFish.DbContext.EnsureTranscationExist">
            <summary>
            确认本次连接已经打开了事务
            </summary>
        </member>
        <member name="M:ClownFish.DbContext.AddParameterWithValue(System.String,System.Object)">
            <summary>
            往当前命令中添加一个命令参数
            </summary>
            <param name="paraName">参数名（不包含参数名前缀）</param>
            <param name="paraValue">参数值</param>
        </member>
        <member name="M:ClownFish.DbContext.AddParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            往当前命令中添加一个命令参数
            </summary>
            <param name="paraName">参数名（不包含参数名前缀）</param>
            <param name="paraValue">参数值</param>
            <param name="paraType">参数类型</param>
            <returns>新增后的命令参数对象</returns>
        </member>
        <member name="M:ClownFish.DbContext.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            往当前命令中添加一个命令参数
            </summary>
            <param name="paraName">参数名（不包含参数名前缀）</param>
            <param name="paraValue">参数值</param>
            <param name="paraType">参数类型</param>
            <param name="size">参数值的数据长度</param>
            <returns>新增后的命令参数对象</returns>
        </member>
        <member name="M:ClownFish.DbContext.AddParameter(System.String,System.Object,System.Data.DbType,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            往当前命令中添加一个命令参数
            </summary>
            <param name="paraName">参数名（不包含参数名前缀）</param>
            <param name="paraValue">参数值</param>
            <param name="paraType">参数类型</param>
            <param name="size">参数值的数据长度</param>
            <param name="inout">输入，输出类型</param>
            <returns>新增后的命令参数对象</returns>
        </member>
        <member name="M:ClownFish.DbContext.GetCommandParameter(System.String)">
            <summary>
            <para>在一个命令的参数集合中，根据（实体对象的属性）名称，获取对应的命令参数。</para>
            <para>注意：此方法在查找时，已补入“命令前缀”部分。</para>
            </summary>
            <param name="parameterName">参数名</param>
            <returns>存在的参数对象，如果没有找到，返回null</returns>
        </member>
        <member name="M:ClownFish.DbContext.ExecuteNonQuery">
            <summary>
            执行一个简单的操作，直接调用DbCommand.ExecuteNonQuery()
            </summary>
            <returns>命令所影响的行数</returns>
        </member>
        <member name="M:ClownFish.DbContext.ExecuteScalar">
            <summary>
            执行一个简单的操作，直接调用DbCommand.ExecuteScalar()
            </summary>
            <returns>执行结果</returns>
        </member>
        <member name="M:ClownFish.DbContext.FillScalarList``1">
            <summary>
            执行查询，将结果集的第一列以一个List&lt;T&gt;的形式返回
            </summary>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbContext.FillDataTable">
            <summary>
            执行select命令并返回结果到一个DataTalbe
            </summary>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbContext.FillDataSet(System.String[])">
            <summary>
            执行当前命令并返回多个DataTalbe保存到一个DataSet
            </summary>
            <param name="tableNames">结果表的表名称</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbContext.FillDataSet">
            <summary>
            执行当前命令并返回多个DataTalbe保存到一个DataSet
            </summary>
            <returns>查询结果</returns>
        </member>
        <member name="M:ClownFish.DbContext.FillList``1">
            <summary>
            执行当前命令并返回一个泛型的List
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <returns>查询结果对应的泛型的List</returns>
        </member>
        <member name="M:ClownFish.DbContext.GetDataItem``1">
            <summary>
            执行当前命令，获取一个业务实体对象
            </summary>
            <typeparam name="T">数据实体类型</typeparam>
            <returns>数据实体类型</returns>
        </member>
        <member name="M:ClownFish.DbContext.CreateHolder``1">
            <summary>
            创建一个IDbContextHolder实例，并设置它的DbContext为“当前对象”
            </summary>
            <typeparam name="T">资源库类的类型</typeparam>
            <returns>IDbContextHolder实例</returns>
        </member>
        <member name="P:ClownFish.DbContext.Connection">
            <summary>
            当前连接对象
            </summary>
        </member>
        <member name="P:ClownFish.DbContext.Transaction">
            <summary>
            当前事务对象
            </summary>
        </member>
        <member name="P:ClownFish.DbContext.CurrentCommand">
            <summary>
            当前的命令对象，每当执行数据库的操作时，都会在这个对象上执行。
            </summary>
        </member>
        <member name="P:ClownFish.DbContext.KeepConnectionOnException">
            <summary>
            在异常发生时，不关闭连接，也不回滚事务。默认值：false
            </summary>
        </member>
        <member name="P:ClownFish.DbContext.Tag">
            <summary>
            附加的属性，用于在监测时可以保存一些额外的信息。
            </summary>
        </member>
        <member name="P:ClownFish.DbContext.ParamNamePrefix">
            <summary>
            命令参数的前缀。如: @
            </summary>
        </member>
        <member name="P:ClownFish.DbContext.AutoRetrieveOutputValues">
            <summary>
            对于当前实例，是否要在调用存储过程完成后，自动获取输出的参数值。默认值：false
            </summary>
        </member>
        <member name="P:ClownFish.DbContext.CurrentXmlCommand">
            <summary>
            <para>如果当前命令是一个XmlCommand，那么这个属性就指向相应的XmlCommand。否则为null</para>
            <para>这个属性可用于在记录日志时使用。</para>
            </summary>
        </member>
        <member name="P:ClownFish.DbContext.IgnoreErrorEvent">
            <summary>
            <para>是否忽略所有发生的异常。</para>
            <para>在写异常日志时，请设为TRUE，可以避免在写日志时产生循环调用</para>
            </summary>
        </member>
        <member name="E:ClownFish.DbContext.OnException">
            <summary>
            DbContext在执行数据库操作时发生异常时引发的事件，供记录日志使用。
            </summary>
        </member>
        <member name="E:ClownFish.DbContext.OnBeforeExecute">
            <summary>
            每次在执行数据库操作前会触发的事件。可用此事件记录程序执行了哪些操作。
            </summary>
        </member>
        <member name="E:ClownFish.DbContext.OnAfterExecute">
            <summary>
            每次在执行数据库操作完成时会触发的事件。
            </summary>
        </member>
        <member name="E:ClownFish.DbContext.OnOpenConnection">
            <summary>
            每次打开数据库连接时会触发的事件
            </summary>
        </member>
        <member name="T:ClownFish.DbContextExceptionHandler">
            <summary>
            DbContext的异常事件委托
            </summary>
            <param name="context">DbContext对象</param>
            <param name="ex">Exception对象</param>
        </member>
        <member name="T:ClownFish.DbContextEventHandler">
            <summary>
            DbContext的事件委托
            </summary>
            <param name="context">DbContext对象</param>
        </member>
        <member name="T:ClownFish.CPQuery">
            <summary>
            拼接SQL查询字符串（Concat Parameterized Query）的处理类
            </summary>
        </member>
        <member name="M:ClownFish.CPQuery.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>		
            <param name="text">一段查询的SQL语句，可以只是一部分语句。</param>
            <param name="autoDiscoverParameters">是否自动分析拼接的字符串中包含的参数</param>
        </member>
        <member name="M:ClownFish.CPQuery.SetEvalNameDelegate(System.Func{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            设置用于计算参数名的二个回调委托。
            </summary>
            <param name="placeholderDelegate">用于计算SQL语句中参数的占位符的回调委托，默认为："@" + name</param>
            <param name="paraNameDelegate">用于计算命令参数的参数名的回调委托，默认为："@" + name</param>
            <returns>返回CPQuery本身</returns>
        </member>
        <member name="M:ClownFish.CPQuery.ToString">
            <summary>
            ToString()
            </summary>
            <returns>查询语句</returns>
        </member>
        <member name="M:ClownFish.CPQuery.BindToCommand(System.Data.Common.DbCommand)">
            <summary>
            将拼接得到的SQL以及参数值 绑定到命令
            </summary>
            <param name="command">DbCommand实例，它是绑定的目标对象</param>
        </member>
        <member name="M:ClownFish.CPQuery.New">
            <summary>
            创建一个空的（新的）CPQuery对象
            </summary>
            <returns>空的（新的）CPQuery对象</returns>
        </member>
        <member name="M:ClownFish.CPQuery.New(System.Boolean)">
            <summary>
            创建一个空的（新的）CPQuery对象
            </summary>
            <param name="autoDiscoverParameters">是否自动分析拼接的字符串中包含的参数</param>
            <returns>空的（新的）CPQuery对象</returns>
        </member>
        <member name="M:ClownFish.CPQuery.op_Addition(ClownFish.CPQuery,System.String)">
            <summary>
            操作符重载
            </summary>
            <param name="query"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.CPQuery.op_Addition(ClownFish.CPQuery,ClownFish.QueryParameter)">
            <summary>
            操作符重载
            </summary>
            <param name="query"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.CPQuery.Format(System.String,System.Object[])">
            <summary>
            采用类似string.Format的形式创建一个CPQuery对象
            </summary>
            <param name="format">包含参数点位符的SQL字符串</param>
            <param name="parameters">用于填充占位符的参数数组。</param>
            <returns>新的CPQuery对象</returns>
        </member>
        <member name="M:ClownFish.CPQuery.AppendFormat(System.String,System.Object[])">
            <summary>
            采用类似string.Format的形式填充一个CPQuery对象
            </summary>
            <param name="format">包含参数点位符的SQL字符串</param>
            <param name="parameters">用于填充占位符的参数数组。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.CPQuery.From(System.String,System.Object)">
            <summary>
            根据指定的【参数化SQL】以及对应的【参数对象】，创建一个CPQuery实例。
            </summary>
            <param name="parameterizedSQL">一个完整的参数化SQL语句</param>
            <param name="argsObject">包含parameterizedSQL所有参数值的对象，可以是一个匿名对象，它的属性名与命令名称相同。</param>
            <returns>一个新的CPQuery实例</returns>
        </member>
        <member name="M:ClownFish.CPQuery.AppendFrom(System.String,System.Object)">
            <summary>
            根据指定的【参数化SQL】以及对应的【参数对象】，填充到一个CPQuery实例。
            </summary>
            <param name="parameterizedSQL">一个完整的参数化SQL语句</param>
            <param name="argsObject">包含parameterizedSQL所有参数值的对象，可以是一个匿名对象，它的属性名与命令名称相同。</param>
            <returns>一个新的CPQuery实例</returns>
        </member>
        <member name="T:ClownFish.QueryParameter">
            <summary>
            与CPQuery一起使用的查询参数
            </summary>
        </member>
        <member name="M:ClownFish.QueryParameter.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Explicit(System.String)~ClownFish.QueryParameter">
            <summary>
            显示类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Int32)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Int64)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Int16)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.DateTime)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Boolean)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Double)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Decimal)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Single)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Guid)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.UInt64)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.UInt32)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.UInt16)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Char)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Byte)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.SByte)~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="M:ClownFish.QueryParameter.op_Implicit(System.Byte[])~ClownFish.QueryParameter">
            <summary>
            隐式类型转换
            </summary>
            <param name="a">要转换的值</param>
            <returns>包含转换值的QueryParameter对象</returns>
        </member>
        <member name="P:ClownFish.QueryParameter.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:ClownFish.CPQueryExtensions">
            <summary>
            CPQuery扩展方法
            </summary>
        </member>
        <member name="M:ClownFish.CPQueryExtensions.AsCPQuery(System.String)">
            <summary>
            将一个字符串转换成CPQuery对象
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.CPQueryExtensions.AsCPQuery(System.String,System.Boolean)">
            <summary>
            将一个字符串转换成CPQuery对象
            </summary>
            <param name="s"></param>
            <param name="autoDiscoverParameters">是否自动分析拼接的字符串中包含的参数</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.CPQueryExtensions.AsQueryParameter(System.Object)">
            <summary>
            将一个参数值转换成QueryParameter对象
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.ItemFieldInfo">
            <summary>
            用于标识实体的每个数据成员的完整描述信息
            </summary>
        </member>
        <member name="P:ClownFish.ItemFieldInfo.FieldAttr">
            <summary>
            DbColumnAttribute形式的描述信息
            </summary>
        </member>
        <member name="P:ClownFish.ItemFieldInfo.Member">
            <summary>
            反射信息
            </summary>
        </member>
        <member name="P:ClownFish.ItemFieldInfo.MemberType">
            <summary>
            此成员（字段或属性）的类型
            </summary>
        </member>
        <member name="T:ClownFish.PagingInfo">
            <summary>
            基本的分页信息。
            </summary>
        </member>
        <member name="M:ClownFish.PagingInfo.CalcPageCount">
            <summary>
            计算总页数
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClownFish.PagingInfo.PageIndex">
            <summary>
            分页序号，从0开始计数
            </summary>
        </member>
        <member name="P:ClownFish.PagingInfo.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:ClownFish.PagingInfo.TotalRecords">
            <summary>
            从相关查询中获取到的符合条件的总记录数
            </summary>
        </member>
        <member name="T:ClownFish.DbContextDefaultSetting">
            <summary>
            DbContext类的一些默认设置
            </summary>
        </member>
        <member name="P:ClownFish.DbContextDefaultSetting.AutoRetrieveOutputValues">
            <summary>
            当成功执行数据库操作后，如果有输出参数，是否自动获取返回值并赋值到实体对象的对应数据成员中。默认值：false
            </summary>
        </member>
        <member name="P:ClownFish.DbContextDefaultSetting.ListResultCapacity">
            <summary>
            <para>当从数据库中返回一个实体列表时，为列表的初始化长度是多少。默认值：50;</para>
            <para>对于有分页的应用程序，请根据程序的分页大小来合理地设置此参数。</para>
            </summary>
        </member>
    </members>
</doc>
