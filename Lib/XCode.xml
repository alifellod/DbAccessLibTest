<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XCode</name>
    </assembly>
    <members>
        <member name="T:XCode.Cache.SingleEntityCache`2">
            <summary>
            单对象缓存
            </summary>
            <typeparam name="TKey">键值类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:XCode.Cache.CacheBase`1">
            <summary>
            缓存基类
            </summary>
        </member>
        <member name="M:XCode.Cache.CacheBase`1.InvokeFill(NewLife.Reflection.Func)">
            <summary>
            调用填充方法前设置连接名和表名，调用后还原
            </summary>
        </member>
        <member name="P:XCode.Cache.CacheBase`1.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Cache.CacheBase`1.TableName">
            <summary>表名</summary>
        </member>
        <member name="T:XCode.Cache.ISingleEntityCache">
            <summary>
            单对象缓存接口
            </summary>
        </member>
        <member name="T:XCode.Cache.IEntityCacheBase">
            <summary>
            缓存基接口
            </summary>
        </member>
        <member name="P:XCode.Cache.IEntityCacheBase.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Cache.IEntityCacheBase.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.Cache.ISingleEntityCache.Item(System.Object)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Entities">
            <summary>单对象缓存</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Total">
            <summary>总次数</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Shoot">
            <summary>命中</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Shoot1">
            <summary>第一次命中</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Shoot2">
            <summary>第二次命中</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.Invalid">
            <summary>无效次数</summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.LastShow">
            <summary>最后显示时间</summary>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.ShowStatics">
            <summary>
            显示统计信息
            </summary>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.GetItem(XCode.Cache.SingleEntityCache{`0,`1}.CacheItem,`0)">
            <summary>
            内部处理返回对象。
            把对象传进来，而不是只传键值然后查找，是为了避免别的线程移除该项
            </summary>
            <param name="item"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.ContainsKey(`0)">
            <summary>
            是否包含指定键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.RemoveKey(`0)">
            <summary>
            移除指定项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XCode.Cache.SingleEntityCache`2.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.Expriod">
            <summary>过期时间。单位是秒，默认60秒</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.MaxEntity">
            <summary>最大实体数。默认10000</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.AutoSave">
            <summary>缓存到期时自动保存</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.AllowNull">
            <summary>允许缓存空对象</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.FindKeyMethod">
            <summary>查找数据的方法</summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.Item(`0)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Cache.SingleEntityCache`2.CacheItem">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="F:XCode.Cache.SingleEntityCache`2.CacheItem.CacheTime">
            <summary>
            缓存时间
            </summary>
        </member>
        <member name="P:XCode.Cache.SingleEntityCache`2.CacheItem.Entity">
            <summary>实体</summary>
        </member>
        <member name="T:XCode.Cache.FindKeyDelegate`2">
            <summary>
            查找数据的方法
            </summary>
            <typeparam name="TKey">键值类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="T:XCode.IEntity">
            <summary>数据实体接口</summary>
        </member>
        <member name="M:XCode.IEntity.LoadData(System.Data.DataRow)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据行</param>
        </member>
        <member name="M:XCode.IEntity.Insert">
            <summary>
            把该对象持久化到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.Update">
            <summary>
            更新数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.Delete">
            <summary>
            从数据库中删除该对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.Save">
            <summary>
            保存。根据主键检查数据库中是否已存在该对象，再决定调用Insert或Update
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntity.SetItem(System.String,System.Object)">
            <summary>
            设置字段值
            </summary>
            <param name="name">字段名</param>
            <param name="value">值</param>
            <returns>返回是否成功设置了数据</returns>
        </member>
        <member name="M:XCode.IEntity.ToXml">
            <summary>
            导出XML
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.IEntity.Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="P:XCode.IEntity.Extends">
            <summary>扩展属性</summary>
        </member>
        <member name="T:XCode.Exceptions.XCodeException">
            <summary>
            XCode异常
            </summary>
        </member>
        <member name="M:XCode.Exceptions.XCodeException.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XCode.Exceptions.XCodeException.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XCodeException.#ctor(System.String,System.Object[])">
            <summary>
            初始化
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.Exceptions.XCodeException.#ctor(System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XCodeException.#ctor(System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XCodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:XCode.IEntityList">
            <summary>实体列表接口</summary>
        </member>
        <member name="M:XCode.IEntityList.FindAll(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.FindAll(System.String[],System.Object[])">
            <summary>
            根据指定项查找
            </summary>
            <param name="names">属性名</param>
            <param name="values">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.Find(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.FindAllIgnoreCase(System.String,System.String)">
            <summary>
            根据指定项查找字符串。忽略大小写
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.FindIgnoreCase(System.String,System.String)">
            <summary>
            根据指定项查找字符串。忽略大小写
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.Exists(System.String,System.Object)">
            <summary>
            集合是否包含指定项
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.Sort(System.String,System.Boolean)">
            <summary>
            按指定字段排序
            </summary>
            <param name="name">字段</param>
            <param name="isDesc">是否降序</param>
        </member>
        <member name="M:XCode.IEntityList.Sort(System.String[],System.Boolean[])">
            <summary>
            按指定字段数组排序
            </summary>
            <param name="names">字段</param>
            <param name="isDescs">是否降序</param>
        </member>
        <member name="M:XCode.IEntityList.Insert(System.Boolean)">
            <summary>
            把整个集合插入到数据库
            </summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.Update(System.Boolean)">
            <summary>
            把整个集合更新到数据库
            </summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.Save(System.Boolean)">
            <summary>
            把整个保存更新到数据库
            </summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.Delete(System.Boolean)">
            <summary>
            把整个集合从数据库中删除
            </summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.SetItem(System.String,System.Object)">
            <summary>
            设置所有实体中指定项的值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.IEntityList.GetItem``1(System.String)">
            <summary>
            获取所有实体中指定项的值
            </summary>
            <typeparam name="TResult">指定项的类型</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.Join(System.String,System.String)">
            <summary>
            串联指定成员，方便由实体集合构造用于查询的子字符串
            </summary>
            <param name="name"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.Join(System.String)">
            <summary>
            串联
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.ToXml">
            <summary>
            导出Xml文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityList.FromXml(System.String)">
            <summary>
            导入Xml文本
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:XCode.IEntityList.ToJson">
            <summary>
            导出Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IDataRowEntityAccessor.LoadData(System.Data.DataTable)">
            <summary>
            加载数据表
            </summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IDataRowEntityAccessor.LoadData(System.Data.DataRow,XCode.IEntity)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据行</param>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:XCode.IDataRowEntityAccessor.LoadData(System.Data.IDataReader,XCode.IEntity)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据读写器</param>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:XCode.IDataRowEntityAccessor.ToData(XCode.IEntity,System.Data.DataRow@)">
            <summary>
            把数据复制到数据行对象中。
            </summary>
            <param name="entity">实体对象</param>
            <param name="dr">数据行</param>
        </member>
        <member name="M:XCode.DataRowEntityAccessor.LoadData(System.Data.DataTable)">
            <summary>
            加载数据表
            </summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.DataRowEntityAccessor.LoadData(System.Data.DataRow,XCode.IEntity)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据行</param>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:XCode.DataRowEntityAccessor.LoadData(System.Data.IDataReader,XCode.IEntity)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据读写器</param>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:XCode.DataRowEntityAccessor.ToData(XCode.IEntity,System.Data.DataRow@)">
            <summary>
            把数据复制到数据行对象中。
            </summary>
            <param name="entity">实体对象</param>
            <param name="dr">数据行</param>
        </member>
        <member name="P:XCode.DataRowEntityAccessor.EntityType">
            <summary>实体类</summary>
        </member>
        <member name="P:XCode.DataRowEntityAccessor.Factory">
            <summary>实体操作者</summary>
        </member>
        <member name="P:XCode.DataRowEntityAccessor.FieldItems">
            <summary>字段名-字段字典</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.XRelation">
            <summary>
            数据关系
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SerializableDataMember">
            <summary>
            可序列化数据成员
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SerializableDataMember.WriteDefaultValueMember">
            <summary>
            是否写数值为默认值的成员。为了节省空间，默认不写。
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IDataRelation">
            <summary>
            数据关系。一个表如果有多个数据关系，表明是多对多的关系表；如果只有一个关系，需要看是否唯一，它决定是一对一还是一对多。并可根据关系，生成对应的数据索引。
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataRelation.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>
            克隆到指定的数据表
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataRelation.Column">
            <summary>
            数据列
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataRelation.RelationTable">
            <summary>
            引用表
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataRelation.RelationColumn">
            <summary>
            引用列
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataRelation.Unique">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataRelation.Table">
            <summary>
            说明数据表
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XRelation.System#ICloneable#Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XRelation.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>
            克隆
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XRelation.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.XRelation.Column">
            <summary>数据列</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XRelation.RelationTable">
            <summary>引用表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XRelation.RelationColumn">
            <summary>引用列</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XRelation.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XRelation.Table">
            <summary>表</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.FileDbBase">
            <summary>
            文件型数据库
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DbBase">
            <summary>
            数据库基类。数据库类的职责是抽象不同数据库的共同点，理应最小化，保证原汁原味，因此不做缓存等实现。
            对于每一个连接字符串配置，都有一个数据库实例，而不是每个数据库类型一个实例，因为同类型数据库不同版本行为不同。
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IDatabase">
            <summary>
            数据库接口。抽象数据库的功能特点。
            对于每一个连接字符串配置，都有一个数据库实例，而不是每个数据库类型一个实例，因为同类型数据库不同版本行为不同。
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.CreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.CreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            构造分页SQL
            </summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            构造分页SQL
            </summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatName(System.String)">
            <summary>
            格式化名称，如果是关键字，则原样返回
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDatabase.FormatIdentity(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化标识列，返回插入数据时所用的表达式，如果字段本身支持自增，则返回空
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.Factory">
            <summary>
            工厂
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.ConnName">
            <summary>
            链接名
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.ConnectionString">
            <summary>
            链接字符串
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.Owner">
            <summary>
            拥有者
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.ServerVersion">
            <summary>
            数据库服务器版本
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.DateTimeMin">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDatabase.LongTextLength">
            <summary>
            长文本长度
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OnDispose(System.Boolean)">
            <summary>
            销毁资源时，回滚未提交事务，并关闭数据库连接
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.ReleaseSession">
            <summary>
            释放所有会话
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OnSetConnectionString(XCode.DataAccessLayer.XDbConnectionStringBuilder)">
            <summary>
            设置连接字符串时允许从中取值或修改，基类用于读取拥有者Owner，子类重写时应调用基类
            </summary>
            <param name="builder"></param>
        </member>
        <member name="F:XCode.DataAccessLayer.DbBase._sessions">
            <summary>
            保证数据库在每一个线程都有唯一的一个实例
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DbBase._MySessions">
            <summary>
            保存当前数据库的所有会话
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateSession">
            <summary>
            创建数据库会话，数据库在每一个线程都有唯一的一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.DbBase._metadata">
            <summary>
            唯一实例
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CreateMetaData">
            <summary>
            创建元数据对象，唯一实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.GetProviderFactory(System.String,System.String)">
            <summary>
            获取提供者工厂
            </summary>
            <param name="assemblyFile"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            构造分页SQL，优先选择max/min，然后选择not in
            </summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.PageSplitMaxMin(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            按唯一数字最大最小分析
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CheckSimpleSQL(System.String)">
            <summary>
            检查简单SQL语句，比如Select * From table
            </summary>
            <param name="sql">待检查SQL语句</param>
            <returns>如果是简单SQL语句则返回表名，否则返回子查询(sql) XCode_Temp_a</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.CheckOrderClause(System.String@)">
            <summary>
            检查是否以Order子句结尾，如果是，分割sql为前后两部分
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            构造分页SQL
            </summary>
            <remarks>
            两个构造分页SQL的方法，区别就在于查询生成器能够构造出来更好的分页语句，尽可能的避免子查询。
            MS体系的分页精髓就在于唯一键，当唯一键带有Asc/Desc/Unkown等排序结尾时，就采用最大最小值分页，否则使用较次的TopNotIn分页。
            TopNotIn分页和MaxMin分页的弊端就在于无法完美的支持GroupBy查询分页，只能查到第一页，往后分页就不行了，因为没有主键。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatName(System.String)">
            <summary>
            格式化名称，如果是关键字，则格式化后返回，否则原样返回
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.FormatIdentity(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化标识列，返回插入数据时所用的表达式，如果字段本身支持自增，则返回空
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.IsUnicode(System.String)">
            <summary>
            是否Unicode编码。只是固定判断n开头的几个常见类型为Unicode编码，这种方法不是很严谨，可以考虑读取DataTypes架构
            </summary>
            <param name="rawType"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbBase.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.DbType">
            <summary>
            返回数据库类型。外部DAL数据库类请使用Other
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ConnectionString">
            <summary>链接字符串</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.ServerVersion">
            <summary>
            数据库服务器版本
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.DateTimeMin">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbBase.LongTextLength">
            <summary>
            长文本长度
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.FileDbBase.FileName">
            <summary>文件</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.FileDbSession">
            <summary>
            文件型数据库会话
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DbSession">
            <summary>
            数据库会话基类。
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IDbSession">
            <summary>
            数据库会话接口。
            对应于与数据库的一次会话连接。
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.AutoClose">
            <summary>
            自动关闭。
            启用事务后，不关闭连接。
            在提交或回滚事务时，如果IsAutoClose为true，则会自动关闭
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Commit">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Rollback">
            <summary>
            回滚事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Query(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL查询，返回记录集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns>记录集</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Query(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            执行SQL查询，返回记录集
            </summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in和max/min分页</param>
            <returns>记录集</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Query(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand，返回记录集
            </summary>
            <param name="cmd">DbCommand</param>
            <returns>记录集</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.QueryCount(System.String)">
            <summary>
            执行SQL查询，返回总记录数
            </summary>
            <param name="sql">SQL语句</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.QueryCount(XCode.DataAccessLayer.SelectBuilder)">
            <summary>
            执行SQL查询，返回总记录数
            </summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.QueryCountFast(System.String)">
            <summary>
            快速查询单表记录数，稍有偏差
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Execute(System.String)">
            <summary>
            执行SQL语句，返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.Execute(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand，返回受影响的行数
            </summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.ExecuteScalar``1(System.String)">
            <summary>
            执行SQL语句，返回结果中的第一行第一列
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.CreateCommand">
            <summary>
            获取一个DbCommand。
            配置了连接，并关联了事务。
            连接已打开。
            使用完毕后，必须调用AutoClose方法，以使得在非事务及设置了自动关闭的情况下关闭连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDbSession.GetSchema(System.String,System.String[])">
            <summary>
            返回数据源的架构信息
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.ConnectionString">
            <summary>
            链接字符串
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.Conn">
            <summary>
            数据库链接
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.DatabaseName">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.QueryTimes">
            <summary>
            查询次数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.ExecuteTimes">
            <summary>
            执行次数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDbSession.Opened">
            <summary>
            连接是否已经打开
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.OnDispose(System.Boolean)">
            <summary>
            销毁资源时，回滚未提交事务，并关闭数据库连接
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.AutoClose">
            <summary>
            自动关闭。
            启用事务后，不关闭连接。
            在提交或回滚事务时，如果IsAutoClose为true，则会自动关闭
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.OnException(System.Exception)">
            <summary>
            当异常发生时触发。关闭数据库连接，或者返还连接到连接池。
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.OnException(System.Exception,System.String)">
            <summary>
            当异常发生时触发。关闭数据库连接，或者返还连接到连接池。
            </summary>
            <param name="ex"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.DbSession.TransactionCount">
            <summary>
            事务计数。
            当且仅当事务计数等于1时，才提交或回滚。
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Query(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL查询，返回记录集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryWithKey(System.String)">
            <summary>
            执行SQL查询，返回附加了主键等架构信息的记录集。性能稍差于普通查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Query(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            执行SQL查询，返回记录集
            </summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>记录集</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Query(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand，返回记录集
            </summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCount(System.String)">
            <summary>
            执行SQL查询，返回总记录数
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCount(XCode.DataAccessLayer.SelectBuilder)">
            <summary>
            执行SQL查询，返回总记录数
            </summary>
            <param name="builder">查询生成器</param>
            <returns>总记录数</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.QueryCountFast(System.String)">
            <summary>
            快速查询单表记录数，稍有偏差
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Execute(System.String)">
            <summary>
            执行SQL语句，返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.Execute(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand，返回受影响的行数
            </summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.ExecuteScalar``1(System.String)">
            <summary>
            执行SQL语句，返回结果中的第一行第一列
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.CreateCommand">
            <summary>
            获取一个DbCommand。
            配置了连接，并关联了事务。
            连接已打开。
            使用完毕后，必须调用AutoClose方法，以使得在非事务及设置了自动关闭的情况下关闭连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.GetSchema(System.String,System.String[])">
            <summary>
            返回数据源的架构信息
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.WriteSQL(System.String,System.Data.Common.DbParameter[])">
            <summary>
            写入SQL到文本中
            </summary>
            <param name="sql"></param>
            <param name="ps"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.WriteLog(System.String)">
            <summary>
            输出日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbSession.WriteLog(System.String,System.Object[])">
            <summary>
            输出日志
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.DbType">
            <summary>
            返回数据库类型。外部DAL数据库类请使用Other
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.ConnectionString">
            <summary>链接字符串，会话单独保存，允许修改，修改不会影响数据库中的连接字符串</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Conn">
            <summary>
            数据连接对象。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.QueryTimes">
            <summary>
            查询次数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.ExecuteTimes">
            <summary>
            执行次数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.ThreadID">
            <summary>线程编号，每个数据库会话应该只属于一个线程，该属性用于检查错误的跨线程操作</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.IsAutoClose">
            <summary>
            是否自动关闭。
            启用事务后，该设置无效。
            在提交或回滚事务时，如果IsAutoClose为true，则会自动关闭
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Opened">
            <summary>
            连接是否已经打开
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.DatabaseName">
            <summary>数据库名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.Trans">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbSession.ShowSQL">
            <summary>
            是否输出SQL语句，默认为XCode调试开关XCode.Debug
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.FileDbSession.Open">
            <summary>
            已重载。打开数据库连接前创建数据库
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.FileDbSession.FileName">
            <summary>文件</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.FileDbMetaData">
            <summary>
            文件型数据库元数据
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DbMetaData">
            <summary>数据库元数据</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IMetaData">
            <summary>
            数据库元数据接口
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.GetTables">
            <summary>取得表模型，正向工程</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.SetTables(XCode.DataAccessLayer.IDataTable[])">
            <summary>设置表模型，检查数据表是否匹配表模型，反向工程</summary>
            <param name="tables"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.GetSchemaSQL(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>获取数据定义语句</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns>数据定义语句</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IMetaData.SetSchema(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.IMetaData.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IMetaData.MetaDataCollections">
            <summary>所有元数据集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IMetaData.ReservedWords">
            <summary>保留关键字</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetTables">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.OnGetTables">
            <summary>取得所有表构架</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetTables(System.Data.DataRow[])">
            <summary>根据数据行取得数据表</summary>
            <param name="rows">数据行</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FixTable(XCode.DataAccessLayer.IDataTable,System.Data.DataRow)">
            <summary>修正表</summary>
            <param name="table"></param>
            <param name="dr"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFields(XCode.DataAccessLayer.IDataTable)">
            <summary>取得指定表的所有列构架</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFields(XCode.DataAccessLayer.IDataTable,System.Data.DataRow[])">
            <summary>获取指定表的字段</summary>
            <param name="table"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FixField(XCode.DataAccessLayer.IDataColumn,System.Data.DataRow)">
            <summary>修正指定字段</summary>
            <param name="field"></param>
            <param name="dr"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FixField(XCode.DataAccessLayer.IDataColumn,System.Data.DataRow,System.Data.DataRow)">
            <summary>修正指定字段</summary>
            <param name="field">字段</param>
            <param name="drColumn">字段元数据</param>
            <param name="drDataType">字段匹配的数据类型</param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetIndexes(XCode.DataAccessLayer.IDataTable)">
            <summary>获取索引</summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FixIndex(XCode.DataAccessLayer.IDataIndex,System.Data.DataRow)">
            <summary>修正索引</summary>
            <param name="index"></param>
            <param name="dr"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FindDataType(XCode.DataAccessLayer.IDataColumn,System.String,System.Nullable{System.Boolean})">
            <summary>查找指定字段指定类型的数据类型</summary>
            <param name="field"></param>
            <param name="typeName"></param>
            <param name="isLong"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFieldType(XCode.DataAccessLayer.IDataColumn)">
            <summary>取字段类型</summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFormatParam(XCode.DataAccessLayer.IDataColumn,System.Data.DataRow)">
            <summary>取得格式化的类型参数</summary>
            <param name="field"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFormatParamItem(XCode.DataAccessLayer.IDataColumn,System.Data.DataRow,System.String)">
            <summary>获取格式化参数项</summary>
            <param name="field"></param>
            <param name="dr"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetSchema(System.String,System.String[])">
            <summary>返回数据源的架构信息</summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.TryGetDataRowValue``1(System.Data.DataRow,System.String,``0@)">
            <summary>尝试从指定数据行中读取指定名称列的数据</summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetDataRowValue``1(System.Data.DataRow,System.String)">
            <summary>获取指定数据行指定字段的值，不存在时返回空</summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FormatName(System.String)">
            <summary>格式化关键字</summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CheckAndGetDefaultDateTimeNow(XCode.DataAccessLayer.DatabaseType,System.String)">
            <summary>检查并获取当前数据库的默认时间</summary>
            <param name="oriDbType"></param>
            <param name="oriDefault"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.WriteLog(System.String)">
            <summary>
            输出日志
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.WriteLog(System.String,System.Object[])">
            <summary>
            输出日志
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.SetTables(XCode.DataAccessLayer.IDataTable[])">
            <summary>设置表模型，检查数据表是否匹配表模型，反向工程</summary>
            <param name="tables"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CheckColumnsChange(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>
            检查字段改变。某些数据库（如SQLite）没有添删改字段的DDL语法，可重载该方法，使用重建表方法ReBuildTable
            </summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="onlySql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.CheckTableDescriptionAndIndex(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataTable,System.Boolean)">
            <summary>
            检查表说明和索引
            </summary>
            <param name="entitytable"></param>
            <param name="dbtable"></param>
            <param name="onlySql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.IsColumnChanged(XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDatabase)">
            <summary>
            检查字段是否有改变，除了默认值和备注以外
            </summary>
            <param name="entityColumn"></param>
            <param name="dbColumn"></param>
            <param name="entityDb"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.IsColumnDefaultChanged(XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDatabase)">
            <summary>
            检查字段默认值是否有改变
            </summary>
            <param name="entityColumn"></param>
            <param name="dbColumn"></param>
            <param name="entityDb"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.ChangeColmnDefault(System.Text.StringBuilder,System.Boolean,XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDataColumn,XCode.DataAccessLayer.IDatabase)">
            <summary>
            改变字段默认值。这里仅仅默认处理了时间日期，如果需要兼容多数据库，子类需要重载
            </summary>
            <param name="sb"></param>
            <param name="onlySql"></param>
            <param name="entityColumn"></param>
            <param name="dbColumn"></param>
            <param name="entityDb"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.PerformSchema(System.Text.StringBuilder,System.Boolean,XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>
            获取架构语句，该执行的已经执行。
            如果取不到语句，则输出日志信息；
            如果不是纯语句，则执行；
            </summary>
            <param name="sb"></param>
            <param name="onlySql"></param>
            <param name="schema"></param>
            <param name="values"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetSchemaSQL(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>获取数据定义语句</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.SetSchema(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>设置数据定义模式</summary>
            <param name="schema">数据定义模式</param>
            <param name="values">其它信息</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.FieldClause(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>字段片段</summary>
            <param name="field"></param>
            <param name="onlyDefine">仅仅定义。定义操作才允许设置自增和使用默认值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFieldConstraints(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>取得字段约束</summary>
            <param name="field"></param>
            <param name="onlyDefine">仅仅定义</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DbMetaData.GetFieldDefault(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>取得字段默认值</summary>
            <param name="field"></param>
            <param name="onlyDefine">仅仅定义</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.DataTypes">
            <summary>数据类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.FieldTypeMaps">
            <summary>字段类型映射</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.Database">
            <summary>数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.MetaDataCollections">
            <summary>所有元数据集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DbMetaData.ReservedWords">
            <summary>保留关键字</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.FileDbMetaData.SetSchema(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>
            设置数据定义模式
            </summary>
            <param name="schema"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.FileDbMetaData.CreateDatabase">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.FileDbMetaData.FileName">
            <summary>文件</summary>
        </member>
        <member name="T:XCode.Common.FileSource">
            <summary>
            文件资源
            </summary>
        </member>
        <member name="M:XCode.Common.FileSource.ReleaseFile(System.String,System.String,System.Boolean)">
            <summary>
            释放文件
            </summary>
            <param name="filename"></param>
            <param name="dest"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:XCode.Common.FileSource.GetAssembly(System.String)">
            <summary>
            释放程序集文件
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Common.FileSource.GetFileResource(System.String)">
            <summary>
            获取文件字节码
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.Code.EntityClass">
            <summary>
            实体类
            </summary>
            <remarks>提供由IDataTable生成实体类的支持</remarks>
        </member>
        <member name="M:XCode.Code.EntityClass.Create">
            <summary>
            创建实体类
            </summary>
        </member>
        <member name="M:XCode.Code.EntityClass.AddProperties">
            <summary>
            添加属性集合
            </summary>
        </member>
        <member name="M:XCode.Code.EntityClass.AddField(XCode.DataAccessLayer.IDataColumn)">
            <summary>
            添加私有字段
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:XCode.Code.EntityClass.AddProperty(XCode.DataAccessLayer.IDataColumn)">
            <summary>
            添加单个属性
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:XCode.Code.EntityClass.AddIndexs">
            <summary>
            添加索引器
            </summary>
        </member>
        <member name="M:XCode.Code.EntityClass.AddNames">
            <summary>
            添加字段名类
            </summary>
        </member>
        <member name="M:XCode.Code.EntityClass.GenerateCSharpCode">
            <summary>
            生成C#代码
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Code.EntityClass.ClassName">
            <summary>类名</summary>
        </member>
        <member name="P:XCode.Code.EntityClass.FieldNames">
            <summary>属性名</summary>
        </member>
        <member name="P:XCode.Code.EntityClass.Table">
            <summary>表</summary>
        </member>
        <member name="P:XCode.Code.EntityClass.Assembly">
            <summary>实体程序集</summary>
        </member>
        <member name="P:XCode.Code.EntityClass.Class">
            <summary>实体类</summary>
        </member>
        <member name="T:XCode.ModelCheckModes">
            <summary>
            模型检查模式
            </summary>
        </member>
        <member name="F:XCode.ModelCheckModes.CheckAllTablesWhenInit">
            <summary>
            初始化时检查所有表
            </summary>
        </member>
        <member name="F:XCode.ModelCheckModes.CheckTableWhenFirstUse">
            <summary>
            第一次使用时检查表
            </summary>
        </member>
        <member name="T:XCode.ModelCheckModeAttribute">
            <summary>
            模型检查模式
            </summary>
        </member>
        <member name="M:XCode.ModelCheckModeAttribute.#ctor(XCode.ModelCheckModes)">
            <summary>
            指定实体类的模型检查模式
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:XCode.ModelCheckModeAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>
            检索应用于类型成员的自定义属性。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.ModelCheckModeAttribute.Mode">
            <summary>模式</summary>
        </member>
        <member name="T:XCode.BindRelationAttribute">
            <summary>
            用于指定数据类所绑定到的关系
            </summary>
        </member>
        <member name="M:XCode.BindRelationAttribute.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            指定一个关系
            </summary>
            <param name="column"></param>
            <param name="unique"></param>
            <param name="relationtable"></param>
            <param name="relationcolumn"></param>
        </member>
        <member name="M:XCode.BindRelationAttribute.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
            检索应用于类型成员的自定义属性。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.BindRelationAttribute.Fill(XCode.DataAccessLayer.IDataRelation)">
            <summary>
            填充索引
            </summary>
            <param name="relation"></param>
        </member>
        <member name="P:XCode.BindRelationAttribute.Column">
            <summary>数据列</summary>
        </member>
        <member name="P:XCode.BindRelationAttribute.RelationTable">
            <summary>引用表</summary>
        </member>
        <member name="P:XCode.BindRelationAttribute.RelationColumn">
            <summary>引用列</summary>
        </member>
        <member name="P:XCode.BindRelationAttribute.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="T:XCode.Model.XCodeServiceProvider">
            <summary>
            XCode服务对象提供者
            </summary>
        </member>
        <member name="M:XCode.Model.XCodeServiceProvider.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:XCode.Model.XCodeServiceProvider.#ctor(System.IServiceProvider)">
            <summary>
            通过指定一个基础提供者来实例化一个新的提供者，优先基础提供者
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:XCode.Model.XCodeServiceProvider.Current">
            <summary>默认服务对象提供者</summary>
        </member>
        <member name="T:XCode.Exceptions.XSqlException">
            <summary>
            数据访问层SQL异常
            </summary>
        </member>
        <member name="T:XCode.Exceptions.XDbSessionException">
            <summary>
            数据访问层异常
            </summary>
        </member>
        <member name="T:XCode.Exceptions.XDbException">
            <summary>
            数据访问层异常
            </summary>
        </member>
        <member name="M:XCode.Exceptions.XDbException.#ctor(XCode.DataAccessLayer.IDatabase)">
            <summary>
            初始化
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbException.#ctor(XCode.DataAccessLayer.IDatabase,System.String)">
            <summary>
            初始化
            </summary>
            <param name="db"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbException.#ctor(XCode.DataAccessLayer.IDatabase,System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="db"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbException.#ctor(XCode.DataAccessLayer.IDatabase,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="db"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:XCode.Exceptions.XDbException.Database">
            <summary>数据库</summary>
        </member>
        <member name="M:XCode.Exceptions.XDbSessionException.#ctor(XCode.DataAccessLayer.IDbSession)">
            <summary>
            初始化
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbSessionException.#ctor(XCode.DataAccessLayer.IDbSession,System.String)">
            <summary>
            初始化
            </summary>
            <param name="session"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbSessionException.#ctor(XCode.DataAccessLayer.IDbSession,System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="session"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbSessionException.#ctor(XCode.DataAccessLayer.IDbSession,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="session"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:XCode.Exceptions.XDbSessionException.Session">
            <summary>数据库会话</summary>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.#ctor(System.String,XCode.DataAccessLayer.IDbSession)">
            <summary>
            初始化
            </summary>
            <param name="sql"></param>
            <param name="session"></param>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.#ctor(System.String,XCode.DataAccessLayer.IDbSession,System.String)">
            <summary>
            初始化
            </summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.#ctor(System.String,XCode.DataAccessLayer.IDbSession,System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.#ctor(System.String,XCode.DataAccessLayer.IDbSession,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="sql"></param>
            <param name="session"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XSqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            从序列化信息中读取Sql
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:XCode.Exceptions.XSqlException.Sql">
            <summary>SQL语句</summary>
        </member>
        <member name="T:XCode.EntityListView`1">
            <summary>
            实体列表视图
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCode.EntityListView`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XCode.EntityListView`1.Insert(System.Int32,`0)">
            <summary>
            已重载。新增元素时，触发事件改变
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.EntityListView`1.RemoveAt(System.Int32)">
            <summary>
            已重载。从列表中删除项时，同时从数据库中删除实体
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:XCode.EntityListView`1.System#ComponentModel#IBindingList#AllowEdit">
            <summary>获取是否可更新列表中的项。</summary>
        </member>
        <member name="P:XCode.EntityListView`1.System#ComponentModel#IBindingList#AllowNew">
            <summary>获取是否可以使用 System.ComponentModel.IBindingList.AddNew() 向列表中添加项。</summary>
        </member>
        <member name="P:XCode.EntityListView`1.System#ComponentModel#IBindingList#AllowRemove">
            <summary>获取是否可以使用 System.Collections.IList.Remove(System.Object) 或 System.Collections.IList.RemoveAt(System.Int32)从列表中移除项。</summary>
        </member>
        <member name="P:XCode.EntityListView`1.System#ComponentModel#IBindingList#IsSorted">
            <summary>获取是否对列表中的项进行排序。</summary>
        </member>
        <member name="P:XCode.EntityListView`1.SortDirection">
            <summary>获取排序的方向。</summary>
        </member>
        <member name="P:XCode.EntityListView`1.SortProperty">
            <summary>获取正在用于排序的 System.ComponentModel.PropertyDescriptor。</summary>
        </member>
        <member name="P:XCode.EntityListView`1.SortDescriptions">
            <summary>获取当前应用于数据源的排序说明的集合。</summary>
        </member>
        <member name="P:XCode.EntityListView`1.EntityType">
            <summary>
            真正的实体类型。有些场合为了需要会使用IEntity。
            </summary>
        </member>
        <member name="P:XCode.EntityListView`1.Factory">
            <summary>
            实体操作者
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCe.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCe.DbType">
            <summary>
            返回数据库类型。外部DAL数据库类请使用Other
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCe.dbProviderFactory">
            <summary>
            提供者工厂
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCe.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCe.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlCe.DateTimeMin">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlCeSession">
            <summary>
            SqlCe会话
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlCeSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlCeMetaData">
            <summary>
            SqlCe元数据
            </summary>
        </member>
        <member name="T:XCode.IEntityOperate">
            <summary>
            数据实体操作接口
            </summary>
        </member>
        <member name="M:XCode.IEntityOperate.Create">
            <summary>
            创建一个实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.LoadData(System.Data.DataSet)">
            <summary>
            加载记录集
            </summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityOperate.Find(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，查找单个实体
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.Find(System.String)">
            <summary>
            根据条件查找单个实体
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindByKey(System.Object)">
            <summary>
            根据主键查找单个实体
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindByKeyForEdit(System.Object)">
            <summary>
            根据主键查询一个实体对象用于表单编辑
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindAll">
            <summary>
            获取所有实体对象。获取大量数据时会非常慢，慎用
            </summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindAll(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindAll(System.String[],System.Object[])">
            <summary>
            根据属性列表以及对应的值列表，获取所有实体对象
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindAll(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindAll(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindAllByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindCount">
            <summary>
            返回总记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindCount(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            返回总记录数
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindCount(System.String[],System.Object[])">
            <summary>
            根据属性列表以及对应的值列表，返回总记录数
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindCount(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindCount(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FindCountByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FromXml(System.String)">
            <summary>
            导入
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.FromJson(System.String)">
            <summary>
            导入
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.Commit">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.Rollback">
            <summary>
            回滚事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.FormatName(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.FormatValue(System.String,System.Object)">
            <summary>
            取得一个值的Sql值。
            当这个值是字符串类型时，会在该值前后加单引号；
            </summary>
            <param name="name">字段</param>
            <param name="value">对象</param>
            <returns>Sql值的字符串形式</returns>
        </member>
        <member name="M:XCode.IEntityOperate.FormatValue(XCode.Configuration.FieldItem,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.MakeCondition(System.String[],System.Object[],System.String)">
            <summary>
            根据属性列表和值列表，构造查询条件。
            例如构造多主键限制查询条件。
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <param name="action">联合方式</param>
            <returns>条件子串</returns>
        </member>
        <member name="M:XCode.IEntityOperate.MakeCondition(System.String,System.Object,System.String)">
            <summary>
            构造条件
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="M:XCode.IEntityOperate.MakeCondition(XCode.Configuration.FieldItem,System.Object,System.String)">
            <summary>
            构造条件
            </summary>
            <param name="field">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="P:XCode.IEntityOperate.Default">
            <summary>
            默认实体
            </summary>
        </member>
        <member name="P:XCode.IEntityOperate.Table">
            <summary>
            数据表元数据
            </summary>
        </member>
        <member name="P:XCode.IEntityOperate.AllFields">
            <summary>
            所有数据属性
            </summary>
        </member>
        <member name="P:XCode.IEntityOperate.Fields">
            <summary>
            所有绑定到数据表的属性
            </summary>
        </member>
        <member name="P:XCode.IEntityOperate.FieldNames">
            <summary>
            字段名列表
            </summary>
        </member>
        <member name="P:XCode.IEntityOperate.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.IEntityOperate.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.IEntityOperate.Cache">
            <summary>实体缓存</summary>
        </member>
        <member name="P:XCode.IEntityOperate.SingleCache">
            <summary>单对象实体缓存</summary>
        </member>
        <member name="P:XCode.IEntityOperate.Count">
            <summary>总记录数</summary>
        </member>
        <member name="T:XCode.Code.EntityClassBiz">
            <summary>
            实体类，业务部分
            </summary>
        </member>
        <member name="T:XCode.Code.EntityAssembly">
            <summary>
            实体程序集
            </summary>
        </member>
        <member name="M:XCode.Code.EntityAssembly.Create(XCode.DataAccessLayer.DAL)">
             <summary>
            为数据访问层创建实体程序集
             </summary>
             <param name="dal"></param>
             <returns></returns>
        </member>
        <member name="M:XCode.Code.EntityAssembly.Create(XCode.DataAccessLayer.IDataTable)">
            <summary>
            在该程序集中创建一个实体类
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.EntityAssembly.Create(System.String)">
            <summary>
            根据名称创建
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.EntityAssembly.CreateAll">
            <summary>
            创建所以表的实体类
            </summary>
        </member>
        <member name="M:XCode.Code.EntityAssembly.GenerateCSharpCode">
            <summary>
            生成C#代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.EntityAssembly.Compile(System.CodeDom.Compiler.CompilerParameters)">
            <summary>
            编译
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.EntityAssembly.Compile">
            <summary>
            编译并返回程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Code.EntityAssembly.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Code.EntityAssembly.Dal">
            <summary>数据访问层</summary>
        </member>
        <member name="P:XCode.Code.EntityAssembly.Classes">
            <summary>实体类集合</summary>
        </member>
        <member name="P:XCode.Code.EntityAssembly.Unit">
            <summary>代码编译单元</summary>
        </member>
        <member name="P:XCode.Code.EntityAssembly.NameSpace">
            <summary>命名空间</summary>
        </member>
        <member name="T:XCode.BindIndexAttribute">
            <summary>
            用于指定数据类所绑定到的索引
            </summary>
        </member>
        <member name="M:XCode.BindIndexAttribute.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            指定一个索引
            </summary>
            <param name="name"></param>
            <param name="unique"></param>
            <param name="columns"></param>
        </member>
        <member name="M:XCode.BindIndexAttribute.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
            检索应用于类型成员的自定义属性。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.BindIndexAttribute.Fill(XCode.DataAccessLayer.IDataIndex)">
            <summary>
            填充索引
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:XCode.BindIndexAttribute.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.BindIndexAttribute.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:XCode.BindIndexAttribute.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="T:XCode.Entity`1">
            <summary>
            数据实体类基类。所有数据实体类都必须继承该类。
            </summary>
        </member>
        <member name="T:XCode.EntityBase">
            <summary>
            数据实体基类的基类
            </summary>
        </member>
        <member name="M:XCode.EntityBase.OnPropertyChanging(System.String,System.Object)">
            <summary>
            属性改变。重载时记得调用基类的该方法，以设置脏数据属性，否则数据将无法Update到数据库。
            </summary>
            <param name="fieldName">字段名</param>
            <param name="newValue">新属性值</param>
            <returns>是否允许改变</returns>
        </member>
        <member name="M:XCode.EntityBase.OnPropertyChanged(System.String)">
            <summary>
            属性改变。重载时记得调用基类的该方法，以设置脏数据属性，否则数据将无法Update到数据库。
            </summary>
            <param name="fieldName">字段名</param>
        </member>
        <member name="M:XCode.EntityBase.InitData">
            <summary>
            首次连接数据库时初始化数据，仅用于实体类重载，用户不应该调用该方法
            </summary>
        </member>
        <member name="M:XCode.EntityBase.LoadData(System.Data.DataRow)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据行</param>
        </member>
        <member name="M:XCode.EntityBase.LoadData(System.Data.IDataReader)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据读写器</param>
        </member>
        <member name="M:XCode.EntityBase.Insert">
            <summary>
            把该对象持久化到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.Update">
            <summary>
            更新数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.Delete">
            <summary>
            从数据库中删除该对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.Save">
            <summary>
            保存。根据主键检查数据库中是否已存在该对象，再决定调用Insert或Update
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.SetItem(System.String,System.Object)">
            <summary>
            设置字段值，该方法影响脏数据。
            </summary>
            <param name="name">字段名</param>
            <param name="value">值</param>
            <returns>返回是否成功设置了数据</returns>
        </member>
        <member name="M:XCode.EntityBase.CreateXmlSerializer">
            <summary>
            建立Xml序列化器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.ToXml">
            <summary>
            导出XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.ToJson">
            <summary>
            导出Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.Clone">
            <summary>
            创建当前对象的克隆对象，仅拷贝基本字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.CopyFrom(XCode.IEntity,System.Boolean)">
            <summary>
            复制来自指定实体的成员，可以是不同类型的实体，只复制共有的基本字段，影响脏数据
            </summary>
            <param name="entity">来源实体对象</param>
            <param name="setDirty">是否设置脏数据</param>
            <returns>实际复制成员数</returns>
        </member>
        <member name="M:XCode.EntityBase.SetDirty(System.Boolean)">
            <summary>
            设置所有数据的脏属性
            </summary>
            <param name="isDirty">改变脏属性的属性个数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.OnPropertyChange(System.String,System.Object)">
            <summary>
            属性改变。重载时记得调用基类的该方法，以设置脏数据属性，否则数据将无法Update到数据库。
            </summary>
            <param name="fieldName">字段名</param>
            <param name="newValue">新属性值</param>
            <returns>是否允许改变</returns>
        </member>
        <member name="F:XCode.EntityBase._StopExtend">
            <summary>
            改为线程静态，避免线程间干扰。注意初始化赋值对线程静态无效，只有第一个生效
            </summary>
        </member>
        <member name="M:XCode.EntityBase.GetExtend``2(System.String,NewLife.Reflection.Func{System.String,System.Object})">
            <summary>
            获取扩展属性，获取数据时向指定的依赖实体类注册数据更改事件
            </summary>
            <typeparam name="TDependEntity">依赖实体类，该实体类数据更改时清空所有依赖于实体类的扩展属性</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="key">键值</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.GetExtend``2(System.String,NewLife.Reflection.Func{System.String,System.Object},System.Boolean)">
            <summary>
            获取扩展属性，获取数据时向指定的依赖实体类注册数据更改事件
            </summary>
            <typeparam name="TDependEntity">依赖实体类，该实体类数据更改时清空所有依赖于实体类的扩展属性</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="key">键值</param>
            <param name="func">回调</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityBase.RemoveExtend(System.Type)">
            <summary>
            清理依赖于某类型的缓存
            </summary>
            <param name="dependType">依赖类型</param>
        </member>
        <member name="M:XCode.EntityBase.SetExtend``1(System.String,System.Object)">
            <summary>
            设置扩展属性
            </summary>
            <typeparam name="TDependEntity"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="E:XCode.EntityBase.System#ComponentModel#INotifyPropertyChanging#PropertyChanging">
            <summary>
            属性将更改
            </summary>
        </member>
        <member name="E:XCode.EntityBase.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            属性已更改
            </summary>
        </member>
        <member name="P:XCode.EntityBase.Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="P:XCode.EntityBase.XCode#IEntity#Dirtys">
            <summary>脏属性。存储哪些属性的数据被修改过了。</summary>
        </member>
        <member name="P:XCode.EntityBase.Extends">
            <summary>扩展属性</summary>
        </member>
        <member name="P:XCode.EntityBase.XCode#IEntity#Extends">
            <summary>扩展属性</summary>
        </member>
        <member name="P:XCode.EntityBase.Depends">
            <summary>
            类型依赖
            </summary>
        </member>
        <member name="P:XCode.EntityBase.StopExtend">
            <summary>
            是否停止扩展属性，停止扩展属性后，可以避免扩展属性自动触发获取数据的功能
            </summary>
        </member>
        <member name="M:XCode.Entity`1.#cctor">
            <summary>静态构造</summary>
        </member>
        <member name="M:XCode.Entity`1.CreateInstance">
            <summary>
            创建实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.LoadData(System.Data.DataSet)">
            <summary>
            加载记录集
            </summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.LoadData(System.Data.DataTable)">
            <summary>
            加载数据表
            </summary>
            <param name="dt">数据表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.LoadData(System.Data.DataRow)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据行</param>
        </member>
        <member name="M:XCode.Entity`1.LoadData(System.Data.IDataReader)">
            <summary>
            从一个数据行对象加载数据。不加载关联对象。
            </summary>
            <param name="dr">数据读写器</param>
        </member>
        <member name="M:XCode.Entity`1.ToData(System.Data.DataRow@)">
            <summary>
            把数据复制到数据行对象中。
            </summary>
            <param name="dr">数据行</param>
        </member>
        <member name="M:XCode.Entity`1.Insert">
            <summary>
            插入数据，通过调用OnInsert实现，另外增加了数据验证和事务保护支持，将来可能实现事件支持。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnInsert">
            <summary>
            把该对象持久化到数据库。该方法提供原生的数据操作，不建议重载，建议重载Insert代替。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Update">
            <summary>
            更新数据，通过调用OnUpdate实现，另外增加了数据验证和事务保护支持，将来可能实现事件支持。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnUpdate">
            <summary>
            更新数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Delete">
            <summary>
            删除数据，通过调用OnDelete实现，另外增加了数据验证和事务保护支持，将来可能实现事件支持。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnDelete">
            <summary>
            从数据库中删除该对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Save">
            <summary>
            保存。根据主键检查数据库中是否已存在该对象，再决定调用Insert或Update
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Valid(System.Boolean)">
            <summary>
            验证数据，通过抛出异常的方式提示验证失败。建议重写者调用基类的实现，因为将来可能根据数据字段的特性进行数据验证。
            </summary>
            <param name="isNew">是否新数据</param>
        </member>
        <member name="M:XCode.Entity`1.CheckExist(System.String[])">
            <summary>
            根据指定键检查数据是否已存在，若不存在，抛出ArgumentOutOfRangeException异常
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:XCode.Entity`1.Exist(System.String[])">
            <summary>
            根据指定键检查数据，返回数据是否已存在
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，查找单个实体
            </summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(System.String[],System.Object[])">
            <summary>
            根据属性列表以及对应的值列表，查找单个实体
            </summary>
            <param name="names">属性名称集合</param>
            <param name="values">属性值集合</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Find(System.String)">
            <summary>
            根据条件查找单个实体
            </summary>
            <param name="whereClause">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindByKey(System.Object)">
            <summary>
            根据主键查找单个实体
            </summary>
            <param name="key">唯一主键的值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindByKeyForEdit(System.Object)">
            <summary>
            根据主键查询一个实体对象用于表单编辑
            </summary>
            <param name="key">唯一主键的值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll">
            <summary>
            获取所有实体对象。获取大量数据时会非常慢，慎用
            </summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(System.String[],System.Object[])">
            <summary>
            根据属性列表以及对应的值列表，获取所有实体对象
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAllByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.FindAll(System.String)">
            <summary>
            查询SQL并返回实体对象数组。
            Select方法将直接使用参数指定的查询语句进行查询，不进行任何转换。
            </summary>
            <param name="sql">查询语句</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.Search(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            查询满足条件的记录集，分页、排序
            </summary>
            <param name="key">关键字</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体集</returns>
        </member>
        <member name="M:XCode.Entity`1.SearchCount(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            查询满足条件的记录总数，分页和排序无效，带参数是因为ObjectDataSource要求它跟Search统一
            </summary>
            <param name="key">关键字</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>记录数</returns>
        </member>
        <member name="M:XCode.Entity`1.SearchWhereByKeys(System.Text.StringBuilder,System.String)">
            <summary>
            构建关键字查询条件
            </summary>
            <param name="sb"></param>
            <param name="keys"></param>
        </member>
        <member name="M:XCode.Entity`1.SearchWhereByKeys(System.Text.StringBuilder,System.String,NewLife.Reflection.Func{System.String,System.String})">
            <summary>
            构建关键字查询条件
            </summary>
            <param name="sb"></param>
            <param name="keys"></param>
            <param name="func"></param>
        </member>
        <member name="M:XCode.Entity`1.SearchWhereByKeys(System.String,NewLife.Reflection.Func{System.String,System.String})">
            <summary>
            构建关键字查询条件
            </summary>
            <param name="keys"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.SearchWhereByKey(System.String)">
            <summary>
            构建关键字查询条件
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindWithCache(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，在缓存中查找单个实体
            </summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindAllWithCache">
            <summary>
            查找所有缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindAllWithCache(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，在缓存中获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.FindCount">
            <summary>
            返回总记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FindCount(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            返回总记录数
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.FindCount(System.String[],System.Object[])">
            <summary>
            根据属性列表以及对应的值列表，返回总记录数
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.FindCount(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.FindCount(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.FindCountByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.Insert(`0)">
            <summary>
            把一个实体对象持久化到数据库
            </summary>
            <param name="obj">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.Entity`1.Insert(System.String[],System.Object[])">
            <summary>
            把一个实体对象持久化到数据库
            </summary>
            <param name="names">更新属性列表</param>
            <param name="values">更新值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.Entity`1.Update(`0)">
            <summary>
            把一个实体对象更新到数据库
            </summary>
            <param name="obj">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.Entity`1.Update(System.String,System.String)">
            <summary>
            更新一批实体数据
            </summary>
            <param name="setClause">要更新的项和数据</param>
            <param name="whereClause">指定要更新的实体</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新一批实体数据
            </summary>
            <param name="setNames">更新属性列表</param>
            <param name="setValues">更新值列表</param>
            <param name="whereNames">条件属性列表</param>
            <param name="whereValues">条件值列表</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.Entity`1.Delete(`0)">
            <summary>
            从数据库中删除指定实体对象。
            实体类应该实现该方法的另一个副本，以唯一键或主键作为参数
            </summary>
            <param name="obj">实体对象</param>
            <returns>返回受影响的行数，可用于判断被删除了多少行，从而知道操作是否成功</returns>
        </member>
        <member name="M:XCode.Entity`1.Delete(System.String)">
            <summary>
            从数据库中删除指定条件的实体对象。
            </summary>
            <param name="whereClause">限制条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Delete(System.String[],System.Object[])">
            <summary>
            从数据库中删除指定属性列表和值列表所限定的实体对象。
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Save(`0)">
            <summary>
            把一个实体对象更新到数据库
            </summary>
            <param name="obj">实体对象</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCode.Entity`1.SQL(XCode.Entity{`0},System.ComponentModel.DataObjectMethodType)">
            <summary>
            把SQL模版格式化为SQL语句
            </summary>
            <param name="obj">实体对象</param>
            <param name="methodType"></param>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:XCode.Entity`1.MakeCondition(System.String[],System.Object[],System.String)">
            <summary>
            根据属性列表和值列表，构造查询条件。
            例如构造多主键限制查询条件。
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <param name="action">联合方式</param>
            <returns>条件子串</returns>
        </member>
        <member name="M:XCode.Entity`1.MakeCondition(System.String,System.Object,System.String)">
            <summary>
            构造条件
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.MakeCondition(XCode.Configuration.FieldItem,System.Object,System.String)">
            <summary>
            构造条件
            </summary>
            <param name="field">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.DefaultCondition(XCode.Entity{`0})">
            <summary>
            默认条件。
            若有标识列，则使用一个标识列作为条件；
            如有主键，则使用全部主键作为条件。
            </summary>
            <param name="obj">实体对象</param>
            <returns>条件</returns>
        </member>
        <member name="M:XCode.Entity`1.PageSplitSQL(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            取得指定实体类型的分页SQL
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.Entity`1.PageSplitSQL(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32)">
            <summary>
            取得指定实体类型的分页SQL
            </summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.Entity`1.CreateXmlSerializer">
            <summary>
            建立Xml序列化器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FromXml(System.String)">
            <summary>
            导入
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.FromJson(System.String)">
            <summary>
            导入
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Clone">
            <summary>
            创建当前对象的克隆对象，仅拷贝基本字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.CloneEntity">
            <summary>
            克隆实体。创建当前对象的克隆对象，仅拷贝基本字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.SetDirty(System.Boolean)">
            <summary>
            设置所有数据的脏属性
            </summary>
            <param name="isDirty">改变脏属性的属性个数</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.OnPropertyChanging(System.String,System.Object)">
            <summary>
            如果字段带有默认值，则需要设置脏数据，因为显然用户想设置该字段，而不是采用数据库的默认值
            </summary>
            <param name="fieldName"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.GetExtend``1(System.String,NewLife.Reflection.Func{System.String,System.Object})">
            <summary>
            获取依赖于当前实体类的扩展属性
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="key">键</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.GetExtend``1(System.String,NewLife.Reflection.Func{System.String,System.Object},System.Boolean)">
            <summary>
            获取依赖于当前实体类的扩展属性
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="key">键</param>
            <param name="func">回调</param>
            <param name="cacheDefault">是否缓存默认值，可选参数，默认缓存</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.SetExtend(System.String,System.Object)">
            <summary>
            设置依赖于当前实体类的扩展属性
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="P:XCode.Entity`1.Item(System.String)">
            <summary>
            获取/设置 字段值。
            一个索引，反射实现。
            派生实体类可重写该索引，以避免发射带来的性能损耗。
            基类已经实现了通用的快速访问，但是这里仍然重写，以增加控制，
            比如字段名是属性名前面加上_，并且要求是实体字段才允许这样访问，否则一律按属性处理。
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Entity`1.Meta">
            <summary>
            元数据
            </summary>
        </member>
        <member name="M:XCode.Entity`1.Meta.Query(System.String)">
            <summary>
            查询
            </summary>
            <param name="sql">SQL语句</param>
            <returns>结果记录集</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.Query(System.String,System.String[])">
            <summary>
            查询
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns>结果记录集</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.QueryCount(System.String)">
            <summary>
            查询记录数
            </summary>
            <param name="sql">SQL语句</param>
            <returns>记录数</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.QueryCount(XCode.DataAccessLayer.SelectBuilder)">
            <summary>
            查询记录数
            </summary>
            <param name="sb">查询生成器</param>
            <returns>记录数</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.Execute(System.String)">
            <summary>
            执行
            </summary>
            <param name="sql">SQL语句</param>
            <returns>影响的结果</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            根据条件把普通查询SQL格式化为分页SQL。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            根据条件把普通查询SQL格式化为分页SQL。
            </summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="F:XCode.Entity`1.Meta.hasCheckInitData">
            <summary>
            记录已进行数据初始化的表
            </summary>
        </member>
        <member name="M:XCode.Entity`1.Meta.CheckInitData">
            <summary>
            检查并初始化数据
            </summary>
        </member>
        <member name="M:XCode.Entity`1.Meta.BeginTrans">
            <summary>开始事务</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.Commit">
            <summary>提交事务</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.Rollback">
            <summary>回滚事务</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.FormatName(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.FormatValue(System.String,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.Meta.FormatValue(XCode.Configuration.FieldItem,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:XCode.Entity`1.Meta._Count">
            <summary>总记录数较小时，使用静态字段，较大时增加使用Cache</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.ThisType">
            <summary>实体类型</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Table">
            <summary>表信息</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.ConnName">
            <summary>链接名。线程内允许修改，修改者负责还原</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.TableName">
            <summary>表名。线程内允许修改，修改者负责还原</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.AllFields">
            <summary>所有数据属性</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Fields">
            <summary>所有绑定到数据表的属性</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.FieldNames">
            <summary>字段名列表</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Unique">
            <summary>
            唯一键，返回第一个标识列或者唯一的主键
            </summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Factory">
            <summary>
            实体操作者
            </summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.DBO">
            <summary>
            数据操作对象。
            </summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="E:XCode.Entity`1.Meta.OnDataChange">
            <summary>数据改变后触发</summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Cache">
            <summary>
            实体缓存
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Entity`1.Meta.SingleCache">
            <summary>
            单对象实体缓存。
            建议自定义查询数据方法，并从二级缓存中获取实体数据，以抵消因初次填充而带来的消耗。
            </summary>
        </member>
        <member name="P:XCode.Entity`1.Meta.Count">
            <summary>总记录数，小于1000时是精确的，大于1000时缓存10分钟</summary>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.Create">
            <summary>
            创建一个实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.LoadData(System.Data.DataSet)">
            <summary>
            加载记录集
            </summary>
            <param name="ds">记录集</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.ToList(System.Collections.ICollection)">
            <summary>
            把一个FindAll返回的集合转为实体接口列表集合
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.Find(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，查找单个实体
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.Find(System.String)">
            <summary>
            根据条件查找单个实体
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindByKey(System.Object)">
            <summary>
            根据主键查找单个实体
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindByKeyForEdit(System.Object)">
            <summary>
            根据主键查询一个实体对象用于表单编辑
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindAll">
            <summary>
            获取所有实体对象。获取大量数据时会非常慢，慎用
            </summary>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindAll(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            查询并返回实体对象集合。
            表名以及所有字段名，请使用类名以及字段对应的属性名，方法内转换为表名和列名
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindAll(System.String[],System.Object[])">
            <summary>
            根据属性列表以及对应的值列表，获取所有实体对象
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindAll(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindAll(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindAllByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，获取所有实体对象
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>实体数组</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindCount">
            <summary>
            返回总记录数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindCount(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            返回总记录数
            </summary>
            <param name="whereClause">条件，不带Where</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="selects">查询列</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindCount(System.String[],System.Object[])">
            <summary>
            根据属性列表以及对应的值列表，返回总记录数
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindCount(System.String,System.Object)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindCount(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FindCountByName(System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            根据属性以及对应的值，返回总记录数
            </summary>
            <param name="name">属性</param>
            <param name="value">值</param>
            <param name="orderClause">排序，不带Order By</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <returns>总行数</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FromXml(System.String)">
            <summary>
            导入
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FromJson(System.String)">
            <summary>
            导入
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.BeginTransaction">
            <summary>
            开始事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.Commit">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.Rollback">
            <summary>
            回滚事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FormatName(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FormatValue(System.String,System.Object)">
            <summary>
            取得一个值的Sql值。
            当这个值是字符串类型时，会在该值前后加单引号；
            </summary>
            <param name="name">字段</param>
            <param name="value">对象</param>
            <returns>Sql值的字符串形式</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.FormatValue(XCode.Configuration.FieldItem,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.MakeCondition(System.String[],System.Object[],System.String)">
            <summary>
            根据属性列表和值列表，构造查询条件。
            例如构造多主键限制查询条件。
            </summary>
            <param name="names">属性列表</param>
            <param name="values">值列表</param>
            <param name="action">联合方式</param>
            <returns>条件子串</returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.MakeCondition(System.String,System.Object,System.String)">
            <summary>
            构造条件
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Entity`1.EntityOperate.MakeCondition(XCode.Configuration.FieldItem,System.Object,System.String)">
            <summary>
            构造条件
            </summary>
            <param name="field">名称</param>
            <param name="value">值</param>
            <param name="action">大于小于等符号</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.Default">
            <summary>默认实体</summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.Table">
            <summary>
            数据表元数据
            </summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.AllFields">
            <summary>
            所有数据属性
            </summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.Fields">
            <summary>
            所有绑定到数据表的属性
            </summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.FieldNames">
            <summary>
            字段名列表
            </summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.Cache">
            <summary>实体缓存</summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.SingleCache">
            <summary>单对象实体缓存</summary>
        </member>
        <member name="P:XCode.Entity`1.EntityOperate.Count">
            <summary>总记录数</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.RemoteDb">
            <summary>
            远程数据库。一般是分为客户端服务器的中大型数据库，该类数据库支持完整的SQL92
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.RemoteDb.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.RemoteDb.ServerVersion">
            <summary>
            数据库服务器版本
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            构造分页SQL
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.PageSplitRowNumber(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            已重写。获取分页
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.PageSplitTopNotIn(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            构造分页SQL，优先选择max/min，然后选择not in
            </summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.PageSplitMaxMin(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            按唯一数字最大最小分析
            </summary>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServer.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.DbType">
            <summary>
            返回数据库类型。外部DAL数据库类请使用Other
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.IsSQL2005">
            <summary>是否SQL2005及以上</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.DateTimeMin">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.LongTextLength">
            <summary>
            长文本长度
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServer.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlServerSession">
            <summary>
            SqlServer数据库
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.RemoteDbSession">
            <summary>
            远程数据库会话
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.RemoteDbSession.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.QueryCountFast(System.String)">
            <summary>
            快速查询单表记录数，稍有偏差
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SqlServerMetaData">
            <summary>
            SqlServer元数据
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.RemoteDbMetaData">
            <summary>
            远程数据库元数据
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.RemoteDbMetaData.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.OnGetTables">
            <summary>
            取得所有表构架
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.DatabaseExist(System.String)">
            <summary>
            使用数据架构确定数据库是否存在，因为使用系统视图可能没有权限
            </summary>
            <param name="dbname"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.TableExist(XCode.DataAccessLayer.IDataTable)">
            <summary>
            使用数据架构确定数据表是否存在，因为使用系统视图可能没有权限
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SqlServerMetaData.Trim(System.String,System.String,System.String)">
            <summary>
            除去字符串两端成对出现的符号
            </summary>
            <param name="str"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServerMetaData.IsSQL2005">
            <summary>
            是否SQL2005
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServerMetaData.level0type">
            <summary>
            0级类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServerMetaData.SchemaSql">
            <summary>构架SQL</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SqlServerMetaData.DescriptionSql">
            <summary>取表说明SQL</summary>
        </member>
        <member name="T:XCode.EntityTree`1">
            <summary>
            主键为整型的实体树基类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:XCode.EntityTree`2">
            <summary>
            实体树基类，具有树形结构的实体继承该类即可得到各种树操作功能
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:XCode.IEntityTree`1">
            <summary>
            实体树接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:XCode.IEntityTree`1.Parent">
            <summary>
            父实体
            </summary>
        </member>
        <member name="P:XCode.IEntityTree`1.Childs">
            <summary>
            子实体集合
            </summary>
        </member>
        <member name="T:XCode.IEntityTreeExtend`1">
            <summary>
            实体树扩展接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:XCode.IEntityTreeExtend`1.AllChilds">
            <summary>
            子孙实体集合。以深度层次树结构输出
            </summary>
        </member>
        <member name="P:XCode.IEntityTreeExtend`1.AllParents">
            <summary>
            父亲实体集合。以深度层次树结构输出
            </summary>
        </member>
        <member name="P:XCode.IEntityTreeExtend`1.Deepth">
            <summary>
            深度
            </summary>
        </member>
        <member name="M:XCode.EntityTree`2.FindChilds">
            <summary>子节点</summary>
        </member>
        <member name="M:XCode.EntityTree`2.FindParent">
            <summary>父节点</summary>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllByParent(`0)">
            <summary>
            根据父级查找所有子级，带排序功能
            </summary>
            <param name="parentKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllNoParent">
            <summary>
            查找所有没有父节点的节点集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllChildsByParent(`0)">
            <summary>
            查找指定键的所有子节点，以深度层次树结构输出
            </summary>
            <param name="parentKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllParentsByKey(`0)">
            <summary>
            查找指定键的所有父节点，从高到底以深度层次树结构输出
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllChilds(XCode.IEntityTree{`1})">
            <summary>
            查找指定节点的所有子节点，以深度层次树结构输出
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.FindAllParents(XCode.IEntityTree{`1})">
            <summary>
            查找指定节点的所有父节点，从高到底以深度层次树结构输出
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.Contains(`0)">
            <summary>
            是否包含子节点
            </summary>
            <param name="key">子节点键值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.MakeTree(System.Web.UI.WebControls.TreeNodeCollection,XCode.EntityList{`1},System.String,NewLife.Reflection.Func{`1,System.Web.UI.WebControls.TreeNode})">
            <summary>
            创建菜单树
            </summary>
            <param name="nodes">父集合</param>
            <param name="list">菜单列表</param>
            <param name="url">格式化地址，可以使用{ID}和{Name}</param>
            <param name="func">由菜单项创建树节点的委托</param>
        </member>
        <member name="M:XCode.EntityTree`2.GetFullPath(System.Boolean)">
            <summary>
            取得全路径的实体，由上向下排序
            </summary>
            <param name="includeSelf"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.GetFullPath(System.Boolean,System.String,NewLife.Reflection.Func{`1,System.String})">
            <summary>
            取得全路径的实体，由上向下排序
            </summary>
            <param name="includeSelf">是否包含自己</param>
            <param name="separator">分隔符</param>
            <param name="func">回调</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.ClearRelation">
            <summary>
            删除子级到本级的关系。导出数据前可以先删除关系，以减少导出的大小
            </summary>
        </member>
        <member name="M:XCode.EntityTree`2.BatchSave(System.Boolean)">
            <summary>
            批量保存，保存整棵树
            </summary>
            <param name="saveSelf">是否保存自己</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.Up">
            <summary>
            排序上升
            </summary>
        </member>
        <member name="M:XCode.EntityTree`2.Down">
            <summary>
            排序下降
            </summary>
        </member>
        <member name="M:XCode.EntityTree`2.Valid">
            <summary>
            验证树形数据是否有效
            </summary>
        </member>
        <member name="M:XCode.EntityTree`2.Insert">
            <summary>
            已重载。操作前验证树形数据是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityTree`2.Update">
            <summary>
            已重载。操作前验证树形数据是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.EntityTree`2.KeyName">
            <summary>关联键名称，一般是主键，如ID</summary>
        </member>
        <member name="P:XCode.EntityTree`2.ParentKeyName">
            <summary>关联父键名，一般是Parent加主键，如ParentID</summary>
        </member>
        <member name="P:XCode.EntityTree`2.SortingKeyName">
            <summary>排序字段，默认是"Sorting", "Sort", "Rank"之一</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Sort">
            <summary>排序值</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Childs">
            <summary>子节点</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Parent">
            <summary>父节点</summary>
        </member>
        <member name="P:XCode.EntityTree`2.AllChilds">
            <summary>子孙节点</summary>
        </member>
        <member name="P:XCode.EntityTree`2.AllParents">
            <summary>父节点集合</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Deepth">
            <summary>深度</summary>
        </member>
        <member name="P:XCode.EntityTree`2.Root">
            <summary>根</summary>
        </member>
        <member name="P:XCode.EntityTree`2.ChildKeys">
            <summary>
            子级键值集合
            </summary>
        </member>
        <member name="P:XCode.EntityTree`2.ChildKeyString">
            <summary>
            逗号分隔的子级键值字符串，一般可用于SQL语句中
            </summary>
        </member>
        <member name="P:XCode.EntityTree`2.AllChildKeys">
            <summary>
            子孙键值集合
            </summary>
        </member>
        <member name="P:XCode.EntityTree`2.AllChildKeyString">
            <summary>
            逗号分隔的子孙键值字符串，一般可用于SQL语句中
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            已重写。获取分页
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.MySql.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.DbType">
            <summary>
            返回数据库类型。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.dbProviderFactory">
            <summary>
            提供者工厂
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.LongTextLength">
            <summary>
            长文本长度
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.MySql.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.MySqlSession">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.MySqlSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.MySqlMetaData">
            <summary>
            MySql元数据
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.ModelHelper">
            <summary>
            模块助手
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.GetColumn(XCode.DataAccessLayer.IDataTable,System.String)">
            <summary>
            根据字段名获取字段
            </summary>
            <param name="table"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.GetColumns(XCode.DataAccessLayer.IDataTable,System.String[])">
            <summary>
            根据字段名数组获取字段数组
            </summary>
            <param name="table"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.Connect(XCode.DataAccessLayer.IDataTable,XCode.DataAccessLayer.IDataTable)">
            <summary>
            连接两个表，实际上是猜测它们之间的关系
            </summary>
            <param name="table1"></param>
            <param name="table2"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.Fix(XCode.DataAccessLayer.IDataTable)">
            <summary>
            修正数据
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.GetIndex(XCode.DataAccessLayer.IDataTable,System.String[])">
            <summary>
            根据字段名找索引
            </summary>
            <param name="table"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.GetAlias(System.String)">
            <summary>
            获取别名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.ModelHelper.FixWord(System.String)">
            <summary>
            自动处理大小写
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.ModelHelper.CGS">
            <summary>代码生成器</summary>
        </member>
        <member name="T:XCode.WhereExpression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:XCode.WhereExpression.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:XCode.WhereExpression.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="exp"></param>
        </member>
        <member name="M:XCode.WhereExpression.And(System.String)">
            <summary>
            And操作
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.Or(System.String)">
            <summary>
            Or操作
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.AndIf(System.Boolean,System.String)">
            <summary>
            有条件And操作
            </summary>
            <param name="condition"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.OrIf(System.Boolean,System.String)">
            <summary>
            有条件Or操作
            </summary>
            <param name="condition"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.op_Implicit(XCode.WhereExpression)~System.String">
            <summary>
            类型转换
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.op_BitwiseAnd(XCode.WhereExpression,System.Object)">
            <summary>
            重载运算符实现And操作，同时通过布尔型支持AndIf
            </summary>
            <param name="exp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.WhereExpression.op_BitwiseOr(XCode.WhereExpression,System.Object)">
            <summary>
            重载运算符实现Or操作，同时通过布尔型支持OrIf
            </summary>
            <param name="exp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.WhereExpression.Builder">
            <summary>内置字符串</summary>
        </member>
        <member name="T:XCode.Cache.XCache">
            <summary>
            数据缓存类
            </summary>
        </member>
        <member name="F:XCode.Cache.XCache.Expiration">
            <summary>
            缓存相对有效期。
            -2	关闭缓存
            -1	非独占数据库，有外部系统操作数据库，使用请求级缓存；
             0	永久静态缓存；
            >0	静态缓存时间，单位是秒；
            </summary>
        </member>
        <member name="M:XCode.Cache.XCache.#cctor">
            <summary>
            初始化设置。
            读取配置；
            </summary>
        </member>
        <member name="F:XCode.Cache.XCache.AutoCheckCacheTimer">
            <summary>
            缓存维护定时器
            </summary>
        </member>
        <member name="F:XCode.Cache.XCache.CheckPeriod">
            <summary>
            维护定时器的检查周期，默认5秒
            </summary>
        </member>
        <member name="M:XCode.Cache.XCache.Check(System.Object)">
            <summary>
            维护
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCode.Cache.XCache.CreateTimer">
            <summary>
            创建定时器。
            因为定时器的原因，实际缓存时间可能要比Expiration要大
            </summary>
        </member>
        <member name="M:XCode.Cache.XCache.Add(System.String,System.Data.DataSet,System.String[])">
            <summary>
            添加数据表缓存。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ds">待缓存记录集</param>
            <param name="tableNames">表名数组</param>
        </member>
        <member name="M:XCode.Cache.XCache.Add(System.String,System.Int32,System.String[])">
            <summary>
            添加Int32缓存。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="n">待缓存整数</param>
            <param name="tableNames">表名数组</param>
        </member>
        <member name="M:XCode.Cache.XCache.Remove(System.String)">
            <summary>
            移除依赖于某个数据表的缓存
            </summary>
            <param name="tableName">数据表</param>
        </member>
        <member name="M:XCode.Cache.XCache.Remove(System.String[])">
            <summary>
            移除依赖于一组数据表的缓存
            </summary>
            <param name="tableNames"></param>
        </member>
        <member name="M:XCode.Cache.XCache.RemoveAll">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:XCode.Cache.XCache.Contain(System.String)">
            <summary>
            查找缓存中是否包含某一项
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.XCache.Item(System.String)">
            <summary>
            获取DataSet缓存
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.XCache.IntContain(System.String)">
            <summary>
            查找Int32缓存中是否包含某一项
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.XCache.IntItem(System.String)">
            <summary>
            获取Int32缓存
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Cache.XCache.CacheType">
            <summary>
            数据缓存类型
            </summary>
        </member>
        <member name="P:XCode.Cache.XCache.Count">
            <summary>
            缓存个数
            </summary>
        </member>
        <member name="T:XCode.Cache.XCacheType">
            <summary>
            数据缓存类型
            </summary>
        </member>
        <member name="F:XCode.Cache.XCacheType.Close">
            <summary>
            关闭缓存
            </summary>
        </member>
        <member name="F:XCode.Cache.XCacheType.RequestCache">
            <summary>
            请求级缓存
            </summary>
        </member>
        <member name="F:XCode.Cache.XCacheType.Infinite">
            <summary>
            永久静态缓存
            </summary>
        </member>
        <member name="F:XCode.Cache.XCacheType.Period">
            <summary>
            带有效期缓存
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            已重写。获取分页
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQL.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.DbType">
            <summary>
            返回数据库类型。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.dbProviderFactory">
            <summary>
            提供者工厂
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.LongTextLength">
            <summary>
            长文本长度
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.PostgreSQL.SystemDatabaseName">
            <summary>系统数据库名</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.PostgreSQLSession">
            <summary>
            PostgreSQL数据库
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.PostgreSQLSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.PostgreSQLMetaData">
            <summary>
            PostgreSQL元数据
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.Distributed">
            <summary>
            分布式数据库。同时操作多个数据库，多读多写，读写分析。
            支持：
            1，一主多从写入（主库同步写入从库异步写入）；
            2，多主多从写入（主库同步写入从库异步写入）；
            3，按权重分布式读取；
            </summary>
            <remarks>
            1，通过连接字符串配置读写服务器组，并加上权重，如“WriteServer='connA*1,connC*0' ReadServer='connB*8,connD'”；
            2，对于写服务器，权重大于0表示作为主服务器，操作返回值取主服务器操作总和，等于0表示作为从服务器，采用异步方式写入，不设置权重表示0，全部不设置权重表示1；
            3，对于读服务器，默认根据权重进行随机分配，不设置表示1；
            4，对于读服务器，可优先考虑最近使用的数据库
            </remarks>
        </member>
        <member name="M:XCode.DataAccessLayer.Distributed.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Distributed.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Distributed.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Distributed.GetRnd">
            <summary>
            随机数产生器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Distributed.GetReadDb">
            <summary>
            获取一个用于读取的数据库对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Distributed.DbType">
            <summary>
            返回数据库类型。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Distributed.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Distributed.WriteServers">
            <summary>写入服务器集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Distributed.ReadServers">
            <summary>读取服务器集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Distributed.Server.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Distributed.Server.Weight">
            <summary>权重</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Distributed.Server.Db">
            <summary>数据库对象</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DAL">
            <summary>数据访问层</summary>
            <remarks>
            主要用于选择不同的数据库，不同的数据库的操作有所差别。
            每一个数据库链接字符串，对应唯一的一个DAL实例。
            数据库链接字符串可以写在配置文件中，然后在Create时指定名字；
            也可以直接把链接字符串作为AddConnStr的参数传入。
            每一个数据库操作都必须指定表名以用于管理缓存，空表名或*将匹配所有缓存
            </remarks>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.WriteLog(System.String)">
            <summary>输出日志</summary>
            <param name="msg"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.WriteLog(System.String,System.Object[])">
            <summary>输出日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.WriteDebugLog(System.String)">
            <summary>输出日志</summary>
            <param name="msg"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.WriteDebugLog(System.String,System.Object[])">
            <summary>输出日志</summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.ToString">
            <summary>已重载。</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.CreateTable">
            <summary>建立数据表对象</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connName">配置名</param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Create(System.String)">
            <summary>
            创建一个数据访问层对象。以null作为参数可获得当前默认对象
            </summary>
            <param name="connName">配置名，或链接字符串</param>
            <returns>对应于指定链接的全局唯一的数据访问层对象</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.AddConnStr(System.String,System.String,System.Type,System.String)">
            <summary>添加连接字符串</summary>
            <param name="connName">连接名</param>
            <param name="connStr">连接字符串</param>
            <param name="type">实现了IDatabase接口的数据库类型</param>
            <param name="provider">数据库提供者，如果没有指定数据库类型，则有提供者判断使用哪一种内置类型</param>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.GetTypeFromConn(System.String,System.String)">
            <summary>从提供者和连接字符串猜测数据库处理器</summary>
            <param name="connStr"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Export">
            <summary>导出模型</summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Export(System.Collections.Generic.List{XCode.DataAccessLayer.IDataTable})">
            <summary>导出模型</summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Import(System.String)">
            <summary>导入模型</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SetTables">
            <summary>
            反向工程
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.CreateOperate(System.String)">
            <summary>创建实体操作接口</summary>
            <remarks>因为只用来做实体操作，所以只需要一个实例即可</remarks>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            根据条件把普通查询SQL格式化为分页SQL。
            </summary>
            <remarks>
            因为需要继承重写的原因，在数据类中并不方便缓存分页SQL。
            所以在这里做缓存。
            </remarks>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.PageSplit(XCode.DataAccessLayer.SelectBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            根据条件把普通查询SQL格式化为分页SQL。
            </summary>
            <remarks>
            因为需要继承重写的原因，在数据类中并不方便缓存分页SQL。
            所以在这里做缓存。
            </remarks>
            <param name="builder">查询生成器</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(System.String,System.String[])">
            <summary>
            执行SQL查询，返回记录集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(System.String,System.String)">
            <summary>
            执行SQL查询，返回记录集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableName">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(System.String,System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            执行SQL查询，返回分页记录集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            执行SQL查询，返回分页记录集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">唯一键。用于not in分页</param>
            <param name="tableName">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SelectCount(System.String,System.String[])">
            <summary>
            执行SQL查询，返回总记录数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SelectCount(System.String,System.String)">
            <summary>
            执行SQL查询，返回总记录数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableName">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.SelectCount(XCode.DataAccessLayer.SelectBuilder,System.String[])">
            <summary>
            执行SQL查询，返回总记录数
            </summary>
            <param name="sb">查询生成器</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Execute(System.String,System.String[])">
            <summary>
            执行SQL语句，返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">受影响的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Execute(System.String,System.String)">
            <summary>
            执行SQL语句，返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableName">受影响的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.InsertAndGetIdentity(System.String,System.String[])">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql"></param>
            <param name="tableNames">受影响的表的表名</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.InsertAndGetIdentity(System.String,System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableName">受影响的表的表名</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Select(System.Data.Common.DbCommand,System.String[])">
            <summary>
            执行CMD，返回记录集
            </summary>
            <param name="cmd">CMD</param>
            <param name="tableNames">所依赖的表的表名</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Execute(System.Data.Common.DbCommand,System.String[])">
            <summary>
            执行CMD，返回受影响的行数
            </summary>
            <param name="cmd"></param>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.BeginTransaction">
            <summary>开始事务</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Commit">
            <summary>提交事务</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DAL.Rollback">
            <summary>回滚事务</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Debug">
            <summary>是否调试</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ShowSQL">
            <summary>是否输出SQL语句，默认为XCode调试开关XCode.Debug</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.SQLPath">
            <summary>设置SQL输出的单独目录，默认为空，SQL输出到当前日志中</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ServiceProvider">
            <summary>服务提供者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.NegativeEnable">
            <summary>是否启用数据架构</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.NegativeNoDelete">
            <summary>是否启用不删除字段</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.NegativeExclude">
            <summary>要排除的链接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ConnStrs">
            <summary>链接字符串集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ProviderType">
            <summary>实现了IDatabase接口的数据库类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ConnStr">
            <summary>连接字符串</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Db">
            <summary>数据库。所有数据库操作在此统一管理，强烈建议不要直接使用该数据，在不同版本中IDatabase可能有较大改变</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Session">
            <summary>数据库会话</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.Tables">
            <summary>
            取得所有表和视图的构架信息，为了提高性能，得到的只是准实时信息，可能会有1秒到3秒的延迟
            </summary>
            <remarks>如果不存在缓存，则获取后返回；否则使用线程池线程获取，而主线程返回缓存</remarks>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.EnableCache">
            <summary>
            是否启用缓存。
            <remarks>设为false可清空缓存</remarks>
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.CacheCount">
            <summary>
            缓存个数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.QueryTimes">
            <summary>
            查询次数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.DAL.ExecuteTimes">
            <summary>
            执行次数
            </summary>
        </member>
        <member name="T:XCode.Common.Helper">
            <summary>
            助手类
            </summary>
        </member>
        <member name="M:XCode.Common.Helper.IsNullKey(System.Object)">
            <summary>
            指定键是否为空。一般业务系统设计不允许主键为空，包括自增的0和字符串的空
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.InitDataHelper">
            <summary>
            初始化数据助手，用于判断当前线程是否正在初始化之中
            </summary>
        </member>
        <member name="F:XCode.InitDataHelper.Running">
            <summary>
            是否正在运行
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            已重写。获取分页
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.FormatDateTime(System.DateTime)">
            <summary>
            已重载。格式化时间
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.FormatIdentity(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化标识列，返回插入数据时所用的表达式，如果字段本身支持自增，则返回空
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Oracle.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">表名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Oracle.DbType">
            <summary>
            返回数据库类型。外部DAL数据库类请使用Other
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Oracle.dbProviderFactory">
            <summary>
            提供者工厂
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Oracle.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Oracle.UserID">
            <summary>
            用户名UserID
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Oracle.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Oracle.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.OracleSession">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleSession.QueryCountFast(System.String)">
            <summary>
            快速查询单表记录数，稍有偏差
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.OracleMeta">
            <summary>
            Oracle元数据
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleMeta.OnGetTables">
            <summary>
            取得所有表构架
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCode.DataAccessLayer.OracleMeta.dtSequences">
            <summary>
            序列
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleMeta.CheckSeqExists(System.String)">
            <summary>
            检查序列是否存在
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.OracleMeta.GetFields(XCode.DataAccessLayer.IDataTable)">
            <summary>
            取得指定表的所有列构架
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.OracleMeta.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="T:XCode.Configuration.FieldItem">
            <summary>
            数据属性元数据以及特性
            </summary>
        </member>
        <member name="F:XCode.Configuration.FieldItem.COLUMNNAME_FLAG">
            <summary>字段名要过滤掉的标识符，考虑MSSQL、MySql、SQLite、Oracle等</summary>
        </member>
        <member name="M:XCode.Configuration.FieldItem.#ctor(XCode.Configuration.TableItem,System.Reflection.PropertyInfo)">
            <summary>
            构造函数
            </summary>
            <param name="table"></param>
            <param name="property"></param>
        </member>
        <member name="M:XCode.Configuration.FieldItem.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.Fill(XCode.DataAccessLayer.IDataColumn)">
            <summary>
            填充到XField中去
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:XCode.Configuration.FieldItem.CreateExpression(System.String,System.Object)">
            <summary>
            建立表达式
            </summary>
            <param name="action"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.Equal(System.Object)">
            <summary>
            等于
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.NotEqual(System.Object)">
            <summary>
            不等于
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.StartsWith(System.Object)">
            <summary>
            以某个字符串开始
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.EndsWith(System.Object)">
            <summary>
            以某个字符串结束
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.Contains(System.Object)">
            <summary>
            包含某个字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_GreaterThan(XCode.Configuration.FieldItem,System.Object)">
            <summary>
            大于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_LessThan(XCode.Configuration.FieldItem,System.Object)">
            <summary>
            小于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_GreaterThanOrEqual(XCode.Configuration.FieldItem,System.Object)">
            <summary>
            大于等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_LessThanOrEqual(XCode.Configuration.FieldItem,System.Object)">
            <summary>
            小于等于
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.FieldItem.op_Implicit(XCode.Configuration.FieldItem)~System.String">
            <summary>
            类型转换
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Property">
            <summary>属性元数据</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Column">
            <summary>绑定列特性</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.DataObjectField">
            <summary>数据字段特性</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Description">
            <summary>数据字段特性</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Name">
            <summary>属性名</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Type">
            <summary>属性类型</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.DeclaringType">
            <summary>属性类型</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.IsIdentity">
            <summary>是否标识列</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.PrimaryKey">
            <summary>是否主键</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.IsNullable">
            <summary>是否允许空</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Length">
            <summary>长度</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.IsDataObjectField">
            <summary>是否数据绑定列</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.ColumnName">
            <summary>
            用于数据绑定的字段名。
            默认使用BindColumn特性中指定的字段名，如果没有指定，则使用属性名。
            </summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.DefaultValue">
            <summary>默认值</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Table">
            <summary>表</summary>
        </member>
        <member name="P:XCode.Configuration.FieldItem.Field">
            <summary>字段</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Access">
            <summary>
            MS的Access文件数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.SqlServer">
            <summary>
            MS的SqlServer数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Oracle">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.MySql">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.SqlCe">
            <summary>
            SqlCe数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.SQLite">
            <summary>
            SQLite数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Firebird">
            <summary>
            Firebird数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.PostgreSQL">
            <summary>
            SqlCe数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Network">
            <summary>
            网络虚拟数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Distributed">
            <summary>
            分布式数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DatabaseType.Other">
            <summary>
            外部数据库
            </summary>
        </member>
        <member name="T:XCode.Common.HashSet`1">
            <summary>
            哈希集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:XCode.Test.MyEntity`1">
            <summary>我的基类</summary>
        </member>
        <member name="T:XCode.Test.IEntityTest">
            <summary>实体测试接口</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Guid">
            <summary>主键一</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Guid2">
            <summary>主键二</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.ID">
            <summary>自增编号</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.ID2">
            <summary>编号二</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Password">
            <summary>密码</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.IsEnable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Logins">
            <summary>登录次数</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.LastLogin">
            <summary>最后登陆</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.StartDate">
            <summary>开始日期</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.EndTime">
            <summary>结束时间</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Total">
            <summary>总数</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Item2">
            <summary>百分比</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.EntityTest2">
            <summary>实数</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Money">
            <summary>金额</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.File">
            <summary>文件</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Remark">
            <summary>备注一</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Remark2">
            <summary>备注二</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Description">
            <summary>说明</summary>
        </member>
        <member name="P:XCode.Test.IEntityTest.Item(System.String)">
            <summary>
            获取/设置 字段值。
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Test.EntityTest`1">
            <summary>实体测试</summary>
            <summary>实体测试</summary>
        </member>
        <member name="M:XCode.Test.EntityTest`1.InitData">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:XCode.Test.EntityTest`1.Test">
            <summary>
            测试主方法
            </summary>
        </member>
        <member name="M:XCode.Test.EntityTest`1.FindByKeyForEdit(System.Guid,System.String)">
            <summary>
            根据主键查询一个实体测试实体对象用于表单编辑
            </summary>
            <param name="guid">主键一</param>
            <param name="guid2">主键二</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Test.EntityTest`1.FindByName(System.String)">
            <summary>
            根据名称查找
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Test.EntityTest`1.FindAllByIsEnableAndStartDateAndEndTime(System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            根据启用、开始日期、结束时间查找
            </summary>
            <param name="isenable">启用</param>
            <param name="startdate">开始日期</param>
            <param name="endtime">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Test.EntityTest`1.FindByID(System.SByte)">
            <summary>
            根据自增编号查找
            </summary>
            <param name="id">自增编号</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Test.EntityTest`1.FindByGuidAndGuid2(System.Guid,System.String)">
            <summary>
            根据主键一、主键二查找
            </summary>
            <param name="guid">主键一</param>
            <param name="guid2">主键二</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Test.EntityTest`1.SearchWhere(System.String)">
            <summary>
            构造搜索条件
            </summary>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Guid">
            <summary>主键一</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Guid2">
            <summary>主键二</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.ID">
            <summary>自增编号</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.ID2">
            <summary>编号二</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Password">
            <summary>密码</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.IsEnable">
            <summary>启用</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Logins">
            <summary>登录次数</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.LastLogin">
            <summary>最后登陆</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.StartDate">
            <summary>开始日期</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.EndTime">
            <summary>结束时间</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Total">
            <summary>总数</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Item2">
            <summary>百分比</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.EntityTest2">
            <summary>实数</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Money">
            <summary>金额</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.File">
            <summary>文件</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Remark">
            <summary>备注一</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Remark2">
            <summary>备注二</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Description">
            <summary>说明</summary>
        </member>
        <member name="P:XCode.Test.EntityTest`1.Item(System.String)">
            <summary>
            获取/设置 字段值。
            一个索引，基类使用反射实现。
            派生实体类可重写该索引，以避免反射带来的性能损耗
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:XCode.Test.EntityTest`1._">
            <summary>取得实体测试字段信息的快捷方式</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Guid">
            <summary>主键一</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Guid2">
            <summary>主键二</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.ID">
            <summary>自增编号</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.ID2">
            <summary>编号二</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Name">
            <summary>名称</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Password">
            <summary>密码</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.DisplayName">
            <summary>显示名</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.IsEnable">
            <summary>启用</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Logins">
            <summary>登录次数</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.LastLogin">
            <summary>最后登陆</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.StartDate">
            <summary>开始日期</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.EndTime">
            <summary>结束时间</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Total">
            <summary>总数</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Item2">
            <summary>百分比</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.EntityTest2">
            <summary>实数</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Money">
            <summary>金额</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.File">
            <summary>文件</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Remark">
            <summary>备注一</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Remark2">
            <summary>备注二</summary>
        </member>
        <member name="F:XCode.Test.EntityTest`1._.Description">
            <summary>说明</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.FormatValue(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化数据为SQL数据
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Access.CheckSupport">
            <summary>
            是否支持
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Access.DbType">
            <summary>
            返回数据库类型。外部DAL数据库类请使用Other
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Access.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Access.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Access.DateTimeMin">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Access.LongTextLength">
            <summary>
            长文本长度
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.AccessSession">
            <summary>
            Access数据库
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.AccessSession.Open">
            <summary>
            打开。已重写，为了建立数据库
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.AccessSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.AccessMetaData">
            <summary>
            Access元数据
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.AccessMetaData.GetFieldDefault(XCode.DataAccessLayer.IDataColumn,System.Boolean)">
            <summary>
            取得字段默认值
            </summary>
            <param name="field"></param>
            <param name="onlyDefine">仅仅定义</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.AccessMetaData.SetSchema(XCode.DataAccessLayer.DDLSchema,System.Object[])">
            <summary>
            设置数据定义模式
            </summary>
            <param name="schema"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.AccessMetaData.CreateDatabase">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.Table">
            <summary>表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.ConnectionString">
            <summary>连接字符串</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.FileName">
            <summary>文件名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.Conn">
            <summary>链接</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.Cat">
            <summary></summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.TableDef">
            <summary>表定义</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.Dbe">
            <summary>链接</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.Db">
            <summary></summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.Columns">
            <summary>字段集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.Supported">
            <summary>
            是否支持
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOTabe.Description">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOColumn.Column">
            <summary>字段</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOColumn.Table">
            <summary>表</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOColumn.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOColumn.Description">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOColumn.Default">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOColumn.AutoIncrement">
            <summary>
            是否自增
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.ADOColumn.Nullable">
            <summary>
            是否允许空
            </summary>
        </member>
        <member name="T:XCode.Configuration.TableItem">
            <summary>
            数据表元数据
            </summary>
        </member>
        <member name="F:XCode.Configuration.TableItem._ModelCheckMode">
            <summary>模型检查模式</summary>
        </member>
        <member name="M:XCode.Configuration.TableItem.FindConnMap(System.String,System.String)">
            <summary>
            根据连接名和类名查找连接名映射
            </summary>
            <param name="connName"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.TableItem.Create(System.Type)">
            <summary>
            创建
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.TableItem.FindByName(System.String)">
            <summary>
            根据名称查找
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.Configuration.TableItem.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.Configuration.TableItem.EntityType">
            <summary>实体类型</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Table">
            <summary>绑定表特性</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Indexes">
            <summary>绑定索引特性</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Relations">
            <summary>绑定关系特性</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Description">
            <summary>说明</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.TableName">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.ConnMaps">
            <summary>连接名映射</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Fields">
            <summary>数据字段</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.AllFields">
            <summary>所有字段</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.Identity">
            <summary>标识列</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.PrimaryKeys">
            <summary>主键</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.FieldNames">
            <summary>字段名集合</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.DataTable">
            <summary>数据表架构</summary>
        </member>
        <member name="P:XCode.Configuration.TableItem.ModelCheckMode">
            <summary>模型检查模式</summary>
        </member>
        <member name="T:XCode.BindTableAttribute">
            <summary>
            用于指定数据类所绑定到的数据表的表名
            </summary>
        </member>
        <member name="M:XCode.BindTableAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">表名</param>
        </member>
        <member name="M:XCode.BindTableAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">表名</param>
            <param name="description">描述</param>
        </member>
        <member name="M:XCode.BindTableAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>
            检索应用于类型成员的自定义属性。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.BindTableAttribute.Name">
            <summary>表名</summary>
        </member>
        <member name="P:XCode.BindTableAttribute.Description">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.BindTableAttribute.ConnName">
            <summary>连接名</summary>
        </member>
        <member name="P:XCode.BindTableAttribute.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="T:XCode.Test.EntityTest">
            <summary>实体测试</summary>
        </member>
        <member name="T:XCode.Cache.SqlCache`1">
            <summary>
            SQL缓存。以SQL为Key，缓存DataSet
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.DDLSchema">
            <summary>
            数据定义模式
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.CreateDatabase">
            <summary>
            建立数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropDatabase">
            <summary>
            删除数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DatabaseExist">
            <summary>
            数据库是否存在
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.CreateTable">
            <summary>
            建立表
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropTable">
            <summary>
            删除表
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.TableExist">
            <summary>
            数据表是否存在
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AddTableDescription">
            <summary>
            添加表说明
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropTableDescription">
            <summary>
            删除表说明
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AddColumn">
            <summary>
            添加字段
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AlterColumn">
            <summary>
            修改字段
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropColumn">
            <summary>
            删除字段
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AddColumnDescription">
            <summary>
            添加字段说明
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropColumnDescription">
            <summary>
            删除字段说明
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.AddDefault">
            <summary>
            添加默认值
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropDefault">
            <summary>
            删除默认值
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.CreateIndex">
            <summary>
            建立索引
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.DropIndex">
            <summary>
            删除索引
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.BackupDatabase">
            <summary>
            备份数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DDLSchema.RestoreDatabase">
            <summary>
            还原数据库
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.XIndex">
            <summary>
            索引
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IDataIndex">
            <summary>
            数据索引。可根据索引生成查询方法，是否唯一决定该索引返回的是单个实体还是实体集合。
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataIndex.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>
            克隆到指定的数据表
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.Columns">
            <summary>
            数据列集合
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.Unique">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.PrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataIndex.Table">
            <summary>
            说明数据表
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XIndex.System#ICloneable#Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XIndex.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>
            克隆
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XIndex.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.Name">
            <summary>名称</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.Unique">
            <summary>是否唯一</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.PrimaryKey">
            <summary>是否主键</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XIndex.Table">
            <summary>表</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Firebird.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Firebird.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Firebird.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            已重写。获取分页
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Firebird.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Firebird.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Firebird.FormatIdentity(XCode.DataAccessLayer.IDataColumn,System.Object)">
            <summary>
            格式化标识列，返回插入数据时所用的表达式，如果字段本身支持自增，则返回空
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.Firebird.DbType">
            <summary>
            返回数据库类型。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Firebird.dbProviderFactory">
            <summary>
            提供者工厂
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Firebird.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Firebird.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Firebird.LongTextLength">
            <summary>
            长文本长度
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.FirebirdSession">
            <summary>
            Firebird数据库
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.FirebirdSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.FirebirdMetaData">
            <summary>
            Firebird元数据
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.FirebirdMetaData.OnGetTables">
            <summary>
            取得所有表构架
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCode.BindColumnAttribute">
            <summary>
            用于指定数据类属性所绑定到的数据表的字段名
            </summary>
        </member>
        <member name="M:XCode.BindColumnAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCode.BindColumnAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:XCode.BindColumnAttribute.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="order"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:XCode.BindColumnAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="order"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="defaultValue"></param>
            <param name="rawType"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="isUnicode"></param>
        </member>
        <member name="M:XCode.BindColumnAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>
            检索应用于类型成员的自定义属性。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.BindColumnAttribute.Order">
            <summary>顺序</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Name">
            <summary>字段名</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Description">
            <summary>描述</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.DefaultValue">
            <summary>默认值</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.RawType">
            <summary>原始数据类型</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Precision">
            <summary>精度</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.Scale">
            <summary>位数</summary>
        </member>
        <member name="P:XCode.BindColumnAttribute.IsUnicode">
            <summary>是否Unicode</summary>
        </member>
        <member name="T:XCode.Cache.EntityCache`1">
            <summary>
            实体缓存
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:XCode.Cache.IEntityCache">
            <summary>
            实体缓存接口
            </summary>
        </member>
        <member name="M:XCode.Cache.IEntityCache.Find(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.IEntityCache.FindAll(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Cache.IEntityCache.Entities">
            <summary>实体集合。因为涉及一个转换，数据量大是很耗性能，建议不要使用。</summary>
        </member>
        <member name="F:XCode.Cache.EntityCache`1.Empty">
            <summary>
            空集合
            </summary>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.Clear">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="F:XCode.Cache.EntityCache`1.Total">
            <summary>总次数</summary>
        </member>
        <member name="F:XCode.Cache.EntityCache`1.Shoot1">
            <summary>第一次命中</summary>
        </member>
        <member name="F:XCode.Cache.EntityCache`1.Shoot2">
            <summary>第二次命中</summary>
        </member>
        <member name="F:XCode.Cache.EntityCache`1.LastShow">
            <summary>最后显示时间</summary>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.ShowStatics">
            <summary>
            显示统计信息
            </summary>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.Find(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.Cache.EntityCache`1.FindAll(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.Entities">
            <summary>实体集合</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.CacheTime">
            <summary>缓存时间</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.Expriod">
            <summary>过期时间。单位是秒，默认60秒</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.FillListMethod">
            <summary>填充数据的方法</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.Asynchronous">
            <summary>异步更新</summary>
        </member>
        <member name="P:XCode.Cache.EntityCache`1.AllowNull">
            <summary>允许缓存空对象</summary>
        </member>
        <member name="T:XCode.Cache.FillListDelegate`1">
            <summary>
            填充数据的方法
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.XTable">
            <summary>
            表模型
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IDataTable">
            <summary>
            数据表
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.CreateColumn">
            <summary>
            创建数据列
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.CreateRelation">
            <summary>
            创建数据关系
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.CreateIndex">
            <summary>
            创建数据索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.GetColumn(System.String)">
            <summary>
            根据字段名获取字段
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.GetColumns(System.String[])">
            <summary>
            根据字段名数组获取字段数组
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.Connect(XCode.DataAccessLayer.IDataTable)">
            <summary>
            连接另一个表，处理两表间关系
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataTable.Fix">
            <summary>
            修正数据
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.ID">
            <summary>
            编号
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Owner">
            <summary>
            所有者
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.IsView">
            <summary>
            是否视图
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Columns">
            <summary>数据列集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Relations">
            <summary>数据关系集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.Indexes">
            <summary>数据索引集合</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataTable.PrimaryKeys">
            <summary>主键集合</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.CreateColumn">
            <summary>
            创建字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.CreateRelation">
            <summary>
            创建外键
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.CreateIndex">
            <summary>
            创建索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.GetColumn(System.String)">
            <summary>
            根据字段名获取字段
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.GetColumns(System.String[])">
            <summary>
            根据字段名数组获取字段数组
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Connect(XCode.DataAccessLayer.IDataTable)">
            <summary>
            连接另一个表，处理两表间关系
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Fix">
            <summary>
            修正数据
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Export">
            <summary>
            导出
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Import(System.String)">
            <summary>
            导入
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.System#ICloneable#Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            获取架构
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.ReadXml(System.Xml.XmlReader)">
            <summary>
            读取
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.XTable.WriteXml(System.Xml.XmlWriter)">
            <summary>
            写入
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.ID">
            <summary>
            编号
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Description">
            <summary>
            表说明
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.IsView">
            <summary>
            是否视图
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Owner">
            <summary>所有者</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Columns">
            <summary>
            字段集合。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Relations">
            <summary>
            关系集合。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.Indexes">
            <summary>
            索引集合。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XTable.PrimaryKeys">
            <summary>主键集合</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SelectBuilder">
            <summary>
            SQL查询语句生成器
            </summary>
            <remarks>查询语句的复杂性，使得多个地方使用起来极为不方面。
            应该以本类作为查询对象，直接从最上层深入到最下层</remarks>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.#ctor(XCode.DataAccessLayer.DatabaseType)">
            <summary>
            构造函数
            </summary>
            <param name="dbType"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.Parse(System.String)">
            <summary>
            分析一条SQL
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.ToString">
            <summary>
            已重写。获取本Builder所分析的SQL语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.SelectCount">
            <summary>
            获取记录数的语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SelectBuilder.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Column">
            <summary>
            选择列
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Where">
            <summary>
            条件
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.GroupBy">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.Having">
            <summary>
            分组条件
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SelectBuilder.OrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:XCode.Exceptions.XDbMetaDataException">
            <summary>
            数据库元数据异常
            </summary>
        </member>
        <member name="M:XCode.Exceptions.XDbMetaDataException.#ctor(XCode.DataAccessLayer.IMetaData)">
            <summary>
            初始化
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbMetaDataException.#ctor(XCode.DataAccessLayer.IMetaData,System.String)">
            <summary>
            初始化
            </summary>
            <param name="metadata"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbMetaDataException.#ctor(XCode.DataAccessLayer.IMetaData,System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="metadata"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:XCode.Exceptions.XDbMetaDataException.#ctor(XCode.DataAccessLayer.IMetaData,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="metadata"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:XCode.Exceptions.XDbMetaDataException.MetaData">
            <summary>数据库元数据</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.Network">
            <summary>
            网络数据库
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.Network.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Network.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.Network.UpdateInfo">
            <summary>
            请求服务器，更新基本信息到本地
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Network.DbType">
            <summary>
            返回数据库类型。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Network.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.Network.Server">
            <summary>服务端数据库对象，该对象不可以使用与会话相关的功能</summary>
        </member>
        <member name="T:XCode.DataAccessLayer.NetworkSession">
            <summary>
            网络数据库会话
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.NetworkSession.QueryWithKey(System.String)">
            <summary>
            带主键信息查询记录集
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.NetworkSession.Query(System.Data.Common.DbCommand)">
            <summary>
            不支持
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.NetworkSession.QueryCountFast(System.String)">
            <summary>
            快速查询单表记录数，稍有偏差
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.NetworkSession.Execute(System.String)">
            <summary>
            执行SQL语句，返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.NetworkSession.Execute(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand，返回受影响的行数
            </summary>
            <param name="cmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.NetworkSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="M:XCode.DataAccessLayer.NetworkSession.CreateCommand">
            <summary>
            不支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.NetworkSession.GetSchema(System.String,System.String[])">
            <summary>
            返回数据源的架构信息
            </summary>
            <param name="collectionName">指定要返回的架构的名称。</param>
            <param name="restrictionValues">为请求的架构指定一组限制值。</param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.NetworkMetaData">
            <summary>
            网络数据库元数据
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.NetworkDbServer">
            <summary>
            网络数据库服务器，处理客户端发来的数据库请求
            </summary>
        </member>
        <member name="T:XCode.EntityList`1">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="M:XCode.EntityList`1.#ctor">
            <summary>
            构造一个实体对象集合
            </summary>
        </member>
        <member name="M:XCode.EntityList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造一个实体对象集合
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:XCode.EntityList`1.#ctor(System.Int32)">
            <summary>
            构造一个实体对象集合
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:XCode.EntityList`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            初始化
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:XCode.EntityList`1.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.op_Addition(XCode.EntityList{`0},XCode.EntityList{`0})">
            <summary>
            集合相加
            </summary>
            <param name="entities1">第一个实体集合</param>
            <param name="entities2">第二个实体集合</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.op_Subtraction(XCode.EntityList{`0},XCode.EntityList{`0})">
            <summary>
            集合相减
            </summary>
            <param name="entities1">第一个实体集合</param>
            <param name="entities2">第二个实体集合</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            从集合中移除另一个集合指定的元素
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:XCode.EntityList`1.FindAll(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.FindAll(System.String[],System.Object[])">
            <summary>
            根据指定项查找
            </summary>
            <param name="names">属性名</param>
            <param name="values">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.FindAll(System.Predicate{`0})">
            <summary>
            检索与指定谓词定义的条件匹配的所有元素。
            </summary>
            <param name="match">条件</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Find(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.FindAllIgnoreCase(System.String,System.String)">
            <summary>
            根据指定项查找字符串。忽略大小写
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.FindIgnoreCase(System.String,System.String)">
            <summary>
            根据指定项查找字符串。忽略大小写
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.XCode#IEntityList#FindAll(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.XCode#IEntityList#FindAll(System.String[],System.Object[])">
            <summary>
            根据指定项查找
            </summary>
            <param name="names">属性名</param>
            <param name="values">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.XCode#IEntityList#Find(System.String,System.Object)">
            <summary>
            根据指定项查找
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.XCode#IEntityList#FindAllIgnoreCase(System.String,System.String)">
            <summary>
            根据指定项查找字符串。忽略大小写
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.XCode#IEntityList#FindIgnoreCase(System.String,System.String)">
            <summary>
            根据指定项查找字符串。忽略大小写
            </summary>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Exists(System.String,System.Object)">
            <summary>
            集合是否包含指定项
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Sort(System.String,System.Boolean)">
            <summary>
            按指定字段排序
            </summary>
            <param name="name">字段</param>
            <param name="isDesc">是否降序</param>
        </member>
        <member name="M:XCode.EntityList`1.Sort(System.String[],System.Boolean[])">
            <summary>
            按指定字段数组排序
            </summary>
            <param name="names">字段</param>
            <param name="isDescs">是否降序</param>
        </member>
        <member name="M:XCode.EntityList`1.Insert(System.Boolean)">
            <summary>
            把整个集合插入到数据库
            </summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Insert">
            <summary>
            把整个集合插入到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Update(System.Boolean)">
            <summary>
            把整个集合更新到数据库
            </summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Update">
            <summary>
            把整个集合更新到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Save(System.Boolean)">
            <summary>
            把整个保存更新到数据库
            </summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Save">
            <summary>
            把整个集合保存到数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Delete(System.Boolean)">
            <summary>
            把整个集合从数据库中删除
            </summary>
            <param name="useTransition">是否使用事务保护</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Delete">
            <summary>
            把整个集合从数据库中删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.SetItem(System.String,System.Object)">
            <summary>
            设置所有实体中指定项的值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.EntityList`1.GetItem``1(System.String)">
            <summary>
            获取所有实体中指定项的值
            </summary>
            <typeparam name="TResult">指定项的类型</typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Join(System.String,System.String)">
            <summary>
            串联指定成员，方便由实体集合构造用于查询的子字符串
            </summary>
            <param name="name"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Join(System.String)">
            <summary>
            串联
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.Export(System.IO.TextWriter)">
            <summary>
            导出
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:XCode.EntityList`1.Import(System.IO.TextReader)">
            <summary>
            导入
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.ToXml">
            <summary>
            导出Xml文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.FromXml(System.String)">
            <summary>
            导入Xml文本
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:XCode.EntityList`1.ToJson">
            <summary>
            导出Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.FromJson(System.String)">
            <summary>
            导入Json
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.ToDataTable(System.Boolean)">
            <summary>
            转为DataTable
            </summary>
            <param name="allowUpdate">是否允许更新数据，如果允许，将可以对DataTable进行添删改等操作</param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.ToDataSet">
            <summary>
            转为DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.From(System.Collections.IEnumerable)">
            <summary>
            任意集合转为实体集合
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityList`1.From``1(System.Collections.IEnumerable,NewLife.Reflection.Func{``0,`0})">
            <summary>
            拥有指定类型转换器的转换
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="collection"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.EntityList`1.EntityType">
            <summary>
            真正的实体类型。有些场合为了需要会使用IEntity。
            </summary>
        </member>
        <member name="P:XCode.EntityList`1.Factory">
            <summary>
            实体操作者
            </summary>
        </member>
        <member name="F:XCode.Cache.CacheItem`1._TableNames">
            <summary>
            所依赖的表的表名
            </summary>
        </member>
        <member name="F:XCode.Cache.CacheItem`1.CacheTime">
            <summary>
            缓存时间
            </summary>
        </member>
        <member name="M:XCode.Cache.CacheItem`1.#ctor(System.String[],`0)">
            <summary>
            构造函数
            </summary>
            <param name="tableNames"></param>
            <param name="tvalue"></param>
        </member>
        <member name="M:XCode.Cache.CacheItem`1.IsDependOn(System.String)">
            <summary>
            是否依赖于某个表
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="P:XCode.Cache.CacheItem`1.TValue">
            <summary>
            缓存的DataSet
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.IDataColumn">
            <summary>
            数据列
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.IDataColumn.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>
            克隆到指定的数据表
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.ID">
            <summary>
            顺序编号
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.RawType">
            <summary>
            原始数据类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Identity">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.NumOfByte">
            <summary>
            字节数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Scale">
            <summary>
            位数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Nullable">
            <summary>
            允许空
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.IsUnicode">
            <summary>
            是否Unicode
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.IDataColumn.Table">
            <summary>
            说明数据表
            </summary>
        </member>
        <member name="T:XCode.EntityFactory">
            <summary>
            实体工厂
            </summary>
        </member>
        <member name="M:XCode.EntityFactory.Create(System.String)">
            <summary>
            创建指定类型的实例
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.Create(System.Type)">
            <summary>
            创建指定类型的实例
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.CreateOperate(System.String)">
            <summary>
            创建实体操作接口
            </summary>
            <remarks>因为只用来做实体操作，所以只需要一个实例即可</remarks>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.CreateOperate(System.Type)">
            <summary>
            创建实体操作接口
            </summary>
            <remarks>因为只用来做实体操作，所以只需要一个实例即可</remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.Register(System.Type,XCode.IEntityOperate)">
            <summary>
            使用指定的实体对象创建实体操作接口，主要用于Entity内部调用，避免反射带来的损耗
            </summary>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.LoadEntities">
            <summary>
            列出所有实体类
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.GetEntitiesByConnName(System.String)">
            <summary>
            获取指定连接名下的所有实体类
            </summary>
            <param name="connName"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.IsCommonEntity(System.Type)">
            <summary>
            是否普通实体类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.EntityFactory.EnsureInit(System.Type)">
            <summary>
            确保实体类已经执行完静态构造函数，因为那里实在是太容易导致死锁了
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:XCode.DirtyCollection">
            <summary>脏属性集合</summary>
            <remarks>实现IDictionary接口，为了让使用者能直接使用重载了的索引器</remarks>
        </member>
        <member name="P:XCode.DirtyCollection.Item(System.String)">
            <summary>
            获取或设置与指定的属性是否有脏数据。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.XField">
            <summary>
            字段构架
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XField.Create(XCode.DataAccessLayer.IDataTable)">
            <summary>
            为制定表创建字段
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XField.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XField.System#ICloneable#Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XField.Clone(XCode.DataAccessLayer.IDataTable)">
            <summary>
            克隆
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.ID">
            <summary>
            顺序编号
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.FieldType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.RawType">
            <summary>
            原始数据类型
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Identity">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.NumOfByte">
            <summary>
            字节数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Scale">
            <summary>
            位数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Nullable">
            <summary>
            允许空
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.IsUnicode">
            <summary>
            是否Unicode
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XField.Table">
            <summary>表</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.OnCreateSession">
            <summary>
            创建数据库会话
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.OnCreateMetaData">
            <summary>
            创建元数据对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.PageSplit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            已重写。获取分页
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startRowIndex">开始行，0表示第一行</param>
            <param name="maximumRows">最大返回行数，0表示所有行</param>
            <param name="keyColumn">主键列。用于not in分页</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.FormatDateTime(System.DateTime)">
            <summary>
            格式化时间为SQL字符串
            </summary>
            <param name="dateTime">时间值</param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLite.FormatKeyWord(System.String)">
            <summary>
            格式化关键字
            </summary>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.DbType">
            <summary>返回数据库类型。</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.dbProviderFactory">
            <summary>提供者工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.Factory">
            <summary>工厂</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.IsMemoryDatabase">
            <summary>是否内存数据库</summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.DateTimeNow">
            <summary>
            当前时间函数
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.SQLite.DateTimeMin">
            <summary>
            最小时间
            </summary>
        </member>
        <member name="T:XCode.DataAccessLayer.SQLiteSession">
            <summary>
            SQLite数据库
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.SQLiteSession.RetryTimes">
            <summary>
            文件锁定重试次数
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteSession.Execute(System.String)">
            <summary>
            已重载。增加锁
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteSession.Execute(System.Data.Common.DbCommand)">
            <summary>
            已重载。增加锁
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteSession.InsertAndGetIdentity(System.String)">
            <summary>
            执行插入语句并返回新增行的自动编号
            </summary>
            <param name="sql">SQL语句</param>
            <returns>新增行的自动编号</returns>
        </member>
        <member name="T:XCode.DataAccessLayer.SQLiteMetaData">
            <summary>
            SQLite元数据
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.SQLiteMetaData.DropIndexSQL(XCode.DataAccessLayer.IDataIndex)">
            <summary>
            删除索引方法
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.DbFactory">
            <summary>
            数据库工厂
            </summary>
        </member>
        <member name="F:XCode.DataAccessLayer.DbFactory.dbs">
            <summary>内建数据库</summary>
        </member>
        <member name="M:XCode.DataAccessLayer.DbFactory.Register(XCode.DataAccessLayer.DatabaseType,XCode.DataAccessLayer.IDatabase)">
            <summary>
            注册数据库提供者
            </summary>
            <param name="dbType"></param>
            <param name="db"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.DbFactory.Create(XCode.DataAccessLayer.DatabaseType)">
            <summary>
            根据数据库类型创建提供者
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:XCode.DataAccessLayer.XDbConnectionStringBuilder">
            <summary>
            连接字符串构造器
            </summary>
            <remarks>未稳定，仅供XCode内部使用，不建议外部使用</remarks>
        </member>
        <member name="M:XCode.DataAccessLayer.XDbConnectionStringBuilder.Add(System.String,System.String)">
            <summary>
            已重载。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.XDbConnectionStringBuilder.Remove(System.String)">
            <summary>
            已重载。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XCode.DataAccessLayer.XDbConnectionStringBuilder.Clear">
            <summary>
            已重载。
            </summary>
        </member>
        <member name="M:XCode.DataAccessLayer.XDbConnectionStringBuilder.TryGetValue(System.String,System.String@)">
            <summary>
            尝试获取值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XDbConnectionStringBuilder.TryGetAndRemove(System.String,System.String@)">
            <summary>
            获取并删除连接字符串中的项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCode.DataAccessLayer.XDbConnectionStringBuilder.ToString">
            <summary>
            已重载。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.XDbConnectionStringBuilder.Keys">
            <summary>
            已重载。
            </summary>
        </member>
        <member name="P:XCode.DataAccessLayer.XDbConnectionStringBuilder.Item(System.String)">
            <summary>
            已重载。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:XCode.DataAccessLayer.XDbConnectionStringBuilder.ConnectionString">
            <summary>连接字符串</summary>
        </member>
    </members>
</doc>
