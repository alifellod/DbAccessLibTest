<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PWMIS.Core</name>
    </assembly>
    <members>
        <member name="T:PWMIS.DataMap.Entity.EntityCommand">
            <summary>
            实体类命令，将实体类转换成合适的SQL更新语句和参数
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.EntityCommand.IdentityEnable">
            <summary>
            插入数据的时候是否插入自增列，默认否
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityCommand.TargetFields">
            <summary>
            要操作的目标表的所有字段名
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityCommand.CreateTableCommand">
            <summary>
            获取创建表的命令脚本
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.SqlMap.XmlCommand">
            <summary>
            SQL-MAP XML命令类
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.XmlCommand.#ctor(System.String,PWMIS.Common.DBMSType)">
            <summary>
            构造函数
            </summary>
            <param name="SqlTextPath">配置文件路径</param>
            <param name="ScriptType">数据类型</param>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.XmlCommand.GetCommand(System.String)">
            <summary>
            获取命令，通过命令名或者带命名组名称的命令名，获取命令信息
            </summary>
            <param name="CommandName"></param>
            <returns>命令文本</returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.ScriptType">
            <summary>
            数据库脚本类型，符合 enumScriptType 的枚举类型
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.CommandType">
            <summary>
            获取脚本的命令类型
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.CommandClassName">
            <summary>
            获取脚本的命令组(class)名称
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.CommandName">
            <summary>
            获取脚本的命令名称
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.QueryType">
            <summary>
            获取脚本的查询类型，通常是 Select,Delete,Update 等
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.ErrDescription">
            <summary>
            获取错误信息
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.QueryString">
            <summary>
            获取命令表示的查询字符串，通常是一个带参数的命令文本或存储过程
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.XmlCommand.SqlTextPath">
            <summary>
            SQL脚本配置文件的路径
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.DataMap.Entity.Entity">
            <summary>
            PWMIS 实体类 基类,该类在 PDF.NET 4.0中已经过时。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.Entity._propertyList">
            <summary>
            属性-值列表，键 不区分大小写
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.getProperty(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.AddProperty(System.String,System.Object)">
            <summary>
            增加属性及其默认值
            </summary>
            <param name="name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.setProperty(System.String,System.Object)">
            <summary>
            设置属性
            </summary>
            <param name="name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.dbSetProperty(System.String,System.Object)">
            <summary>
            从数据库设置属性值
            </summary>
            <param name="name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.setProperty(System.String,System.String,System.Int32)">
            <summary>
            设置属性，如果值是字符类型且设置了最大长度大于0，那么不允许设置大于此长度的字符串
            </summary>
            <param name="name">字段名称</param>
            <param name="Value">值</param>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.Entity.OnPropertyGeting(System.String)">
            <summary>
            获取属性的时候
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.IdentityName">
            <summary>
            标识字段名称（有些数据库可能内置不支持），该字段不可更新，但是插入数据的时候可以获取该字段
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.PrimaryKeys">
            <summary>
            主键字段名称列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.PropertyList">
            <summary>
            获取属性列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.PropertyChangedList">
            <summary>
            获取值改变的属性
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.Entity.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="E:PWMIS.DataMap.Entity.Entity.PropertyChanged">
            <summary>
            属性改变事件
            </summary>
        </member>
        <member name="E:PWMIS.DataMap.Entity.Entity.PropertyGetting">
            <summary>
            属性获取事件
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.PropertyGettingEventArgs">
            <summary>
            属性获取事件
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PropertyGettingEventArgs.#ctor(System.String)">
            <summary>
            以属性名称初始化本类
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:PWMIS.DataMap.Entity.PropertyGettingEventArgs.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.SqlServerCe">
            <summary>
            SqlServerCe 数据处理
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.AdoHelper">
            <summary>
            公共数据访问抽象类 兼容 AdoHelper 类 ,实例使用方法参见 PWMIS.CommonDataProvider.Adapter.MyDB
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.CommonDB">
            <summary>
            公共数据访问基础类
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetDBMSType(PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            根据数据库实例获取数据库类型枚举
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.CreateInstance(System.String,System.String)">
            <summary>
            创建公共数据访问类的实例
            </summary>
            <param name="providerAssembly">提供这程序集名称</param>
            <param name="providerType">提供者类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetConnection">
            <summary>
            获取事务的数据连结对象
            </summary>
            <returns>数据连结对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetDbConnection">
            <summary>
            获取数据库连接对象实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetConnection(System.String)">
            <summary>
            获取数据连结对象实例
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns>数据连结对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            获取一个新参数对象
            </summary>
            <param name="paraName">参数名字</param>
            <param name="dbType">数据库数据类型</param>
            <param name="size">字段大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Data.DbType)">
            <summary>
            获取一个新参数对象
            </summary>
            <param name="paraName">参数名字</param>
            <param name="dbType">>数据库数据类型</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Object)">
            <summary>
            根据参数名和值返回参数一个新的参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="Value">参数值</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数值</param>
            <param name="size">参数大小</param>
            <param name="paraDirection">参数输出类型</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte)">
            <summary>
            获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数值的长度</param>
            <param name="paraDirection">参数的输入输出类型</param>
            <param name="precision">参数值参数的精度</param>
            <param name="scale">参数的小数位位数</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetNativeDbTypeName(System.Data.IDataParameter)">
            <summary>
            获取当前数据库类型的参数数据类型名称
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetSchema(System.String,System.String[])">
            <summary>
            返回此 SqlConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称，可以为空</param>
            <param name="restrictionValues">请求的架构的一组限制值，可以为空</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetSPDetail(System.String)">
            <summary>
            获取存储过程、函数的定义内容，如果子类支持，需要在子类中重写
            </summary>
            <param name="spName">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetViweDetail(System.String)">
            <summary>
            获取视图定义，如果子类支持，需要在子类中重写
            </summary>
            <param name="viewName">视图名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.BeginTransaction">
            <summary>
            打开连接并开启事务
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开启事务并指定事务隔离级别
            </summary>
            <param name="ilevel"></param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.Commit">
            <summary>
            提交事务并关闭连接
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.Rollback">
            <summary>
            回滚事务并关闭连接
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.OpenSession">
            <summary>
            打开一个数据库连接会话，你可以在其中执行一系列AdoHelper查询
            </summary>
            <returns>连接会话对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.CloseSession">
            <summary>
            关闭连接会话
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.PrepareSQL(System.String@)">
            <summary>
            对应SQL语句进行其它的处理，例如将SQLSERVER的字段名外的中括号替换成数据库特定的字符。该方法会在执行查询前调用，默认情况下不进行任何处理。
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.GetPreparedSQL(System.String)">
            <summary>
            获取经过本地数据库类型处理过的SQL语句
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.CompleteCommand(System.Data.IDbCommand,System.String@,System.Data.CommandType@,System.Data.IDataParameter[]@)">
            <summary>
            完善命令对象,处理命令对象关联的事务和连接，如果未打开连接这里将打开它
            注意：为提高效率，不再继续内部进行参数克隆处理，请多条SQL语句不要使用同名的参数对象
            </summary>
            <param name="cmd">命令对象</param>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行不返回值的查询，如果此查询出现了错误并且设置 OnErrorThrow 属性为 是，将抛出错误；否则将返回 -1，此时请检查ErrorMessage属性；
            如果此查询在事务中并且出现了错误，将根据 OnErrorRollback 属性设置是否自动回滚事务。
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteNonQuery(System.String)">
            <summary>
            执行不返回值的查询，如果此查询出现了错误，将返回 -1，此时请检查ErrorMessage属性；
            如果此查询在事务中并且出现了错误，将根据 OnErrorRollback 属性设置是否自动回滚事务。
            </summary>
            <param name="SQL">SQL</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteInsertQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Object@)">
            <summary>
            执行插入数据的查询，仅限于Access，SqlServer
            </summary>
            <param name="SQL">插入数据的SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <param name="ID">要传出的本次操作的新插入数据行的主键ID值</param>
            <returns>本次查询受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteInsertQuery(System.String,System.Object@)">
            <summary>
            执行插入数据的查询
            </summary>
            <param name="SQL">插入数据的SQL</param>
            <param name="ID">要传出的本次操作的新插入数据行的主键ID值</param>
            <returns>本次查询受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行返回单一值得查询
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteScalar(System.String)">
            <summary>
            执行返回单一值得查询
            </summary>
            <param name="SQL">SQL</param>
            <returns>查询结果</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行返回数据集的查询
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSetSchema(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行返回数据架构的查询，注意，不返回任何行
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>数据架构</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSetWithSchema(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行查询,并返回具有数据架构的数据集(整个过程仅使用一次连接)
            </summary>
            <param name="SQL">查询语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">查询参数</param>
            <returns>具有数据架构的数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSetWithSchema(System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Data.DataSet)">
            <summary>
            执行查询,并以指定的(具有数据架构的)数据集来填充数据
            </summary>
            <param name="SQL">查询语句</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">查询参数</param>
            <param name="schemaDataSet">指定的(具有数据架构的)数据集</param>
            <returns>具有数据的数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataSet(System.String)">
            <summary>
            执行返回数据集的查询
            </summary>
            <param name="SQL">SQL</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReaderWithSingleRow(System.String)">
            <summary>
            返回单一行的数据阅读器
            </summary>
            <param name="SQL">SQL</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReaderWithSingleRow(System.String,System.Data.IDataParameter[])">
            <summary>
            返回单一行的数据阅读器
            </summary>
            <param name="SQL">SQL</param>
            <param name="paras">参数</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReader(System.String)">
            <summary>
            根据查询返回数据阅读器对象，在非事务过程中，阅读完以后会自动关闭数据库连接
            </summary>
            <param name="SQL">SQL</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReader(System.String,System.Data.CommandBehavior)">
            <summary>
            根据查询返回数据阅读器对象
            </summary>
            <param name="SQL">SQL</param>
            <param name="cmdBehavior">对查询和返回结果有影响的说明</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            根据查询返回数据阅读器对象
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.ExecuteDataReader(System.String@,System.Data.CommandType,System.Data.CommandBehavior,System.Data.IDataParameter[]@)">
            <summary>
            根据查询返回数据阅读器对象
            </summary>
            <param name="SQL">SQL</param>
            <param name="commandType">命令类型</param>
            <param name="cmdBehavior">对查询和返回结果有影响的说明</param>
            <param name="parameters">参数数组</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommonDB.CloseConnection(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            关闭连接
            </summary>
            <param name="conn">连接对象</param>
            <param name="cmd">命令对象</param>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.CommandTimeOut">
            <summary>
            执行SQL查询的超时时间，单位秒。不设置则取默认时间，详见MSDN。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.CurrentDBMSType">
            <summary>
            当前数据库的类型枚举
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ElapsedMilliseconds">
            <summary>
            获取最近一次执行查询的所耗费的时间，单位：毫秒
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.InsertKey">
            <summary>
            在插入具有自增列的数据后，获取刚才自增列的数据的方式，默认使用 @@IDENTITY，在其它具体数据库实现类可能需要重写该属性或者运行时动态指定。
            在SqlServer，默认使用SCOPE_IDENTITY()，可根据情况设置。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ConnectionString">
            <summary>
            数据连结字符串
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.DataWriteConnectionString">
            <summary>
            写入数据的连接字符串，ExecuteNoneQuery 方法将自动使用该连接
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ConnectionStringBuilder">
            <summary>
            获取连接字符串构造类
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ConnectionUserID">
            <summary>
            连接数据库用户的ID
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.ErrorMessage">
            <summary>
            数据操作的错误信息，请在每次查询后检查该信息。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.OnErrorRollback">
            <summary>
            在事务执行期间，更新过程如果出现错误，是否自动回滚事务。默认为是。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.OnErrorThrow">
            <summary>
            查询出现错误是否是将错误抛出。默认为是。
            如果设置为否，将简化调用程序的异常处理，但是请检查每次更新后受影响的结果数和错误信息来决定你的程序逻辑。
            如果在事务执行期间，期望出现错误后立刻结束处理，请设置本属性为 是。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.Transaction">
            <summary>
            获取或者设置事务对象
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.GetParameterChar">
            <summary>
            获取参数名的标识字符，默认为SQLSERVER格式，如果其它数据库则可能需要重写该属性
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommonDB.SqlServerCompatible">
            <summary>
            SQL SERVER 兼容性设置，默认为兼容。该特性可以将SQLSERVER的语句移植到其它其它类型的数据库，例如字段分隔符号，日期函数等。
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.CreateHelper(System.String,System.String)">
            <summary>
            创建公共数据访问类的实例
            </summary>
            <param name="providerAssembly">提供这程序集名称</param>
            <param name="providerType">提供者类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行不返回值的查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行不返回值的查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <param name="parameters">参数数组</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行数据阅读器查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <param name="parameters">参数数组</param>
            <returns>数据阅读器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行返回数据集的查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <param name="parameters">参数数组</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行返回数据集的查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.AdoHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行返回单一值得查询
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="SQL">SQL</param>
            <param name="parameters">参数数组</param>
            <returns>结果</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServerCe.GetSchema(System.String,System.String[])">
            <summary>
            返回此 SqlConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.SqlServerCe.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.SqlMap.SqlMapper">
            <summary>
            SQL-程序代码映射类
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.ParamsMap(System.Int32)">
            <summary>
            参数映射，用于表示参数对应的“属性类”
            </summary>
            <param name="index">元素索引</param>
            <value></value>
            <returns>参数结构</returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetScriptInfo(System.String)">
            <summary>
            解析SQL脚本信息，分析其中的参数数目，必须先在GetParameters 之前调用
            </summary>
            <param name="SqlMapScript">SQL脚本信息</param>
            <remarks>
            Dim SqlScript As String = "
            UPDATE EngineState SET 
            DoneLink=#DoneLink:String,String,10#,FoundLink=#FoundLink:String#,SiteCount=#SiteCount:String#,
            Formation=#Formation#,ReaderPoint=#ReaderPoint#,UseTime=#UseTime#,
            WHERE PlanID=#PlanID:Int32# "
            </remarks>
            <returns>解析后的原始SQL语句</returns>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetParameters(System.String)">
            <summary>
            根据SQL脚本，获取参数（带类型）列表
            </summary>
            <param name="SqlMapScript">SQL脚本</param>
            <returns>参数（带类型）列表</returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.Type2DbType(System.String)">
            <summary>
            系统类型到数据库类型转换
            </summary>
            <param name="strSystemType"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetDefaultSize(System.Data.DbType)">
            <summary>
            获取默认的数据类型长度
            </summary>
            <param name="dbType"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetCommandInfo(System.String)">
            <summary>
            获得配置命令信息
            </summary>
            <param name="XmlCommandName">配置文件中的命令名称</param>
            <returns>命令信息</returns>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.FindWords(System.String,System.Int32,System.Int32)">
            <summary>
            从输入字符串中寻找一个单词，忽略前面的空白字符，直到遇到单词之后第一个空白字符或者分割符或者标点符号为止。
            </summary>
            <param name="inputString">输入的字符串</param>
            <param name="startIndex">在输入字符串中要寻找单词的起始位置</param>
            <param name="maxLength">单词的最大长度，忽略超出部分</param>
            <returns>找到的新单词</returns>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.GetCommandInfoBySqlMapScript(System.String)">
            <summary>
            根据SQL-MAP脚本获取命令信息，注意不包含命令类型
            </summary>
            <param name="SqlMapScript">SQL-MAP脚本</param>
            <returns>命令信息</returns>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.ResultMapEntity(System.Data.IDataReader,PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            将DataReader中的结果数据映射到实体对象
            </summary>
            <param name="reader">数据阅读器</param>
            <param name="result">实体对象实例</param>
            <returns>填充后的实体对象</returns>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.SqlMapper.ResultMapEntityList(System.Data.IDataReader,PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            将DataReader中的结果数据映射到实体对象集合，建议使用 EntityQuery泛型类来获取实体类集合
            </summary>
            <param name="reader">数据阅读器</param>
            <param name="result">实体对象实例</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ParaChar">
            <summary>
            SQL变量前导字符
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ResultClass">
            <summary>
            结果类型
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.EmbedAssemblySource">
            <summary>
            获取或者设置要嵌入编译的程序集名称，格式为 “程序集名称,默认命名空间.文件名.扩展名”
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ResultMap">
            <summary>
            结果映射的实体类名称
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ParamsScript">
            <summary>
            带参数描述信息的参数脚本数组
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ParamsReplaceable">
            <summary>
            当前需要替换字符串的参数
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.DataBase">
            <summary>
            获取或者设置数据库访问对象
            </summary>
            <value>据库访问对象</value>
            <returns>据库访问对象</returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.CommandClassName">
            <summary>
            获取或设置配置文件中的命令组（类）名称
            </summary>
            <value>命令组（类）名称</value>
            <returns>命令组（类）名称</returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.ParasLenth">
            <summary>
            获取参数数目
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.DataBaseType">
            <summary>
            获取或者设置数据库类型
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.SqlMapFile">
            <summary>
            获取或设置SQL Map 配置文件地址
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.SqlMapper.SqlMapScript">
            <summary>
            SQL-MAP 配置脚本文件内容
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.DataMap.Entity.QueryParameter">
            <summary>
            查询参数类
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter.#ctor(System.String,PWMIS.Common.enumCompare,System.Object)">
            <summary>
            使用参数构造本类
            </summary>
            <param name="filedName">字段名</param>
            <param name="compareType">比较类型</param>
            <param name="fieldValue">字段值</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter.#ctor(System.String,System.String,System.Object)">
            <summary>
            使用比较字符串构造本类
            </summary>
            <param name="filedName">字段名</param>
            <param name="compareTypeString">比较字符串，比如=，like，is 等SQL比较符号</param>
            <param name="fieldValue">要比较的值</param>
        </member>
        <member name="P:PWMIS.DataMap.Entity.QueryParameter.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.QueryParameter.FieldValue">
            <summary>
            字段值
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.QueryParameter.CompareType">
            <summary>
            比较类型
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.QueryParameter`1">
            <summary>
            查询参数泛型类  QueryParameter&lt;T&gt;
            </summary>
            <example>
            <code>
            //实体类 Customers
            Northwind.Customers cm = new Northwind.Customers();
            cm.Country="中国";
            ....
            
            QueryParameter&lt;Northwind.Customers&gt; qp = new QueryParameter&lt;Northwind.Customers&gt;(cm);
            
            QueryParameter para1=qp.CreatePrameter(cm.Country)
            QueryParameter para2=qp.CreatePrameter(cm.City, enumCompare.Like, "%" + txtCity.Text + "%")
            
            QueryParameter[] paras={para1,para2};
            
            OQL q = OQL.From(cm).Select().Where(queryParas).END;
            
            //获取查询结果列表
            return  EntityQuery&lt;Northwind.Customers&gt;.QueryList(q);
            </code>
            </example>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.#ctor(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            以一个实体类初始化本类
            </summary>
            <param name="entity">实体类实例</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.CreatePrameter(System.Object,PWMIS.Common.enumCompare,System.Object)">
            <summary>
            构造实体查询参数
            </summary>
            <param name="entityProperty">实体类的属性</param>
            <param name="compareType">要比较的类型枚举</param>
            <param name="fieldValue">要比较的值</param>
            <returns>实体查询参数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.CreatePrameter(System.Object,PWMIS.Common.enumCompare)">
            <summary>
            构造实体查询参数，指定要比较的类型，以当前实体属性的值为比较的值。
            </summary>
            <param name="entityProperty">实体类的属性</param>
            <param name="compareType">要比较的类型枚举</param>
            <returns>实体查询参数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.CreatePrameter(System.Object)">
            <summary>
            构造实体查询参数，将以“等于”为比较条件，以当前实体属性的值为比较的值。
            </summary>
            <param name="entityProperty">实体类的属性</param>
            <returns>实体查询参数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.QueryParameter`1.CreatePrameter(System.Object,System.String,System.Object)">
            <summary>
            构造实体查询参数
            </summary>
            <param name="entityProperty">实体类的属性</param>
            <param name="compareTypeString">要比较的SQL 条件比较字符串。</param>
            <param name="fieldValue">要比较的值</param>
            <returns>实体查询参数</returns>
        </member>
        <member name="T:PWMIS.DataProvider.Data.SqlServer">
            <summary>
            SqlServer 数据处理
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetSchema(System.String,System.String[])">
            <summary>
            返回此 SqlConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetSPDetail(System.String)">
            <summary>
            获取存储过程的定义内容
            </summary>
            <param name="spName">存储过程名称</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.GetViweDetail(System.String)">
            <summary>
            获取视图定义，如果子类支持，需要在子类中重写
            </summary>
            <param name="viewName">视图名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.BulkCopy(System.Data.IDataReader,System.String,System.String,System.Int32)">
            <summary>
            SQL批量复制
            </summary>
            <param name="sourceReader">数据源的DataReader</param>
            <param name="connectionString">目标数据库的连接字符串</param>
            <param name="destinationTableName">要导入的目标表名称</param>
            <param name="batchSize">每次批量处理的大小</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.BulkCopy(System.Data.DataTable,System.String,System.String,System.Int32)">
            <summary>
            SQL批量复制
            </summary>
            <param name="sourceTable">数据源表</param>
            <param name="connectionString">目标数据库的连接字符串</param>
            <param name="destinationTableName">要导入的目标表名称</param>
            <param name="batchSize">每次批量处理的大小</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.SqlServer.ExecuteInsertQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Object@)">
            <summary>
            SqlServer 执行插入数据的查询，如果执行成功，受影响的行数只会返回1
            </summary>
            <param name="SQL">插入数据的SQL</param>
            <param name="commandType">命令类型</param>
            <param name="parameters">参数数组</param>
            <param name="ID">要传出的本次操作的新插入数据行的主键ID值</param>
            <returns>本次查询受影响的行数</returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.SqlServer.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="T:PWMIS.Common.DBMSType">
            <summary>
            数据库管理系统枚举
            </summary>
        </member>
        <member name="T:PWMIS.Common.DataSourceType">
            <summary>
            数据源类型
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Adapter.MyDB">
            <summary>
            应用程序数据访问实例，提供单例模式和工厂模式创建实例对象，根据应用程序配置文件自动创建特定的数据访问对象。
            2008.5.23 增加动态数据集更新功能,7.24增加线程安全的静态实例。
            2009.4.1  增加SQLite 数据库支持。
            2010.1.6  增加 connectionStrings 配置支持
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper">
            <summary>
            通过配置文件获得数据访问对象实例，
            请在应用程序配置文件中创建 EngineType 键，值为[DB]，同时需要创建 [DB]HelperAssembly，[DB]HelperType ，[DB]ConnectionString 键，[DB]值为SQLSERVER/OLEDB/ODBC/ORACLE 之一
            如果未指定 EngineType 键，则使用 connectionStrings 配置节的第一个连接配置信息，必须指明 providerName，可以使用下面的形式：
            providerName="PWMIS.DataProvider.Data.SqlServer,PWMIS.Core"
            也可以直接使用 下面的形式：
            providerName="SqlServer" ，当然，这种形式的提供程序程序集默认就是 PWMIS.CommonDataProvider.Data 。
            如果有多个，默认取最后一个 providerName
            </summary>
            <returns>数据访问对象实例</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelperByConnectionName(System.String)">
            <summary>
            从 connectionStrings 配置节获取指定 数据连接名称的数据访问对象实例
            </summary>
            <param name="name">数据连接名称</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelperByProviderString(System.String,System.String)">
            <summary>
            根据提供程序名称字符串和连接字符串，创建提供程序实例
            </summary>
            <param name="providerName">供程序名称字符串，格式为：提供程序全名称,程序集名称</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper(System.String,System.String)">
            <summary>
            通过指定的数据库类型（值为SQLSERVER/OLEDB/ODBC/ORACLE 之一）和连接字符串创建一个新的数据访问对象，
            需要配置[DB]HelperAssembly，[DB]HelperType 键，[DB]值为SQLSERVER/OLEDB/ODBC/ORACLE 之一
            </summary>
            <param name="EngineType">数据库类型（值为SQLSERVER/OLEDB/ODBC/ORACLE 之一）</param>
            <param name="ConnectionString">连接字符串</param>
            <returns>数据访问对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper(PWMIS.Common.DBMSType,System.String)">
            <summary>
            根据数据库管理系统枚举类型和连接字符串创建一个新的数据访问对象实例
            </summary>
            <param name="DbmsType">数据库类型媒介，有ACCESS/MYSQL/ORACLE/SQLSERVER/SYSBASE/UNKNOWN </param>
            <param name="ConnectionString">连接字符串</param>
            <returns>数据访问对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper(System.String,System.String,System.String)">
            <summary>
            根据程序集名称和数据访问对象类型创建一个新的数据访问对象实例。
            </summary>
            <param name="HelperAssembly">程序集名称</param>
            <param name="HelperType">数据访问对象类型</param>
            <param name="ConnectionString">连接字符串</param>
            <returns>数据访问对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBHelper(System.String)">
            <summary>
            获得数据访问对象实例，EngineType值为SQLSERVER/OLEDB/ODBC/ORACLE 之一，默认使用 PWMIS.CommonDataProvider.Data.SqlServer
            </summary>
            <param name="EngineType">数据库引擎类型</param>
            <returns>数据访问对象实例</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetConnectionString">
            <summary>
            获得数据访问连接字符串，请在应用程序配置文件中创建 EngineType，[DB]HelperAssembly，[DB]HelperType ,[DB]ConnectionString键，值为SQLSERVER/OLEDB/ODBC/ORACLE 之一
            如果没有找到 [DB]ConnectionString 键，也可以直接使用 ConnectionString 键
            </summary>
            <returns>数据访问连接字符串</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateDataSet(System.Data.DataSet)">
            <summary>
            更新数据集(采用参数形式)，数据表如果指定了主键那么执行更新操作，否则执行插入操作。
            </summary>
            <param name="ds">数据集</param>
            <returns>查询结果受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SaveDataSet(System.Data.DataSet,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            自动将数据集中的数据更新或者插入到数据库
            <remarks>更新时间：2011.11.16</remarks>
            </summary>
            <param name="ds"></param>
            <param name="DB"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.DeleteDataSet(System.Data.DataSet,System.String,System.String)">
            <summary>
            根据数据集中在指定的表中，根据表中的指定列的值在数据源中删除数据
            </summary>
            <param name="ds">数据集</param>
            <param name="tableName">表名称</param>
            <param name="columnName">列名</param>
            <returns>查询所影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateDataSet(System.Data.DataSet,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新数据集，带数据访问对象
            </summary>
            <param name="ds">数据集</param>
            <param name="DB">数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.DeleteDataSet(System.Data.DataSet,System.String,System.String,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            根据数据集中在指定的表中，根据表中的指定列的值在数据源中删除数据,带数据访问对象
            </summary>
            <param name="ds">数据集</param>
            <param name="tableName">表名称</param>
            <param name="columnName">列名</param>
            <param name="DB">数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SelectDataSet(System.String,System.String[],System.Object[])">
            <summary>
            根据主键信息从数据源查询数据表到数据集中
            </summary>
            <param name="tableName">数据源中的表名称</param>
            <param name="pkNames">主键名称数组</param>
            <param name="pkValues">主键值数组，必须和主键名对应</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SelectDataSet(System.String,System.String,System.String[],System.Object[],PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            根据主键信息从数据源查询数据表到数据集中
            </summary>
            <param name="fields">字段列表</param>
            <param name="tableName">数据源中的表名称</param>
            <param name="pkNames">主键名称数组</param>
            <param name="pkValues">主键值数组，必须和主键名对应</param>
            <param name="DB">数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SelectDataSet(System.String,System.String,System.String[],System.Object[])">
            <summary>
            根据主键信息从数据源查询数据表到数据集中
            </summary>
            <param name="fields">字段列表</param>
            <param name="tableName">数据源中的表名称</param>
            <param name="pkNames">主键名称数组</param>
            <param name="pkValues">主键值数组，必须和主键名对应</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateField(System.Data.DataSet,System.String,System.String,System.Object,System.String,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新数据集中的字段到数据源中
            </summary>
            <param name="sDs">源数据集</param>
            <param name="tableName">要更新的表</param>
            <param name="fieldName">要更新的字段</param>
            <param name="fieldValue">字段的值</param>
            <param name="pkName">主键名称</param>
            <param name="DB">数据访问对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetDBParaChar(PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            获取特定数据库参数字符
            </summary>
            <param name="DB">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateDataTable(System.Data.DataTable,System.String)">
            <summary>
            更新数据表到数据源中
            </summary>
            <param name="dt"></param>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.SaveDataTable(System.Data.DataTable,System.String,System.String,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            自动保存数据表中的数据到数据库
            <remarks>更新时间：2011.11.16</remarks>
            </summary>
            <param name="dt"></param>
            <param name="insertSQL"></param>
            <param name="updateSQL"></param>
            <param name="DB"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.UpdateDataTable(System.Data.DataTable,System.String,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新数据表，带数据访问对象
            </summary>
            <param name="dt"></param>
            <param name="SQL"></param>
            <param name="DB"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetSqlUpdate(System.Data.DataTable)">
            <summary>
            为数据表生成更新SQL语句，参数名带@@前缀[不更新主键]
            </summary>
            <param name="dt">数据表</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.MyDB.GetSqlInsert(System.Data.DataTable)">
            <summary>
            为数据表生成插入SQL语句，参数名带@@前缀
            </summary>
            <param name="dt">数据表</param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.MyDB.Instance">
            <summary>
            数据访问静态实例对象，如果有事务并且有可能存在并发访问，请勿使用该属性，而是创建该类的动态实例对象。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.MyDB.Message">
            <summary>
            获取当前操作信息
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.SqlMap.CommandInfo">
            <summary>
            命令信息，支持处理分页SQL语句
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.SqlMap.CommandInfo.PageSize">
            <summary>
            获取或者设置分页大小，默认为10
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.SqlMap.CommandInfo.PageNumber">
            <summary>
            获取或者分页的当前页码，默认为1
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.SqlMap.CommandInfo.AllCount">
            <summary>
            设置记录总数，只有该值大于零，才会启用分页功能。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.SqlMap.CommandInfo.DataBaseType">
            <summary>
            获取或者设置数据库类型
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.CommandInfo.#ctor(PWMIS.Common.DBMSType)">
            <summary>
            使用指定的数据库类型初始化本类
            </summary>
            <param name="dbType"></param>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.CommandInfo.SetPageInfo(System.Int32[])">
            <summary>
            设置分页信息，pageInfo[ 0]=记录数量，pageInfo[ 1]=页码，pageInfo[ 2]=页大小
            </summary>
            <param name="pageInfo">分页信息数组</param>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.CommandInfo.SetParameterValue(System.String,System.Object)">
            <summary>
            给指定的参数赋值
            </summary>
            <param name="paramName"></param>
            <param name="paramValue"></param>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.CommandInfo.SetParameterValue(System.String,System.String,PWMIS.Common.enumParamType)">
            <summary>
            指定参数替换类型的参数赋值方法,paramName 不带Me.ParaChar 或者 "#"限定符
            </summary>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
            <param name="paramType">参数类型</param>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.CommandInfo.CommandType">
            <summary>
            获取命令类型
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.CommandInfo.CommandText">
            <summary>
            获取可以执行的SQL命令文本
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.CommandInfo.DataParameters">
            <summary>
            获取参数数组
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.DataMap.SqlMap.DBMapper">
            <summary>
            SQLMAP数据处理层基类
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:PWMIS.DataMap.SqlMap.DBMapper.#ctor">
            <summary>
            初始化构造函数
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.DBMapper.CurrentDataBase">
            <summary>
            获取或设置当前使用的数据库操作对象
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.DBMapper.SqlMapFile">
            <summary>
            获取或设置SQL Map 配置文件地址(可以是一个外部配置文件或者嵌入程序集的配置文件)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:PWMIS.DataMap.SqlMap.DBMapper.Mapper">
            <summary>
            获取SQLMAP对象
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityContainer">
            <summary>
            实体数据容器
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.#ctor(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            使用OQL表达式和数据访问对象实例初始化
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="db">数据访问对象实例</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.#ctor(PWMIS.DataMap.Entity.OQL)">
            <summary>
            使用查询表达式初始化
            </summary>
            <param name="oql"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.Execute">
            <summary>
            执行OQL查询，并将查询结果缓存
            </summary>
            <returns>结果的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.Execute(System.Data.IDataReader)">
            <summary>
            执行DataReader查询，并将查询结果缓存
            </summary>
            <param name="reader">数据阅读器</param>
            <returns>结果行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.GetItemValues">
            <summary>
            获取容器数据中的每一行的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.Map``1">
            <summary>
            将数据从容器中映射到实体中
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.GetItemValue``1(System.String)">
            <summary>
            根据字段名，从当前行获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.GetItemValue``1(System.Int32)">
            <summary>
            根据字段索引，从当前行获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityContainer.Map``1(PWMIS.DataMap.Entity.EntityContainer.Func{``0})">
            <summary>
            采用自定义的映射方式，将数据容器中的数据映射到指定的类中 
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="fun">处理数据的方法</param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityContainer.OQL">
            <summary>
            查询表达式
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityContainer.DataBase">
            <summary>
            数据访问对象
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityContainer.FieldNames">
            <summary>
            获取容器数据中的字段名数组
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityContainer.Func`1">
            <summary>
            以 TResult为输入参数，并返回此类型的函数的委托定义
            </summary>
            <typeparam name="TResult">输入类型</typeparam>
            <param name="arg">参数</param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataMap.ControlDataMap">
            <summary>
            BrainControl 的摘要说明。
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.ControlDataMap.CollectDataToObject``1(System.Collections.Generic.List{PWMIS.Common.IDataControl})">
            <summary>
            从智能数据控件中收集数据到一个新的对象中（如实体对象）
            </summary>
            <typeparam name="T">返回的对象类型</typeparam>
            <param name="controls">控件列表</param>
            <returns>一个新的对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.ControlDataMap.CollectQueryString(System.Collections.ICollection)">
            <summary>
            收集控件的查询字符串，例如已经为控件指定了查询条件比较符号。
            </summary>
            <param name="conlObject">容器对象</param>
            <returns>查询字符串</returns>
        </member>
        <member name="T:PWMIS.Core.CommonUtil">
            <summary>
            通用方法类
            </summary>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.GetAssemblyResource(System.String,System.String)">
            <summary>
            从指定的程序集中获取一个嵌入式资源的文本内容
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="resourceName">资源名称</param>
            <returns>资源内容</returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.GetAssemblyResource(System.Type,System.String)">
            <summary>
            根据指定的类型，从该类型所在的程序集中获取指定的资源内容文本
            </summary>
            <param name="resourceType">与指定的类型</param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.GetAssemblyResource(System.Reflection.Assembly,System.String)">
            <summary>
            在指定的程序集中寻找指定嵌入式资源文本内容
            </summary>
            <param name="assembly">资源所在的程序集</param>
            <param name="resourceName">资源的名称</param>
            <returns>嵌入式资源文本内容</returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.PrepareSqlFields(System.String[])">
            <summary>
            为字段名加上中括号，避免字段名中有空格的问题
            </summary>
            <param name="fields">字段名称数组</param>
            <returns>新的字段名数组</returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.ReplaceWebRootPath(System.String@)">
            <summary>
            替换Web路径格式中的相对虚拟路径（~）为当前程序执行的绝对路径
            </summary>
            <param name="sourcePath"></param>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.ChangeType``1(System.Object)">
            <summary>
            泛型类型转换方法
            </summary>
            <example>
             object o1 = 111;
            int i = getProperty《int》(o1);
            o1 = DBNull.Value;
            i = getProperty《int》(o1);
            DateTime d = getProperty《DateTime》(o1);
            o1 = 123.33m;
            double db = getProperty《double》(o1);
            o1 = "123.4";
            float f = getProperty《float》(o1);
            o1 = null;
            f = getProperty《float》(o1);
            </example>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="Value">Object类型的待转换对象</param>
            <returns>目标类型</returns>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.TypeToDbType(System.Type)">
            <summary>
            Type 转换成 DbType
            </summary>
            <param name="t"></param>
            <returns></returns>
            <remarks>参考http://www.cnblogs.com/davinci/archive/2010/01/22/1654139.html</remarks>
        </member>
        <member name="M:PWMIS.Core.CommonUtil.ConvertType(System.Data.DbType)">
            <summary>
            DbType 转换成 Type
            </summary>
            <param name="dbType"></param>
            <returns></returns>
            <remarks>参考 http://www.cnblogs.com/davinci/archive/2010/01/22/1654139.html</remarks>
        </member>
        <member name="P:PWMIS.Core.CommonUtil.CacheEntityMapSql">
            <summary>
            缓存的SQLMAP实体类中映射的SQL，键为实体类的SQL查询名称
            </summary>
        </member>
        <member name="T:PWMIS.Common.IReadData">
            <summary>
            读取数据接口，以用户自定义的方式，来决定如何读取来自数据源的数据
            </summary>
        </member>
        <member name="M:PWMIS.Common.IReadData.ReadData(System.Data.IDataReader,System.Int32,System.String[])">
            <summary>
            读取数据
            </summary>
            <param name="reader">数据阅读器</param>
            <param name="fieldCount">本次字段数量</param>
            <param name="fieldNames">本次字段的名称数组</param>
        </member>
        <member name="T:PWMIS.Common.IDataControl">
            <summary>
            数据映射控件接口
            </summary>
        </member>
        <member name="M:PWMIS.Common.IDataControl.SetValue(System.Object)">
            <summary>
            设置值
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:PWMIS.Common.IDataControl.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.Common.IDataControl.Validate">
            <summary>
            服务端验证
            </summary>
            <returns></returns>
        </member>
        <member name="P:PWMIS.Common.IDataControl.LinkProperty">
            <summary>
            与数据库数据项相关联的数据
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.LinkObject">
            <summary>
            与数据关联的表名
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.IsValid">
            <summary>
            是否通过服务器验证默认为true
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.SysTypeCode">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.ReadOnly">
            <summary>
            只读标记
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.isNull">
            <summary>
            是否允许空值
            </summary>
        </member>
        <member name="P:PWMIS.Common.IDataControl.PrimaryKey">
            <summary>
            是否是主键
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.Oracle">
            <summary>
            OracleServer 数据处理
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.GetSchema(System.String,System.String[])">
            <summary>
            返回此 OracleConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Oracle.PrepareSQL(System.String@)">
            <summary>
            预处理SQL语句，语句中不能包含"["，"]"左右中括号，如果需要，请使用参数化查询。
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Oracle.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Oracle.GetParameterChar">
            <summary>
            获取Oracle数据库参数前缀资费
            <remarks>由网友路人甲.aspx 补充</remarks>
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.Odbc">
            <summary>
            ODBC 数据访问类
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.Odbc.GetSchema(System.String,System.String[])">
            <summary>
            返回此 OdbcConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Odbc.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.Access">
            <summary>
            Access 数据库访问类
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.OleDb">
            <summary>
            OleDbServer 数据处理
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetConnection">
            <summary>
            创建并且打开数据库连接
            </summary>
            <returns>数据库连接</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetDataAdapter(System.Data.IDbCommand)">
            <summary>
            获取数据适配器实例
            </summary>
            <returns>数据适配器</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetParameter">
            <summary>
            获取一个新参数对象
            </summary>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
             获取一个新参数对象
            </summary>
            <param name="paraName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns>特定于数据源的参数对象</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.OleDb.GetSchema(System.String,System.String[])">
            <summary>
            返回此 OleDbConnection 的数据源的架构信息。
            </summary>
            <param name="collectionName">集合名称</param>
            <param name="restrictionValues">请求的架构的一组限制值</param>
            <returns>数据库架构信息表</returns>
        </member>
        <member name="P:PWMIS.DataProvider.Data.OleDb.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Access.CurrentDBMSType">
            <summary>
            获取当前数据库类型的枚举
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.Access.InsertKey">
            <summary>
            在插入具有自增列的数据后，获取刚才自增列的数据的
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Adapter.IBCommand">
            <summary>
            智能窗体命令对象，使用该对前必须确保对应的数据表有主建和插入时候的自增列
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.IBCommand.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Adapter.IBCommand.#ctor(System.String)">
            <summary>
            指定一个数据表初始化该类
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.IBCommand.InsertCommand">
            <summary>
            插入数据命令
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.IBCommand.UpdateCommand">
            <summary>
            更新数据命令
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.IBCommand.SelectCommand">
            <summary>
            选择数据命令
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.IBCommand.DeleteCommand">
            <summary>
            删除数据命令
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.IBCommand.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.IBCommand.InsertedID">
            <summary>
            插入标识，用于数据库的自增列
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.IBCommand.GuidPrimaryKey">
            <summary>
            GUID 主键名称
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Adapter.IBCommand.Parameters">
            <summary>
            对应的查询参数数组
            </summary>
        </member>
        <member name="T:PWMIS.Common.IQueryControl">
            <summary>
            数据查询控件接口
            </summary>
        </member>
        <member name="P:PWMIS.Common.IQueryControl.CompareSymbol">
            <summary>
            查询的比较符号,例如 =,>=,
            </summary>
        </member>
        <member name="P:PWMIS.Common.IQueryControl.QueryFormatString">
            <summary>
            发送到数据库查询前的字段值格式字符串
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQL">
            <summary>
            实体对象查询表达式
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.TopCount">
            <summary>
            查询前N条记录，目前仅支持Access/SqlServer，其它数据库可以使用Limit(N) 方法替代。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageEnable">
            <summary>
            是否开启分页功能，如果启用，OQL不能设定“排序”信息，分页标识字段将作为排序字段
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageSize">
            <summary>
            分页时候每页的记录大小，默认为10
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageNumber">
            <summary>
            分页时候的当前页码，默认为1
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageField">
            <summary>
            分页时候的记录标识字段，默认为主键字段。不支持多主键。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageOrderDesc">
            <summary>
            分页的时候记录按照倒序排序（对Oracle数据库不起效）
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.PageWithAllRecordCount">
            <summary>
            分页的时候，记录的总数量，如未设置虚拟为999条。如需准确分页，应设置该值。
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL.Distinct">
            <summary>
            是否排除重复记录
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Limit(System.Int32)">
            <summary>
            限制查询的记录数量，对于SQLSERVER/ACCESS，将采用主键作为标识的高速分页方式。
            注：调用该方法不会影响生OQL.ToString()结果，仅在最终执行查询的时候才会去构造当前特点数据库的SQL语句。
            </summary>
            <param name="pageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Limit(System.Int32,System.Int32)">
            <summary>
            限制查询的记录数量，对于SQLSERVER/ACCESS，将采用主键作为标识的高速分页方式。
            注：调用该方法不会影响生OQL.ToString()结果，仅在最终执行查询的时候才会去构造当前特点数据库的SQL语句。
            </summary>
            <param name="pageSize">页大小</param>
            <param name="pageNumber">页号码</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Limit(System.Int32,System.Int32,System.String)">
            <summary>
            限制查询的记录数量，对于SQLSERVER/ACCESS，将采用指定字段作为标识的高速分页方式。
            注：调用该方法不会影响生OQL.ToString()结果，仅在最终执行查询的时候才会去构造当前特点数据库的SQL语句。
            </summary>
            <param name="pageSize">页大小</param>
            <param name="pageNumber">页号码</param>
            <param name="pageField">要排序的字段</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.ReSet">
            <summary>
            重新初始化实体对象查询表达式的内部状态
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.#ctor(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            使用一个实体对象初始化实体对象查询表达式
            </summary>
            <param name="e">实体对象</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.From(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            静态实体对象表达式
            </summary>
            <param name="e">实体对象实例</param>
            <returns>实体对象查询表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Join(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            内连接查询
            </summary>
            <param name="e">要连接的实体对象</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.InnerJoin(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            内连接查询
            </summary>
            <param name="e">要连接的实体对象</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.LeftJoin(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            左连接查询
            </summary>
            <param name="e">要连接的实体对象</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.RightJoin(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            右连接查询
            </summary>
            <param name="e">要连接的实体对象</param>
            <returns>连接对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Select(System.Object[])">
            <summary>
            选取实体对象的属性
            </summary>
            <param name="fields">属性字段列表</param>
            <returns>实体对象查询基本表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Select(System.Boolean,System.Object[])">
            <summary>
            使用是否排除重复记录的方式，来选取实体对象的属性
            </summary>
            <param name="distinct"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Update(System.Object[])">
            <summary>
            更新实体类的某些属性值，如果未指定条件，则使用主键值为条件。
            </summary>
            <param name="fields">实体熟悉列表</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.UpdateSelf(System.Char,System.Object[])">
            <summary>
            执行自操作的字段更新，比如为某一个数值性字段执行累加
            </summary>
            <param name="selfOptChar">自操作类型，有+，-，*，/ 四种类型</param>
            <param name="fields">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Delete">
            <summary>
            删除实体类，如果未指定条件，则使用主键值为条件。
            </summary>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.GetMapSQL(System.String)">
            <summary>
            根据用户自定义的查询（临时视图），从该查询进一步获取指定的记录的查询语句
            </summary>
            <param name="tempViewSql">作为子表的用户查询（临时视图）</param>
            <returns>符合当前限定条件的查询语句</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.ToString">
            <summary>
            获取SQL表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL.Dispose">
            <summary>
            释放资源，取消事件订阅。
            注意，如果OQL构造函数使用的实体类对象是一个不会释放的对象（长生命周期），那么请使用using语句块或者手动调用本方法。
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.EntityMap">
            <summary>
            实体类映射的类型
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.Condition">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.Parameters">
            <summary>
            获取条件参数
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL.InitParameters">
            <summary>
            要初始化的的参数值，用于自定义查询的实体类
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQL1">
            <summary>
            基本表达式
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL1.CurrEntity">
            <summary>
            基本表达式中的当前实体对象
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL1.Selected">
            <summary>
            是否已经执行完OQL之Select方法
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQL1.sqlFunctionString">
            <summary>
            Select 中的函数名字符串。例如Count，Max，Min 等
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.#ctor(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataMap.Entity.OQL)">
            <summary>
            使用实体对象初始化构造函数
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Where(PWMIS.DataMap.Entity.OQL2)">
            <summary>
            获取复杂查询条件
            </summary>
            <param name="c">多条件表达式</param>
            <returns>基本表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Where(PWMIS.DataMap.Entity.OQLCompare)">
            <summary>
            获取复杂查询条件(具有逻辑优先级的复杂比较条件）
            </summary>
            <param name="compare">实体对象比较类</param>
            <returns>基本表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Where(System.Object[])">
            <summary>
            获取并列查询条件，如 Where(u.Uid,u.Name);
            </summary>
            <param name="expression">实体属性列表</param>
            <returns>基本表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Where(PWMIS.DataMap.Entity.QueryParameter[])">
            <summary>
            根据传入的查询参数数组，对字段名执行不区分大小写的比较，生成查询条件。
            </summary>
            <param name="queryParas">查询参数数组</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.GroupBy(System.Object)">
            <summary>
            设定分组字段。分组字段将自动作为选择的候选字段，而且覆盖原有选择的字段。
            </summary>
            <param name="field">分组字段，如果有多个，请继续调用本方法</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.OrderBy(System.Object,System.String)">
            <summary>
            设定排序条件
            </summary>
            <param name="field">实体对象属性</param>
            <param name="orderType">排序类型 ASC，DESC</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Count(System.Object,System.String)">
            <summary>
            OQL1表达式之统计数量，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Max(System.Object,System.String)">
            <summary>
            OQL1表达式之求最大值，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Min(System.Object,System.String)">
            <summary>
            OQL1表达式之求最小值，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Sum(System.Object,System.String)">
            <summary>
            OQL1表达式之求合计，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.Avg(System.Object,System.String)">
            <summary>
            OQL1表达式之求平均，请在结果实体类中使用PropertyList["字段别名"] 的方式获取查询值
            </summary>
            <param name="field">属性字段</param>
            <param name="asFieldName">字段别名，如果不指定，则使用字段名称</param>
            <returns>OQL1</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL1.ToString">
            <summary>
            获取基本的条件语句
            </summary>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL1.Parameters">
            <summary>
            获取条件参数
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL1.GroupByFields">
            <summary>
            获取分组自动列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL1.END">
            <summary>
            OQL表达式构造结束
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQL2">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.#ctor(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            使用一个实体对象，初始化条件表达式
            </summary>
            <param name="e">实体对象实例</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.AND(System.Object,System.String,System.Object)">
            <summary>
            选取 与 条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="compareType">SQL 比较条件，如"=","LIKE","IS" 等</param>
            <param name="Value">要比较的值</param>
            <returns>多条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.AND(PWMIS.DataMap.Entity.OQLCompare[])">
            <summary>
            获取并列条件集合（待实现）
            </summary>
            <param name="cmps">条件集合</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.OR(System.Object,System.String,System.Object)">
            <summary>
            选取 或 条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="compareType">SQL 比较条件，如"=","LIKE","IS" 等</param>
            <param name="Value">要比较的值</param>
            <returns>多条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.OR(PWMIS.DataMap.Entity.OQLCompare[])">
            <summary>
            获取 或者 条件集合（待实现）
            </summary>
            <param name="cmps">条件集合</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.NOT(System.Object,System.String,System.Object)">
            <summary>
            选取 非 条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="compareType">SQL 比较条件，如"=","LIKE","IS" 等</param>
            <param name="Value">要比较的值</param>
            <returns>多条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.NOT(PWMIS.DataMap.Entity.OQLCompare[])">
            <summary>
            获取 非 条件集合（待实现）
            </summary>
            <param name="cmps">条件集合</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.IN(System.Object,System.Object[])">
            <summary>
            选取 字段 列表条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="Values">值列表</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.NotIn(System.Object,System.Object[])">
            <summary>
            构造Not In查询条件
            </summary>
            <param name="field">字段</param>
            <param name="Values">值数组</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.IN(System.Object,System.String[])">
            <summary>
            选取 字段 列表条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="Values">值列表</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.NotIn(System.Object,System.String[])">
            <summary>
            Not In 条件
            </summary>
            <param name="field">实体对象的属性</param>
            <param name="Values">值列表</param>
            <returns>条件表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.IN(System.Object,PWMIS.DataMap.Entity.OQL)">
            <summary>
            以另外一个OQL条件作为In的子查询
            </summary>
            <seealso cref="!:http://www.cnblogs.com/bluedoctor/archive/2011/02/24/1963606.html"/>
            <param name="field">属性字段</param>
            <param name="q">OQL表达式</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQL2.NotIn(System.Object,PWMIS.DataMap.Entity.OQL)">
            <summary>
            以另外一个OQL条件作为Not In的子查询
            </summary>
            <seealso cref="!:http://www.cnblogs.com/bluedoctor/archive/2011/02/24/1963606.html"/>
            <param name="field">属性字段</param>
            <param name="q">OQL表达式</param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL2.Parameters">
            <summary>
            获取条件参数
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQL2.ConditionString">
            <summary>
            获取条件字符串
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLCompare">
            <summary>
            实体对象条件比较类，用于复杂条件比较表达式
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.#ctor(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            使用一个实体对象初始化本类
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.#ctor(PWMIS.DataMap.Entity.EntityBase,PWMIS.DataMap.Entity.EntityBase[])">
            <summary>
            使用多个实体类进行连接查询的条件
            </summary>
            <param name="e"></param>
            <param name="joinedEntitys"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer(System.Collections.Generic.List{PWMIS.DataMap.Entity.OQLCompare},PWMIS.DataMap.Entity.OQLCompare.CompareLogic)">
            <summary>
            对一组OQLCompare 对象，执行CompareLogic 类型的比较，通常用于构造复杂的带括号的条件查询
            </summary>
            <seealso cref="!:http://www.cnblogs.com/bluedoctor/archive/2011/02/24/1963606.html"/>
            <param name="compares">OQL比较对象列表</param>
            <param name="logic">各组比较条件的组合方式，And，Or，Not</param>
            <returns>新的条件比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.#ctor(PWMIS.DataMap.Entity.OQLCompare,PWMIS.DataMap.Entity.OQLCompare.CompareLogic,PWMIS.DataMap.Entity.OQLCompare)">
            <summary>
            采用两个实体比较对象按照某种比较逻辑进行处理，构造一个新的实体比较对象
            </summary>
            <seealso cref="!:http://www.cnblogs.com/bluedoctor/archive/2010/11/28/1870095.html"/>
            <param name="compare1">比较逻辑符号左边的实体比较对象</param>
            <param name="logic">比较逻辑</param>
            <param name="compare2">比较逻辑符号左边的实体比较对象</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer(System.Object,PWMIS.DataMap.Entity.OQLCompare.CompareType,System.Object)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="type">比较类型枚举</param>
            <param name="Value">要比较的值</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer(System.Object,PWMIS.DataMap.Entity.OQLCompare.CompareType,System.Object,System.String)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="type">比较类型枚举</param>
            <param name="Value">要比较的值</param>
            <param name="sqlFunctionFormat">SQL 函数格式串，例如 "DATEPART(hh, {0})"</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer(System.Object,System.String,System.Object)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="compareTypeString">数据库比较类型字符串</param>
            <param name="Value">要比较的值</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer(System.Object,System.String,System.Object,System.String)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="compareTypeString">数据库比较类型字符串</param>
            <param name="Value">要比较的值</param>
            <param name="sqlFunctionFormat">SQL 函数格式串，例如 "DATEPART(hh, {0})"</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Comparer(System.Object)">
            <summary>
            将当前实体属性的值作为比较的值，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象的属性字段</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.BeginEquals(System.Object)">
            <summary>
            开始字段名称的相等比较（待实现）
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.EndEquals(System.Object)">
            <summary>
            结束字段名称的相等比较（待实现）
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Equals(System.Object,System.Object)">
            <summary>
            将当前实体属性的值和要比较的值进行比较，得到一个新的实体比较对象
            </summary>
            <param name="field">实体对象属性</param>
            <param name="Value">要比较的值</param>
            <returns>比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_BitwiseAnd(PWMIS.DataMap.Entity.OQLCompare,PWMIS.DataMap.Entity.OQLCompare)">
            <summary>
            将两个实体比较对象进行逻辑 与 比较，得到一个新的实体比较表达式
            </summary>
            <param name="compare1">左表达式</param>
            <param name="compare2">右表达式</param>
            <returns>实体比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_BitwiseOr(PWMIS.DataMap.Entity.OQLCompare,PWMIS.DataMap.Entity.OQLCompare)">
            <summary>
            将两个实体比较对象进行逻辑 与 比较，得到一个新的实体比较表达式
            </summary>
            <param name="compare1">左表达式</param>
            <param name="compare2">右表达式</param>
            <returns>实体比较表达式</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_Equality(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置等于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_Inequality(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置不等于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_GreaterThanOrEqual(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置不小于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_LessThanOrEqual(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置不大于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_GreaterThan(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置大于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.op_LessThan(PWMIS.DataMap.Entity.OQLCompare,System.Object)">
            <summary>
            设置小于某个实体属性的比较条件
            </summary>
            <param name="compare">当前实体比较对象</param>
            <param name="Value">要比较的值</param>
            <returns>构造的实体比较对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Property(System.Object)">
            <summary>
            根据实体对象的属性，获取新的条件比较对象
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.OQLCompare.Dispose">
            <summary>
            释放资源，取消事件订阅。
            注意，如果OQLCompare构造函数使用的实体类对象是一个不会释放的对象（长生命周期），那么请使用using语句块或者手动调用本方法。
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQLCompare.ComparedParameters">
            <summary>
            （条件表达式）比较的参数信息表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.OQLCompare.CompareString">
            <summary>
            获取比较表达式的字符串形式
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLCompare.CompareType">
            <summary>
            比较类别
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.LessThanOrEqual">
            <summary>
            不大于（小于或等于）
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.GreaterThanOrEqual">
            <summary>
            不小于（大于或等于）
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.Equal">
            <summary>
            相等
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.Like">
            <summary>
            类似于
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.IS">
            <summary>
            IS NULL / IS NOT NULL
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.IN">
            <summary>
            IN 查询
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareType.NotIn">
            <summary>
            Not In 查询
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.OQLCompare.CompareLogic">
            <summary>
            条件表达式逻辑符号
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareLogic.AND">
            <summary>
            逻辑 与
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareLogic.OR">
            <summary>
            逻辑 或
            </summary>
        </member>
        <member name="F:PWMIS.DataMap.Entity.OQLCompare.CompareLogic.NOT">
            <summary>
            逻辑 非
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityFields">
            <summary>
            存储实体类的全局字段信息，以一种更为方便的方式访问实体类属性和对应的表字段
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.GetPropertyType(System.String)">
            <summary>
            根据字段名称获取对应的实体属性类型
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.GetPropertyField(System.String)">
            <summary>
            获取属性名对应的字段名
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.Init(System.Type)">
            <summary>
            初始化实体信息
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFields.CreateTableColumnScript(PWMIS.DataProvider.Data.AdoHelper,PWMIS.DataMap.Entity.EntityBase,System.String)">
            <summary>
            为实体类的一个属性创建对应的数据库表的列的脚本
            </summary>
            <param name="db"></param>
            <param name="entity"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityFields.Fields">
            <summary>
            获取实体类对应的表字段名称数组
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityFields.PropertyNames">
            <summary>
            获取实体属性名称数组
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityFields.TableName">
            <summary>
            获取实体类对应的表名称
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityFields.PropertyType">
            <summary>
            获取实体属性的类型
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityFieldsCache">
            <summary>
            实体字段缓存
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityFieldsCache.Item(System.Type)">
            <summary>
            获取缓存项，如果没有，将自动创建一个
            </summary>
            <param name="entityType">实体类类型</param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataProvider.Data.ConnectionSession">
            <summary>
            连接会话对象类
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.ConnectionSession.#ctor(System.Data.IDbConnection)">
            <summary>
            以一个使用的连接初始化本类
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.ConnectionSession.Dispose">
            <summary>
            释放连接
            </summary>
        </member>
        <member name="T:PWMIS.Common.SQLPage">
            <summary>
            SQL SERVER 分页处理，自动识别标准SQL语句并生成适合分页的SQL语句
            </summary>
        </member>
        <member name="M:PWMIS.Common.SQLPage.MakeSQLStringByPage(PWMIS.Common.DBMSType,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成SQL分页语句，记录总数为0表示生成统计语句
            </summary>
            <param name="dbmsType">数据库类型</param>
            <param name="strSQLInfo">原始SQL语句</param>
            <param name="strWhere">在分页前要替换的字符串，用于分页前的筛选</param>
            <param name="PageSize">页大小</param>
            <param name="PageNumber">页码</param>
            <param name="AllCount">记录总数，如果是0则生成统计记录数量的查询</param>
            <returns>生成SQL分页语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.MakeSQLStringByPage(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成SQL分页语句，记录总数为0表示生成统计语句
            </summary>
            <param name="strSQLInfo">原始SQL语句</param>
            <param name="strWhere">在分页前要替换的字符串，用于分页前的筛选</param>
            <param name="PageSize">页大小</param>
            <param name="PageNumber">页码</param>
            <param name="AllCount">记录总数，如果是0则生成统计记录数量的查询</param>
            <returns>生成SQL分页语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.MakePageSQLStringByMSSQL(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            MS SQLSERVER 分页SQL语句生成器，同样适用于ACCESS数据库
            </summary>
            <param name="strSQLInfo">原始SQL语句</param>
            <param name="strWhere">在分页前要替换的字符串，用于分页前的筛选</param>
            <param name="PageSize">页大小</param>
            <param name="PageNumber">页码</param>
            <param name="AllCount">记录总数</param>
            <returns>生成SQL分页语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.MakePageSQLStringByOracle(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Oracle 分页SQL语句生成器
            </summary>
            <param name="strSQLInfo">原始SQL语句</param>
            <param name="strWhere">在分页前要替换的字符串，用于分页前的筛选</param>
            <param name="PageSize">页大小</param>
            <param name="PageNumber">页码</param>
            <param name="AllCount">记录总数</param>
            <returns>生成SQL分页语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.GetDescPageSQLbyPrimaryKey(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            根据主键的高效快速分页之倒序分页
            </summary>
            <param name="pageNum">页码，从1开始</param>
            <param name="pageSize">页大小，大于1</param>
            <param name="filedList">字段列表</param>
            <param name="tableName">表名称</param>
            <param name="PKName">主键名称</param>
            <param name="conditon">查询条件</param>
            <returns>返回指定页码的快速分页SQL语句</returns>
        </member>
        <member name="M:PWMIS.Common.SQLPage.GetAscPageSQLbyPrimaryKey(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            根据主键的高效快速分页之 升序分页
            </summary>
            <param name="pageNum">页码，从1开始</param>
            <param name="pageSize">页大小，大于1</param>
            <param name="filedList">字段列表</param>
            <param name="tableName">表名称</param>
            <param name="PKName">主键名称</param>
            <param name="conditon">查询条件</param>
            <returns>返回指定页码的快速分页SQL语句</returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityQueryAnonymous">
            <summary>
            匿名实体类查询，在只知道实体类类型但没有直接的实体类实例的情况下很有用
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ImportData(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase},System.Int32)">
            <summary>
            将实体集合中的所有数据导入数据库，如果数据已经存在则修改（先删除再插入）否则直接插入。如果实体中的数据只包含部分字段的数据，请勿使用该方法。
            </summary>
            <param name="entityList">同一实体类集合</param>
            <param name="bulkCopyModel">是否使用批量插入的方式更新，只支持SQLSERVER。
            取值含义：0，不使用批量复制，1，批量复制前删除数据库中对应的重复记录，2，不检查重复，直接批量插入
            </param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.GetTargetFields(System.String,System.String[],PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            获取目标数据库表中的实际字段名称列表，目标库的字段可能跟实体类定义的字段数量不一样
            </summary>
            <param name="tableName"></param>
            <param name="PropertyNames"></param>
            <param name="DB"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ImportDataInner(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase},PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            将实体集合中的所有数据导入数据库，如果数据已经存在则修改（先删除再插入）否则直接插入。如果实体中的数据只包含部分字段的数据，请勿使用该方法。
            </summary>
            <param name="entityList">同一实体类集合</param>
            <param name="DB">数据访问对象实例</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ParseInsertOrUpdateCount(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            解析更新或者修改的条数
            </summary>
            <param name="allCount">InsertOrUpdate 方法取得的总条数</param>
            <param name="listCount">记录的总条数</param>
            <param name="insertCount">插入的条数</param>
            <param name="updateCount">修改的条数</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.InsertOrUpdate(System.Collections.Generic.List{PWMIS.DataMap.Entity.EntityBase})">
            <summary>
            将实体类集合中实体类的数据插入或者修改到数据库中，适用于更新数据，如果需要大批量导入数据，请考虑使用 ImportData 方法。
            </summary>
            <param name="entityList">实体类集合</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.QueryList(PWMIS.DataMap.Entity.OQL,System.Type)">
            <summary>
            根据实体查询表达式对象，查询实体对象集合
            </summary>
            <param name="oql">实体对象查询表达式</param>
            <param name="factEntityType">具体实体类的类型</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.QueryList(System.Data.IDataReader,System.Type)">
            <summary>
            根据数据阅读器对象，查询实体对象集合(注意查询完毕将自动释放该阅读器对象)
            </summary>
            <param name="reader">数据阅读器对象</param>
            <param name="factEntityType">具体实体类的类型</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.QueryList(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,System.Type)">
            <summary>
            根据实体查询表达式对象，和当前数据库操作对象，查询实体对象集合
            </summary>
            <param name="oql">实体查询表达式对象</param>
            <param name="db">数据库操作对象</param>
            <param name="factEntityType">实体类的实际类型</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteDataReader(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,System.Type)">
            <summary>
            根据OQL查询数据获得DataReader
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="db">当前数据库访问对象</param>
            <param name="factEntityType">实体类类型</param>
            <returns>DataReader</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.FindFieldNameInSql(System.String,System.String,System.String)">
            <summary>
            寻找SQL语句中参数名对应的字段名称
            </summary>
            <param name="sql"></param>
            <param name="paraName"></param>
            <param name="paraChar"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteDataReader(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper,System.Type,System.Boolean)">
            <summary>
             根据OQL查询数据获得DataReader。如果指定single=真，将执行优化的查询以获取单条记录
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="db">当前数据库访问对象</param>
            <param name="factEntityType">实体类类型</param>
            <param name="single">是否只查询一条记录</param>
            <returns>DataReader</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.GetMapSql(System.Type)">
            <summary>
            根据EntityMapSql的全名称 "名称空间名字.SQL名字" 获取映射的SQL语句
            </summary>
            <param name="entityType">根据当前实体类所在程序集，获取其中的嵌入式EntityMapSql 文件</param>
            <returns>映射的SQL语句</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteScalar(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            执行返回单值的查询，通常用于OQL的Count,Max等查询
            </summary>
            <param name="oql">查询表达式</param>
            <param name="db">数据访问对象</param>
            <returns>单值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.ExecuteDataList``1(System.Data.IDataReader)">
            <summary>
            执行返回列表数据的查询
            </summary>
            <typeparam name="T">实体类型，支持普通的POCO实体类，仅需实现IReadData 接口</typeparam>
            <param name="reader">数据阅读器</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQueryAnonymous.EntitysToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将实体类转换成数据表
            </summary>
            <typeparam name="Entity">实体类类型</typeparam>
            <param name="entitys">实际的实体类</param>
            <returns>数据表</returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQueryAnonymous.DefaultDataBase">
            <summary>
            操作需要的数据库实例，如果不设定将采用默认实例
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.ConditionHandle`1">
            <summary>
            实体类查询条件委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityQuery`1">
            <summary>
            实体对象查询查询类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.#ctor(PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            采用一个数据库操作对象实例初始化本类
            </summary>
            <param name="db">数据库操作对象实例</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.FillEntity(`0)">
            <summary>
            填充实体对象，必须有主键值才可以填充成功
            </summary>
            <param name="entity">实体对象实例，必须为主键字段属性设置值</param>
            <returns>返回填充是否成功</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.FillEntityList(PWMIS.DataMap.Entity.OQL,`0)">
            <summary>
            [网友左眼提供]以OQL为查询，并且附加当前类型的实体类中改变了值的属性 为查询条件
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="entity">实体类实例对象</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.FillParameter(PWMIS.DataMap.Entity.OQL,`0,System.Data.IDataParameter[]@)">
            <summary>
            根据实体填充参数,返回sql
            </summary>
            <param name="oql"></param>
            <param name="entity"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Fill(`0)">
            <summary>
            采用默认的数据操作对象，填充实体对象，必须有主键值才可以填充成功。注意：该方法可能线程不安全，请使用实例对象的方法 FillEntity 。
            </summary>
            <param name="entity">实体对象实例，必须为主键字段属性设置值</param>
            <returns>返回填充是否成功</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(PWMIS.DataMap.Entity.OQL,`0)">
            <summary>
            [网友左眼提供]以OQL为查询，并且附加当前类型的实体类中改变了值的属性 为查询条件
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="entity">实体类实例对象</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryObject(PWMIS.DataMap.Entity.OQL)">
            <summary>
            根据实体查询表达式对象，查询符合条件的一个实体对象
            </summary>
            <param name="oql">OQL表达式</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryObject(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            根据实体查询表达式对象，查询符合条件的一个实体对象。如果数据访问对象未在事务中，方法执行完后将自动关闭数据库连接。
            </summary>
            <param name="oql">OQL表达式</param>
            <param name="db">数据访问对象实例</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryObject(System.Data.IDataReader)">
            <summary>
            根据数据阅读器，返回指定的对象。如果数据访问对象未在事务中，方法执行完后将自动关闭数据库连接。
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(PWMIS.DataMap.Entity.OQL)">
            <summary>
            根据实体查询表达式对象，查询实体对象集合，如果未查询到结果，集合元素数量为0。
            注意，该方法将使用默认的数据访问对象 MyDB.Instance，如果你在事务中请使用另一个重载方法，传入事务相关的数据访问对象。
            </summary>
            <param name="oql">实体对象查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
            根据实体查询表达式对象，和当前数据库操作对象，查询实体对象集合
            </summary>
            <param name="oql">实体查询表达式对象</param>
            <param name="db">数据库操作对象</param>
            <returns>实体对象集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.GetMapSql(System.Type)">
            <summary>
            根据EntityMapSql的全名称 "名称空间名字.SQL名字" 获取映射的SQL语句
            </summary>
            <param name="entityType">根据当前实体类所在程序集，获取其中的嵌入式EntityMapSql 文件</param>
            <returns>映射的SQL语句</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(System.Data.IDataReader)">
            <summary>
            根据数据阅读器对象，查询实体对象集合(注意查询完毕将自动释放该阅读器对象)
            </summary>
            <param name="reader">数据阅读器对象</param>
            <returns>实体类集合</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.QueryList(PWMIS.DataMap.Entity.ConditionHandle{`0})">
            <summary>
            根据指定的条件，从数据阅读器中赛选出需要的实体对象。本方法适用于数据量不是很大的数据库表，要加强效率，请使用OQL表达式。
            </summary>
            <param name="condition">查询条件</param>
            <returns>实体对象列表</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Insert(`0)">
            <summary>
            插入一个实体对象
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            插入一个实体对象集合（使用事务方式）
            </summary>
            <param name="entityList">实体对象集合</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Update(`0)">
            <summary>
            修改一个实体对象
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            更新一个实体类集合（内部采用事务方式）
            </summary>
            <param name="entityList">实体类集合</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.DeleteInnerByDB(`0,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            从数据库删除实体对象对应的记录
            </summary>
            <param name="entity"></param>
            <param name="DB">数据访问对象实例</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Delete(`0)">
            <summary>
            从数据库删除实体对象对应的记录
            </summary>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除一个实体类集合（内部采用事务方式）
            </summary>
            <param name="entityList">实体类集合</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.ExecuteOql(PWMIS.DataMap.Entity.OQL)">
            <summary>
            执行一个不返回结果集的OQL查询表达式，例如更新，删除实体类的操作
            </summary>
            <param name="oql">实体查询表达式</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.ExecuteOql(PWMIS.DataMap.Entity.OQL,PWMIS.DataProvider.Data.AdoHelper)">
            <summary>
             执行一个不返回结果集的OQL查询表达式，例如更新，删除实体类的操作。使用自定义的数据访问对象进行操作
            </summary>
            <param name="oql"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.#ctor(`0)">
            <summary>
            使用一个实体类初始化本类，将探测数据库中是否存在本实体类对应的记录（为提高效率，建议使用另外一个重载）
            </summary>
            <param name="entity">实体类</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.#ctor(`0,System.Boolean)">
            <summary>
            使用一个实体类初始化本类，并指明该实体类持久化时新增还是修改
            </summary>
            <param name="entity">实体类</param>
            <param name="newEntity">是否是新实体</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Save(System.Object[])">
            <summary>
            保存(使用指定的属性)数据到数据库。如果属性值自使用本类以来没有改变过或者没有为本方法指定实体对象的属性字段，那么将不会更新任何数据。
            </summary>
            <param name="fields">实体类属性值列表</param>
            <returns>操作数据库影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Save(PWMIS.DataProvider.Data.CommonDB,System.Object[])">
            <summary>
            使用带事务的数据库对象，保存(使用指定的属性)数据到数据库。
            如果属性值自使用本类以来没有改变过或者没有为本方法指定实体对象的属性字段，那么将不会更新任何数据。
            </summary>
            <param name="db">数据库对象，可以在外部开启事务</param>
            <param name="fields">实体类属性值列表</param>
            <returns>操作数据库影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.SaveAllChanges(PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            保存自实体类申明以来，所有做过的修改到数据库。
            </summary>
            <param name="db">数据库访问对象实例</param>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.SaveAllChanges">
            <summary>
            保存自实体类申明以来，所有做过的修改到数据库。
            </summary>
            <returns>操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Delete(`0,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            删除实体对象的动态实例方法，CommonDB 可以是开启了事务的对象
            </summary>
            <param name="entity"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Update(`0,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            更新实体对象的动态实例方法，CommonDB 可以是开启了事务的对象
            </summary>
            <param name="entity">实体对象</param>
            <param name="db">数据库对象</param>
            <returns>返回操作受影响的行数</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityQuery`1.Insert(`0,PWMIS.DataProvider.Data.CommonDB)">
            <summary>
            插入实体对象的动态实例方法，CommonDB 可以是开启了事务的对象
            </summary>
            <param name="entity">实体类对象</param>
            <param name="db">数据库对象</param>
            <returns>返回操作受影响的行数</returns>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQuery`1.Instance">
            <summary>
            获取实体查询对象的实例
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityQuery`1.DefaultDataBase">
            <summary>
            获取或者设置默认的数据库操作对象，如果未设置将采用默认的配置进行实例化数据库操作对象
            </summary>
        </member>
        <member name="T:PWMIS.DataMap.Entity.EntityBase">
            <summary>
            PDF.NET 4.3 实体类基础类
            </summary>
        </member>
        <member name="T:PWMIS.Common.IEntity">
            <summary>
            实体类接口
            </summary>
        </member>
        <member name="M:PWMIS.Common.IEntity.PropertyList(System.String)">
            <summary>
            获取属性（和属性值）列表
            </summary>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="P:PWMIS.Common.IEntity.IdentityName">
            <summary>
            标识字段名称
            </summary>
        </member>
        <member name="P:PWMIS.Common.IEntity.PrimaryKeys">
            <summary>
            获取主键
            </summary>
        </member>
        <member name="P:PWMIS.Common.IEntity.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:PWMIS.Common.IEntity.PropertyNames">
            <summary>
            获取属性字段名数组
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.SetFieldNames">
            <summary>
            设置实体类的对应的字段名称数组
            新版本必须实现这个细节,为了兼容性,这里不作为抽象方法
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.SetPropertyValues(System.Object[])">
            <summary>
            设置所有属性的值
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.ResetChanges">
            <summary>
            重置属性值的修改状态
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.ResetChanges(System.Boolean)">
            <summary>
            重置实体类全部属性的修改标记。注意，EntityQuery将根据该标记决定更新哪些字段到数据库，
            它只更新标记为已经修改的实体类属性
            </summary>
            <param name="flag">是否已经修改</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            触发属性改变事件
            </summary>
            <param name="e">属性改变事件对象</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.Clone">
            <summary>
            获取当前对象的浅表副本
            </summary>
            <returns>当前对象的浅表副本</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.PropertyList(System.String)">
            <summary>
            获取属性列的值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.OnPropertyGeting(System.String)">
            <summary>
            获取属性的时候
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.getProperty(System.String,System.TypeCode)">
            <summary>
            获取属性值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <param name="t">属性类型代码</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.getProperty``1(System.String)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="propertyName">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.setProperty(System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <param name="Value">属性值</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntityBase.setProperty(System.String,System.String,System.Int32)">
            <summary>
            设置属性，如果值是字符类型且设置了最大长度大于0，那么不允许设置大于此长度的字符串
            </summary>
            <param name="name">字段名称</param>
            <param name="Value">值</param>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.EntityMap">
            <summary>
            实体类的映射类型
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.PropertyNames">
            <summary>
            属性字段名列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.PropertyValues">
            <summary>
            属性值列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.PropertyChangedList">
            <summary>
            属性值被改变的属性名列表
            </summary>
        </member>
        <member name="E:PWMIS.DataMap.Entity.EntityBase.PropertyChanged">
            <summary>
            属性改变事件
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.IdentityName">
            <summary>
            标识字段名称（有些数据库可能内置不支持），该字段不可更新，但是插入数据的时候可以获取该字段
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.PrimaryKeys">
            <summary>
            主键字段名称列表
            </summary>
        </member>
        <member name="P:PWMIS.DataMap.Entity.EntityBase.TableName">
            <summary>
            实体类对应的数据库表名称
            </summary>
        </member>
        <member name="E:PWMIS.DataMap.Entity.EntityBase.PropertyGetting">
            <summary>
            属性获取事件
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.QueryException">
            <summary>
            查询异常类
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.QueryException.#ctor(System.String)">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.QueryException.#ctor(System.String,System.String,System.Data.CommandType,System.Data.IDataParameter[],System.Boolean,System.String)">
            <summary>
            使用命令信息初始化构造函数
            </summary>
            <param name="message"></param>
            <param name="sql"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <param name="inTransaction"></param>
            <param name="connectionString"></param>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.Sql">
            <summary>
            SQL
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.CmdType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.InTransaction">
            <summary>
            是否在事务中
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.QueryException.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:PWMIS.DataProvider.Data.CommandLog">
            <summary>
            命令对象日志2008.7.18 增加线程处理,2011.5.9 增加执行时间记录
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.#ctor(System.Boolean)">
            <summary>
            是否开启执行时间记录
            </summary>
            <param name="startStopwatch"></param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.ReSet">
            <summary>
            重新开始记录执行时间
            </summary>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.WriteLog(System.Data.IDbCommand,System.String,System.Int64@)">
            <summary>
            写命令日志和执行时间（如果开启的话）
            </summary>
            <param name="command">命令对象</param>
            <param name="who">调用命令的源名称</param>
            <param name="elapsedMilliseconds">执行时间</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.WriteLog(System.String,System.String)">
             <summary>
            写入日志消息
             </summary>
             <param name="msg">消息</param>
             <param name="who">发送者</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.WriteErrLog(System.Data.IDbCommand,System.String)">
            <summary>
            写错误日志，将使用 DataLogFile 配置键的文件名写文件，不受SaveCommandLog 影响，除非 DataLogFile 未设置或为空。
            </summary>
            <param name="command">命令对象</param>
            <param name="errmsg">调用命令的源名称</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.GetLog">
            <summary>
            获取日志文本
            </summary>
            <returns>日志文本</returns>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.RecordCommandLog(System.Data.IDbCommand,System.String)">
            <summary>
            记录命令信息
            </summary>
            <param name="command">命令对象</param>
            <param name="who">执行人</param>
        </member>
        <member name="M:PWMIS.DataProvider.Data.CommandLog.WriteLog(System.String)">
            <summary>
            写入日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.DataLogFile">
            <summary>
            获取或者设置日志文件的路径，可以带Web相对路径
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.SaveCommandLog">
            <summary>
            是否记录日志文件
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.LogExecutedTime">
            <summary>
            需要记录的时间，只有该值等于0会记录所有查询，否则只记录大于该时间的查询。单位毫秒。
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.Instance">
            <summary>
            获取单例对象
            </summary>
        </member>
        <member name="P:PWMIS.DataProvider.Data.CommandLog.CommandText">
            <summary>
            获取当前执行的实际SQL语句
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.PropertyList(System.String)">
            <summary>
            获取属性列的值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.getProperty(System.String,System.TypeCode)">
            <summary>
            获取属性值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <param name="t">属性类型代码</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.getProperty``1(System.String)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="propertyName">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.setProperty(System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="propertyName">属性字段名称</param>
            <param name="Value">属性值</param>
        </member>
        <member name="M:PWMIS.DataMap.Entity.EntitySerializable.setProperty(System.String,System.String,System.Int32)">
            <summary>
            设置属性，如果值是字符类型且设置了最大长度大于0，那么不允许设置大于此长度的字符串
            </summary>
            <param name="name">字段名称</param>
            <param name="Value">值</param>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="T:PWMIS.DataMap.Entity.PdfNetSerialize">
            <summary>
            PDF.NET 实体类序列化器
            </summary>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize.BinarySerialize(PWMIS.DataMap.Entity.EntityBase)">
            <summary>
            二进制序列化
            </summary>
            <param name="entity">实体类实例</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize.BinaryDeserialize(System.Byte[],System.Type)">
            <summary>
            反序列化实体类
            </summary>
            <param name="buffer">要反序列化的数据源</param>
            <param name="factEntityType">实体类的实际类型</param>
            <returns>实体类实例</returns>
        </member>
        <member name="T:PWMIS.DataMap.Entity.PdfNetSerialize`1">
            <summary>
            PDF.NET 实体类序列化器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize`1.BinarySerialize(`0)">
            <summary>
            二进制序列化一个实体类
            </summary>
            <param name="entity">实体对象实例</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize`1.BinarySerialize(`0[])">
            <summary>
            二进制序列化一个实体类数组
            </summary>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize`1.BinaryDeserialize(System.Byte[])">
            <summary>
            反序列化一个二进制实体类
            </summary>
            <param name="buffer">二进制实体类字节流</param>
            <returns>实体类</returns>
        </member>
        <member name="M:PWMIS.DataMap.Entity.PdfNetSerialize`1.BinaryDeserializeArray(System.Byte[])">
            <summary>
            反序列化一个二进制实体类数组
            </summary>
            <param name="buffer">二进制字节缓存</param>
            <returns>实体类数组</returns>
        </member>
        <member name="T:PWMIS.Common.ParamMapType">
            <summary>
            参数结构
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.enumParamType">
            <summary>
            参数类型
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumParamType.DataParameter">
            <summary>
            参数
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumParamType.ReplacedText">
            <summary>
            替换文本
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.enumQueryType">
            <summary>
            查询类型
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.enumResultClass">
            <summary>
            结果类型
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.ValueType">
            <summary>
            值类型，比如Integer，String 等
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.DataSet">
            <summary>
            数据集
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.EntityObject">
            <summary>
            实体对象，指定该类型后，需要指定 ResuleMap 属性
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.EntityList">
            <summary>
            实体对象集合，指定该类型后，需要指定 ResuleMap 属性
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumResultClass.Default">
            <summary>
            默认类型，根据配置决定默认生成哪一种结果类型
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:PWMIS.Common.enumCompare">
            <summary>
            实体对象字段比较枚举
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.Greater">
            <summary>
            大于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.NoGreater">
            <summary>
            不大于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.Smaller">
            <summary>
            小于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.NoSmaller">
            <summary>
            不小于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.Equal">
            <summary>
            等于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.NotEqual">
            <summary>
            不等于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.Like">
            <summary>
            类似于
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:PWMIS.Common.enumCompare.IsNull">
            <summary>
            空
            </summary>
        </member>
        <member name="F:PWMIS.Common.enumCompare.IsNotNull">
            <summary>
            非空
            </summary>
        </member>
        <member name="T:PWMIS.Common.EntityMapType">
            <summary>
            实体类的映射类型
            </summary>
        </member>
        <member name="F:PWMIS.Common.EntityMapType.Table">
            <summary>
            表实体类，该实体具有对数据库CRUD功能。
            </summary>
        </member>
        <member name="F:PWMIS.Common.EntityMapType.View">
            <summary>
            视图实体类，通常是数据库视图的映射，属性数据不能持久化。
            </summary>
        </member>
        <member name="F:PWMIS.Common.EntityMapType.SqlMap">
            <summary>
            SQL语句映射实体类，将从SQL-MAP实体配置文件中使用用户定义的查询。
            </summary>
        </member>
        <member name="F:PWMIS.Common.EntityMapType.StoredProcedure">
            <summary>
            存储过程，将从SQL-MAP实体配置文件中使用用户定义的存储过程名称和参数信息，需要采用SQL-MAP的参数语法
            </summary>
        </member>
    </members>
</doc>
